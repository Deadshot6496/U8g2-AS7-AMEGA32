
WFT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000225c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  0000225c  000022f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000465  0080009c  0080009c  0000232c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001e48  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000433d6  00000000  00000000  0000420c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002539  00000000  00000000  000475e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b4e7  00000000  00000000  00049b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000b884  00000000  00000000  00055004  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010367  00000000  00000000  00060888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00049404  00000000  00000000  00070bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001e50  00000000  00000000  000b9ff3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c0 02 	jmp	0x580	; 0x580 <__ctors_end>
       4:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
       8:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
       c:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      10:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      14:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      18:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      1c:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      20:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      24:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      28:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      2c:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      30:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      34:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      38:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      3c:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      40:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      44:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      48:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      4c:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      50:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__bad_interrupt>
      54:	fa 0c       	add	r15, r10
      56:	f5 0c       	add	r15, r5
      58:	f0 0c       	add	r15, r0
      5a:	fe 0c       	add	r15, r14
      5c:	80 0d       	add	r24, r0
      5e:	80 0d       	add	r24, r0
      60:	7d 0d       	add	r23, r13
      62:	7d 0d       	add	r23, r13
      64:	7d 0d       	add	r23, r13
      66:	7d 0d       	add	r23, r13
      68:	7d 0d       	add	r23, r13
      6a:	7d 0d       	add	r23, r13
      6c:	7d 0d       	add	r23, r13
      6e:	7d 0d       	add	r23, r13
      70:	7d 0d       	add	r23, r13
      72:	7d 0d       	add	r23, r13
      74:	7d 0d       	add	r23, r13
      76:	7d 0d       	add	r23, r13
      78:	7d 0d       	add	r23, r13
      7a:	7d 0d       	add	r23, r13
      7c:	7d 0d       	add	r23, r13
      7e:	7d 0d       	add	r23, r13
      80:	7d 0d       	add	r23, r13
      82:	7d 0d       	add	r23, r13
      84:	29 0d       	add	r18, r9
      86:	2f 0d       	add	r18, r15
      88:	35 0d       	add	r19, r5
      8a:	3b 0d       	add	r19, r11
      8c:	41 0d       	add	r20, r1
      8e:	47 0d       	add	r20, r7
      90:	4d 0d       	add	r20, r13
      92:	53 0d       	add	r21, r3
      94:	59 0d       	add	r21, r9
      96:	80 0d       	add	r24, r0
      98:	5f 0d       	add	r21, r15
      9a:	80 0d       	add	r24, r0
      9c:	80 0d       	add	r24, r0
      9e:	80 0d       	add	r24, r0
      a0:	65 0d       	add	r22, r5
      a2:	6b 0d       	add	r22, r11
      a4:	71 0d       	add	r23, r1
      a6:	74 0d       	add	r23, r4
      a8:	77 0d       	add	r23, r7
      aa:	7a 0d       	add	r23, r10

000000ac <__trampolines_end>:
      ac:	5f 00       	.word	0x005f	; ????
      ae:	03 02       	muls	r16, r19
      b0:	03 04       	cpc	r0, r3
      b2:	04 05       	cpc	r16, r4
      b4:	05 08       	sbc	r0, r5
      b6:	11 00       	.word	0x0011	; ????
      b8:	fd 0b       	sbc	r31, r29
      ba:	fd 0c       	add	r15, r13
      bc:	ff 01       	movw	r30, r30
      be:	94 03       	fmuls	r17, r20
      c0:	42 04       	cpc	r4, r2
      c2:	b6 20       	and	r11, r6
      c4:	05 00       	.word	0x0005	; ????
      c6:	f4 19       	sub	r31, r4
      c8:	21 07       	cpc	r18, r17
      ca:	59 86       	std	Y+9, r5	; 0x09
      cc:	19 07       	cpc	r17, r25
      ce:	45 22       	and	r4, r21
      d0:	07 1c       	adc	r0, r7
      d2:	c5 19       	sub	r28, r5
      d4:	91 29       	or	r25, r1
      d6:	23 0e       	add	r2, r19
      d8:	c6 8c       	ldd	r12, Z+30	; 0x1e
      da:	39 51       	subi	r19, 0x19	; 25
      dc:	cb b0       	in	r12, 0x0b	; 11
      de:	44 2d       	mov	r20, r4
      e0:	c3 12       	cpse	r12, r19
      e2:	b5 00       	.word	0x00b5	; ????
      e4:	24 14       	cp	r2, r4
      e6:	75 75       	andi	r23, 0x55	; 85
      e8:	59 61       	ori	r21, 0x19	; 25
      ea:	b6 54       	subi	r27, 0x46	; 70
      ec:	94 28       	or	r9, r4
      ee:	c9 44       	sbci	r28, 0x49	; 73
      f0:	2d 89       	ldd	r18, Y+21	; 0x15
      f2:	12 a5       	ldd	r17, Z+42	; 0x2a
      f4:	b2 85       	ldd	r27, Z+10	; 0x0a
      f6:	11 00       	.word	0x0011	; ????
      f8:	25 14       	cp	r2, r5
      fa:	df 84       	ldd	r13, Y+15	; 0x0f
      fc:	39 a1       	ldd	r19, Y+33	; 0x21
      fe:	92 29       	or	r25, r2
     100:	51 d2       	rcall	.+1186   	; 0x5a4 <__do_clear_bss+0x2>
     102:	16 a5       	ldd	r17, Z+46	; 0x2e
     104:	a5 2c       	mov	r10, r5
     106:	69 4a       	sbci	r22, 0xA9	; 169
     108:	b4 44       	sbci	r27, 0x44	; 68
     10a:	4c 00       	.word	0x004c	; ????
     10c:	26 13       	cpse	r18, r22
     10e:	df 84       	ldd	r13, Y+15	; 0x0f
     110:	59 62       	ori	r21, 0x29	; 41
     112:	94 45       	sbci	r25, 0x54	; 84
     114:	59 14       	cp	r5, r9
     116:	aa 95       	dec	r26
     118:	48 4a       	sbci	r20, 0xA8	; 168
     11a:	6a 51       	subi	r22, 0x1A	; 26
     11c:	26 4d       	sbci	r18, 0xD6	; 214
     11e:	01 27       	eor	r16, r17
     120:	08 a3       	std	Y+32, r16	; 0x20
     122:	c5 39       	cpi	r28, 0x95	; 149
     124:	96 12       	cpse	r9, r22
     126:	00 28       	or	r0, r0
     128:	0c 6c       	ori	r16, 0xCC	; 204
     12a:	7d 79       	andi	r23, 0x9D	; 157
     12c:	51 2d       	mov	r21, r1
     12e:	ca 3a       	cpi	r28, 0xAA	; 170
     130:	66 61       	ori	r22, 0x16	; 22
     132:	01 29       	or	r16, r1
     134:	0c 6c       	ori	r16, 0xCC	; 204
     136:	7d 19       	sub	r23, r13
     138:	61 2d       	mov	r22, r1
     13a:	cc 3a       	cpi	r28, 0xAC	; 172
     13c:	65 51       	subi	r22, 0x15	; 21
     13e:	0d 2a       	or	r0, r29
     140:	0c ae       	std	Y+60, r0	; 0x3c
     142:	94 39       	cpi	r25, 0x94	; 148
     144:	51 26       	eor	r5, r17
     146:	0d 93       	st	X+, r16
     148:	16 25       	eor	r17, r6
     14a:	00 2b       	or	r16, r16
     14c:	0b bf       	out	0x3b, r16	; 59
     14e:	8c 79       	andi	r24, 0x9C	; 156
     150:	71 6d       	ori	r23, 0xD1	; 209
     152:	18 b2       	in	r1, 0x18	; 24
     154:	b8 06       	cpc	r11, r24
     156:	2c 08       	sbc	r2, r12
     158:	23 75       	andi	r18, 0x53	; 83
     15a:	39 96       	adiw	r30, 0x09	; 9
     15c:	12 00       	.word	0x0012	; ????
     15e:	2d 07       	cpc	r18, r29
     160:	8f a4       	ldd	r8, Y+47	; 0x2f
     162:	19 87       	std	Y+9, r17	; 0x09
     164:	00 2e       	mov	r0, r16
     166:	07 92       	lat	Z, r0
     168:	85 19       	sub	r24, r5
     16a:	43 00       	.word	0x0043	; ????
     16c:	2f 0f       	add	r18, r31
     16e:	ef 7c       	andi	r30, 0xCF	; 207
     170:	d9 d5       	rcall	.+2994   	; 0xd24 <u8g2_DrawGlyph+0x82>
     172:	38 8d       	ldd	r19, Y+24	; 0x18
     174:	d3 38       	cpi	r29, 0x83	; 131
     176:	8d d3       	rcall	.+1818   	; 0x892 <u8g2_font_decode_get_signed_bits+0x2>
     178:	38 8d       	ldd	r19, Y+24	; 0x18
     17a:	01 30       	cpi	r16, 0x01	; 1
     17c:	0d de       	rcall	.-998    	; 0xfffffd98 <__eeprom_end+0xff7efd98>
     17e:	84 59       	subi	r24, 0x94	; 148
     180:	5a 94       	dec	r5
     182:	84 7e       	andi	r24, 0xE4	; 228
     184:	4c a2       	std	Y+36, r4	; 0x24
     186:	4c 02       	muls	r20, r28
     188:	31 0a       	sbc	r3, r17
     18a:	dc 84       	ldd	r13, Y+12	; 0x0c
     18c:	79 91       	ld	r23, Y+
     18e:	92 48       	sbci	r25, 0x82	; 130
     190:	59 3f       	cpi	r21, 0xF9	; 249
     192:	32 0c       	add	r3, r2
     194:	de 84       	ldd	r13, Y+14	; 0x0e
     196:	39 43       	sbci	r19, 0x39	; 57
     198:	12 8a       	std	Z+18, r1	; 0x12
     19a:	69 b1       	in	r22, 0x09	; 9
     19c:	d7 61       	ori	r29, 0x17	; 23
     19e:	33 10       	cpse	r3, r3
     1a0:	de 84       	ldd	r13, Y+14	; 0x0e
     1a2:	39 43       	sbci	r19, 0x39	; 57
     1a4:	12 a6       	std	Z+42, r1	; 0x2a
     1a6:	c5 6c       	ori	r28, 0xC5	; 197
     1a8:	4e 53       	subi	r20, 0x3E	; 62
     1aa:	31 19       	sub	r19, r1
     1ac:	12 00       	.word	0x0012	; ????
     1ae:	34 0f       	add	r19, r20
     1b0:	de 84       	ldd	r13, Y+14	; 0x0e
     1b2:	99 a1       	ldd	r25, Y+33	; 0x21
     1b4:	2d 89       	ldd	r18, Y+21	; 0x15
     1b6:	ba 64       	ori	r27, 0x4A	; 74
     1b8:	c9 30       	cpi	r28, 0x09	; 9
     1ba:	a6 15       	cp	r26, r6
     1bc:	00 35       	cpi	r16, 0x50	; 80
     1be:	10 de       	rcall	.-992    	; 0xfffffde0 <__eeprom_end+0xff7efde0>
     1c0:	84 19       	sub	r24, r4
     1c2:	83 92       	.word	0x9283	; ????
     1c4:	56 24       	eor	r5, r6
     1c6:	29 09       	sbc	r18, r9
     1c8:	d3 aa       	std	Z+51, r13	; 0x33
     1ca:	16 4d       	sbci	r17, 0xD6	; 214
     1cc:	00 36       	cpi	r16, 0x60	; 96
     1ce:	0e de       	rcall	.-996    	; 0xfffffdec <__eeprom_end+0xff7efdec>
     1d0:	84 59       	subi	r24, 0x94	; 148
     1d2:	53 98       	cbi	0x0a, 3	; 10
     1d4:	56 16       	cp	r5, r22
     1d6:	4d 74       	andi	r20, 0x4D	; 77
     1d8:	4c 86       	std	Y+12, r4	; 0x0c
     1da:	04 37       	cpi	r16, 0x74	; 116
     1dc:	0e de       	rcall	.-996    	; 0xfffffdfa <__eeprom_end+0xff7efdfa>
     1de:	84 19       	sub	r24, r4
     1e0:	87 30       	cpi	r24, 0x07	; 7
     1e2:	0d d3       	rcall	.+1562   	; 0x7fe <u8g2_font_decode_get_unsigned_bits+0x2a>
     1e4:	30 2d       	mov	r19, r0
     1e6:	a6 35       	cpi	r26, 0x56	; 86
     1e8:	00 38       	cpi	r16, 0x80	; 128
     1ea:	11 de       	rcall	.-990    	; 0xfffffe0e <__eeprom_end+0xff7efe0e>
     1ec:	84 39       	cpi	r24, 0x94	; 148
     1ee:	43 12       	cpse	r4, r19
     1f0:	1a 93       	st	-Y, r17
     1f2:	28 1a       	sub	r2, r24
     1f4:	92 d0       	rcall	.+292    	; 0x31a <__trampolines_end+0x26e>
     1f6:	31 19       	sub	r19, r1
     1f8:	12 00       	.word	0x0012	; ????
     1fa:	39 0e       	add	r3, r25
     1fc:	de 84       	ldd	r13, Y+14	; 0x0e
     1fe:	39 43       	sbci	r19, 0x39	; 57
     200:	12 7a       	andi	r17, 0xA2	; 162
     202:	53 96       	adiw	r26, 0x13	; 19
     204:	b4 18       	sub	r11, r4
     206:	4d 00       	.word	0x004d	; ????
     208:	3a 08       	sbc	r3, r10
     20a:	b2 85       	ldd	r27, Z+10	; 0x0a
     20c:	19 43       	sbci	r17, 0x39	; 57
     20e:	38 04       	cpc	r3, r8
     210:	3b 0a       	sbc	r3, r27
     212:	43 75       	andi	r20, 0x53	; 83
     214:	39 76       	andi	r19, 0x69	; 105
     216:	40 51       	subi	r20, 0x10	; 16
     218:	4a 00       	.word	0x004a	; ????
     21a:	3c 09       	sbc	r19, r12
     21c:	55 85       	ldd	r21, Z+13	; 0x0d
     21e:	99 59       	subi	r25, 0x99	; 153
     220:	c7 b4       	in	r12, 0x27	; 39
     222:	03 3d       	cpi	r16, 0xD3	; 211
     224:	08 a6       	std	Y+40, r0	; 0x28
     226:	94 19       	sub	r25, r4
     228:	77 74       	andi	r23, 0x47	; 71
     22a:	18 3e       	cpi	r17, 0xE8	; 232
     22c:	0a 55       	subi	r16, 0x5A	; 90
     22e:	85 19       	sub	r24, r5
     230:	69 c7       	rjmp	.+3794   	; 0x1104 <u8g2_update_dimension_common+0x5e>
     232:	ac 23       	and	r26, r28
     234:	00 3f       	cpi	r16, 0xF0	; 240
     236:	0e df       	rcall	.-484    	; 0x54 <__SREG__+0x15>
     238:	84 39       	cpi	r24, 0x94	; 148
     23a:	83 92       	.word	0x9283	; ????
     23c:	aa 71       	andi	r26, 0x1A	; 26
     23e:	da 9c       	mul	r13, r10
     240:	c3 35       	cpi	r28, 0x53	; 83
     242:	00 40       	sbci	r16, 0x00	; 0
     244:	14 d7       	rcall	.+3624   	; 0x106e <u8g2_ll_hvline_vertical_top_lsb+0x8e>
     246:	84 59       	subi	r24, 0x94	; 148
     248:	5b 25       	eor	r21, r11
     24a:	8a 94       	dec	r8
     24c:	8a 52       	subi	r24, 0x2A	; 42
     24e:	51 2a       	or	r5, r17
     250:	4a 45       	sbci	r20, 0x5A	; 90
     252:	4a a2       	std	Y+34, r4	; 0x22
     254:	1c 18       	sub	r1, r12
     256:	04 41       	sbci	r16, 0x14	; 20
     258:	10 df       	rcall	.-480    	; 0x7a <__SREG__+0x3b>
     25a:	84 79       	andi	r24, 0x94	; 148
     25c:	71 35       	cpi	r23, 0x51	; 81
     25e:	09 93       	st	Y+, r16
     260:	ac 94 45 83 	jmp	0x29068a	; 0x29068a <__TEXT_REGION_LENGTH__+0x27068a>
     264:	92 5a       	subi	r25, 0xA2	; 162
     266:	03 42       	sbci	r16, 0x23	; 35
     268:	0f de       	rcall	.-994    	; 0xfffffe88 <__eeprom_end+0xff7efe88>
     26a:	84 19       	sub	r24, r4
     26c:	83 12       	cpse	r8, r19
     26e:	ba 25       	eor	r27, r10
     270:	83 12       	cpse	r8, r19
     272:	3a 0e       	add	r3, r26
     274:	0b 00       	.word	0x000b	; ????
     276:	43 0c       	add	r4, r3
     278:	de 84       	ldd	r13, Y+14	; 0x0e
     27a:	59 53       	subi	r21, 0x39	; 57
     27c:	a6 f6       	brtc	.-88     	; 0x226 <__trampolines_end+0x17a>
     27e:	39 8b       	std	Y+17, r19	; 0x11
     280:	16 00       	.word	0x0016	; ????
     282:	44 0d       	add	r20, r4
     284:	de 84       	ldd	r13, Y+14	; 0x0e
     286:	19 43       	sbci	r17, 0x39	; 57
     288:	94 25       	eor	r25, r4
     28a:	a1 bf       	out	0x31, r26	; 49
     28c:	25 43       	sbci	r18, 0x35	; 53
     28e:	04 45       	sbci	r16, 0x54	; 84
     290:	0c de       	rcall	.-1000   	; 0xfffffeaa <__eeprom_end+0xff7efeaa>
     292:	84 19       	sub	r24, r4
     294:	87 b4       	in	r8, 0x27	; 39
     296:	75 88       	ldd	r7, Z+21	; 0x15
     298:	d2 d6       	rcall	.+3492   	; 0x103e <u8g2_ll_hvline_vertical_top_lsb+0x5e>
     29a:	61 46       	sbci	r22, 0x61	; 97
     29c:	0c 5e       	subi	r16, 0xEC	; 236
     29e:	85 19       	sub	r24, r5
     2a0:	87 b4       	in	r8, 0x27	; 39
     2a2:	75 88       	ldd	r7, Z+21	; 0x15
     2a4:	d2 ae       	std	Z+58, r13	; 0x3a
     2a6:	00 47       	sbci	r16, 0x70	; 112
     2a8:	0e de       	rcall	.-996    	; 0xfffffec6 <__eeprom_end+0xff7efec6>
     2aa:	84 59       	subi	r24, 0x94	; 148
     2ac:	53 a6       	std	Z+43, r5	; 0x2b
     2ae:	36 0d       	add	r19, r6
     2b0:	a1 31       	cpi	r26, 0x11	; 17
     2b2:	c9 a2       	std	Y+33, r12	; 0x21
     2b4:	21 48       	sbci	r18, 0x81	; 129
     2b6:	0b de       	rcall	.-1002   	; 0xfffffece <__eeprom_end+0xff7efece>
     2b8:	84 19       	sub	r24, r4
     2ba:	a1 c7       	rjmp	.+3906   	; 0x11fe <u8g2_SetupBuffer+0x30>
     2bc:	61 10       	cpse	r6, r1
     2be:	3d 06       	cpc	r3, r29
     2c0:	49 0a       	sbc	r4, r25
     2c2:	5d 85       	ldd	r21, Y+13	; 0x0d
     2c4:	19 83       	std	Y+1, r17	; 0x01
     2c6:	14 f6       	brge	.-124    	; 0x24c <__trampolines_end+0x1a0>
     2c8:	a7 41       	sbci	r26, 0x17	; 23
     2ca:	4a 0c       	add	r4, r10
     2cc:	de 84       	ldd	r13, Y+14	; 0x0e
     2ce:	79 63       	ori	r23, 0x39	; 57
     2d0:	da 97       	sbiw	r26, 0x3a	; 58
     2d2:	2c c9       	rjmp	.-3496   	; 0xfffff52c <__eeprom_end+0xff7ef52c>
     2d4:	a2 09       	sbc	r26, r2
     2d6:	4b 12       	cpse	r4, r27
     2d8:	de 84       	ldd	r13, Y+14	; 0x0e
     2da:	19 a1       	ldd	r17, Y+33	; 0x21
     2dc:	2d c9       	rjmp	.-3494   	; 0xfffff538 <__eeprom_end+0xff7ef538>
     2de:	92 a8       	ldd	r9, Z+50	; 0x32
     2e0:	92 29       	or	r25, r2
     2e2:	51 96       	adiw	r26, 0x11	; 17
     2e4:	64 49       	sbci	r22, 0x94	; 148
     2e6:	28 06       	cpc	r2, r24
     2e8:	4c 09       	sbc	r20, r12
     2ea:	de 84       	ldd	r13, Y+14	; 0x0e
     2ec:	19 69       	ori	r17, 0x99	; 153
     2ee:	ff 3a       	cpi	r31, 0xAF	; 175
     2f0:	0c 4d       	sbci	r16, 0xDC	; 220
     2f2:	11 df       	rcall	.-478    	; 0x116 <__trampolines_end+0x6a>
     2f4:	84 19       	sub	r24, r4
     2f6:	a9 ba       	out	0x19, r10	; 25
     2f8:	0d d9       	rcall	.-3558   	; 0xfffff514 <__eeprom_end+0xff7ef514>
     2fa:	52 51       	subi	r21, 0x12	; 18
     2fc:	2a 52       	subi	r18, 0x2A	; 42
     2fe:	24 45       	sbci	r18, 0x54	; 84
     300:	aa 35       	cpi	r26, 0x5A	; 90
     302:	4e 10       	cpse	r4, r14
     304:	de 84       	ldd	r13, Y+14	; 0x0e
     306:	19 a1       	ldd	r17, Y+33	; 0x21
     308:	b8 6d       	ori	r27, 0xD8	; 216
     30a:	4a 24       	eor	r4, r10
     30c:	25 52       	subi	r18, 0x25	; 37
     30e:	a2 1d       	adc	r26, r2
     310:	c5 00       	.word	0x00c5	; ????
     312:	4f 0c       	add	r4, r15
     314:	de 84       	ldd	r13, Y+14	; 0x0e
     316:	39 43       	sbci	r19, 0x39	; 57
     318:	12 fa       	bst	r1, 2
     31a:	c7 64       	ori	r28, 0x47	; 71
     31c:	48 00       	.word	0x0048	; ????
     31e:	50 0c       	add	r5, r0
     320:	de 84       	ldd	r13, Y+14	; 0x0e
     322:	19 83       	std	Y+1, r17	; 0x01
     324:	12 3a       	cpi	r17, 0xA2	; 162
     326:	0e 4b       	sbci	r16, 0xBE	; 190
     328:	da 15       	cp	r29, r10
     32a:	51 18       	sub	r5, r1
     32c:	ef 74       	andi	r30, 0x4F	; 79
     32e:	39 43       	sbci	r19, 0x39	; 57
     330:	14 26       	eor	r1, r20
     332:	61 12       	cpse	r6, r17
     334:	26 61       	ori	r18, 0x16	; 22
     336:	12 26       	eor	r1, r18
     338:	61 12       	cpse	r6, r17
     33a:	26 a5       	ldd	r18, Z+46	; 0x2e
     33c:	44 29       	or	r20, r4
     33e:	0d 71       	andi	r16, 0x1D	; 29
     340:	0e 08       	sbc	r0, r14
     342:	52 10       	cpse	r5, r2
     344:	de 84       	ldd	r13, Y+14	; 0x0e
     346:	19 83       	std	Y+1, r17	; 0x01
     348:	12 3a       	cpi	r17, 0xA2	; 162
     34a:	0e 4b       	sbci	r16, 0xBE	; 190
     34c:	54 4b       	sbci	r21, 0xB4	; 180
     34e:	b2 24       	eor	r11, r2
     350:	14 03       	mulsu	r17, r20
     352:	53 0f       	add	r21, r19
     354:	de 84       	ldd	r13, Y+14	; 0x0e
     356:	39 43       	sbci	r19, 0x39	; 57
     358:	12 aa       	std	Z+50, r1	; 0x32
     35a:	71 2c       	mov	r7, r1
     35c:	57 c5       	rjmp	.+2734   	; 0xe0c <u8g2_UpdateRefHeight+0x3e>
     35e:	64 48       	sbci	r22, 0x84	; 132
     360:	00 54       	subi	r16, 0x40	; 64
     362:	0a df       	rcall	.-492    	; 0x178 <__trampolines_end+0xcc>
     364:	84 19       	sub	r24, r4
     366:	87 2c       	mov	r8, r7
     368:	ee df       	rcall	.-36     	; 0x346 <__trampolines_end+0x29a>
     36a:	00 55       	subi	r16, 0x50	; 80
     36c:	0b de       	rcall	.-1002   	; 0xffffff84 <__eeprom_end+0xff7eff84>
     36e:	84 19       	sub	r24, r4
     370:	a1 ff       	sbrs	r26, 1
     372:	98 0c       	add	r9, r8
     374:	09 00       	.word	0x0009	; ????
     376:	56 11       	cpse	r21, r6
     378:	df 84       	ldd	r13, Y+15	; 0x0f
     37a:	19 a9       	ldd	r17, Y+49	; 0x31
     37c:	35 c9       	rjmp	.-3478   	; 0xfffff5e8 <__eeprom_end+0xff7ef5e8>
     37e:	a2 2c       	mov	r10, r2
     380:	ca 2a       	or	r12, r26
     382:	61 92       	st	Z+, r6
     384:	c6 35       	cpi	r28, 0x56	; 86
     386:	00 57       	subi	r16, 0x70	; 112
     388:	13 df       	rcall	.-474    	; 0x1b0 <__trampolines_end+0x104>
     38a:	84 19       	sub	r24, r4
     38c:	a9 53       	subi	r26, 0x39	; 57
     38e:	24 45       	sbci	r18, 0x54	; 84
     390:	52 a4       	ldd	r5, Z+42	; 0x2a
     392:	54 94       	.word	0x9454	; ????
     394:	6e 51       	subi	r22, 0x1E	; 30
     396:	16 65       	ori	r17, 0x56	; 86
     398:	09 00       	.word	0x0009	; ????
     39a:	58 0f       	add	r21, r24
     39c:	de 84       	ldd	r13, Y+14	; 0x0e
     39e:	19 a1       	ldd	r17, Y+33	; 0x21
     3a0:	98 44       	sbci	r25, 0x48	; 72
     3a2:	6d a2       	std	Y+37, r6	; 0x25
     3a4:	2d 6a       	ori	r18, 0xAD	; 173
     3a6:	09 c5       	rjmp	.+2578   	; 0xdba <u8g2_DrawStr>
     3a8:	00 59       	subi	r16, 0x90	; 144
     3aa:	0f df       	rcall	.-482    	; 0x1ca <__trampolines_end+0x11e>
     3ac:	84 19       	sub	r24, r4
     3ae:	a9 9a       	sbi	0x15, 1	; 21
     3b0:	64 51       	subi	r22, 0x14	; 20
     3b2:	56 09       	sbc	r21, r6
     3b4:	93 34       	cpi	r25, 0x43	; 67
     3b6:	ee 06       	cpc	r14, r30
     3b8:	5a 0d       	add	r21, r10
     3ba:	de 84       	ldd	r13, Y+14	; 0x0e
     3bc:	19 d7       	rcall	.+3634   	; 0x11f0 <u8g2_SetupBuffer+0x22>
     3be:	30 0d       	add	r19, r0
     3c0:	ab 61       	ori	r26, 0x1B	; 27
     3c2:	35 1d       	adc	r19, r5
     3c4:	06 5b       	subi	r16, 0xB6	; 182
     3c6:	0a 6c       	ori	r16, 0xCA	; 202
     3c8:	7d 19       	sub	r23, r13
     3ca:	83 d6       	rcall	.+3334   	; 0x10d2 <u8g2_update_dimension_common+0x2c>
     3cc:	7f 1b       	sub	r23, r31
     3ce:	02 5c       	subi	r16, 0xC2	; 194
     3d0:	13 ef       	ldi	r17, 0xF3	; 243
     3d2:	7c 19       	sub	r23, r12
     3d4:	39 10       	cpse	r3, r9
     3d6:	e7 40       	sbci	r30, 0x07	; 7
     3d8:	9c 03       	fmulsu	r17, r20
     3da:	71 0e       	add	r7, r17
     3dc:	c4 39       	cpi	r28, 0x94	; 148
     3de:	10 e7       	ldi	r17, 0x70	; 112
     3e0:	40 1c       	adc	r4, r0
     3e2:	5d 0a       	sbc	r5, r29
     3e4:	6c 7d       	andi	r22, 0xDC	; 220
     3e6:	19 43       	sbci	r17, 0x39	; 57
     3e8:	d6 7f       	andi	r29, 0xF6	; 246
     3ea:	1b 04       	cpc	r1, r11
     3ec:	5e 0a       	sbc	r5, r30
     3ee:	a7 c4       	rjmp	.+2382   	; 0xd3e <u8g2_draw_string+0x18>
     3f0:	79 69       	ori	r23, 0x99	; 153
     3f2:	92 55       	subi	r25, 0x52	; 82
     3f4:	d2 00       	.word	0x00d2	; ????
     3f6:	5f 07       	cpc	r21, r31
     3f8:	8f 84       	ldd	r8, Y+15	; 0x0f
     3fa:	19 87       	std	Y+9, r17	; 0x09
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	08 a3       	std	Y+32, r16	; 0x20
     400:	c5 19       	sub	r28, r5
     402:	8a 94       	dec	r8
     404:	05 61       	ori	r16, 0x15	; 21
     406:	0d c6       	rjmp	.+3098   	; 0x1022 <u8g2_ll_hvline_vertical_top_lsb+0x42>
     408:	84 39       	cpi	r24, 0x94	; 148
     40a:	43 9c       	mul	r4, r3
     40c:	26 c3       	rjmp	.+1612   	; 0xa5a <u8g2_font_decode_glyph+0x50>
     40e:	68 53       	subi	r22, 0x38	; 56
     410:	96 00       	.word	0x0096	; ????
     412:	62 0d       	add	r22, r2
     414:	de 84       	ldd	r13, Y+14	; 0x0e
     416:	19 69       	ori	r17, 0x99	; 153
     418:	cb a2       	std	Y+35, r12	; 0x23
     41a:	89 8e       	std	Y+25, r8	; 0x19
     41c:	9b b2       	in	r9, 0x1b	; 27
     41e:	00 63       	ori	r16, 0x30	; 48
     420:	0b c6       	rjmp	.+3094   	; 0x1038 <u8g2_ll_hvline_vertical_top_lsb+0x58>
     422:	84 59       	subi	r24, 0x94	; 148
     424:	53 a6       	std	Z+43, r5	; 0x2b
     426:	36 67       	ori	r19, 0x76	; 118
     428:	d1 02       	muls	r29, r17
     42a:	64 0c       	add	r6, r4
     42c:	de 84       	ldd	r13, Y+14	; 0x0e
     42e:	b9 2d       	mov	r27, r9
     430:	8b 36       	cpi	r24, 0x6B	; 107
     432:	7a 53       	subi	r23, 0x3A	; 58
     434:	96 00       	.word	0x0096	; ????
     436:	65 0d       	add	r22, r5
     438:	c6 84       	ldd	r12, Z+14	; 0x0e
     43a:	59 53       	subi	r21, 0x39	; 57
     43c:	26 0e       	add	r2, r22
     43e:	83 1a       	sub	r8, r19
     440:	67 d1       	rcall	.+718    	; 0x710 <u8g2_font_get_word+0x16>
     442:	02 66       	ori	r16, 0x62	; 98
     444:	0c de       	rcall	.-1000   	; 0x5e <__SREG__+0x1f>
     446:	84 79       	andi	r24, 0x94	; 148
     448:	53 5a       	subi	r21, 0xA3	; 163
     44a:	1b a6       	std	Y+43, r1	; 0x2b
     44c:	b4 37       	cpi	r27, 0x74	; 116
     44e:	00 67       	ori	r16, 0x70	; 112
     450:	13 de       	rcall	.-986    	; 0x78 <__SREG__+0x39>
     452:	6c 39       	cpi	r22, 0x9C	; 156
     454:	8b 96       	adiw	r24, 0x2b	; 43
     456:	64 49       	sbci	r22, 0x94	; 148
     458:	96 64       	ori	r25, 0x46	; 70
     45a:	d1 14       	cp	r13, r1
     45c:	0f 49       	sbci	r16, 0x9F	; 159
     45e:	28 26       	eor	r2, r24
     460:	43 02       	muls	r20, r19
     462:	68 0b       	sbc	r22, r24
     464:	de 84       	ldd	r13, Y+14	; 0x0e
     466:	19 69       	ori	r17, 0x99	; 153
     468:	cb a2       	std	Y+35, r12	; 0x23
     46a:	89 3e       	cpi	r24, 0xE9	; 233
     46c:	06 69       	ori	r16, 0x96	; 150
     46e:	0b 65       	ori	r16, 0x5B	; 91
     470:	85 59       	subi	r24, 0x95	; 149
     472:	61 0e       	add	r6, r17
     474:	8b 7d       	andi	r24, 0xDB	; 219
     476:	1a 04       	cpc	r1, r10
     478:	6a 0d       	add	r22, r10
     47a:	fd 6c       	ori	r31, 0xCD	; 205
     47c:	99 75       	andi	r25, 0x59	; 89
     47e:	74 ec       	ldi	r23, 0xC4	; 196
     480:	a3 a6       	std	Z+43, r10	; 0x2b
     482:	25 0b       	sbc	r18, r21
     484:	00 6b       	ori	r16, 0xB0	; 176
     486:	0f de       	rcall	.-994    	; 0xa6 <__SREG__+0x67>
     488:	84 19       	sub	r24, r4
     48a:	69 a3       	std	Y+33, r22	; 0x21
     48c:	96 44       	sbci	r25, 0x46	; 70
     48e:	95 6c       	ori	r25, 0xC5	; 197
     490:	8b 6a       	ori	r24, 0xAB	; 171
     492:	49 18       	sub	r4, r9
     494:	6c 09       	sbc	r22, r12
     496:	5d 85       	ldd	r21, Y+13	; 0x0d
     498:	39 62       	ori	r19, 0x29	; 41
     49a:	ff 34       	cpi	r31, 0x4F	; 79
     49c:	08 6d       	ori	r16, 0xD8	; 216
     49e:	11 c7       	rjmp	.+3618   	; 0x12c2 <u8x8_byte_set_ks0108_cs+0x30>
     4a0:	84 19       	sub	r24, r4
     4a2:	8b 12       	cpse	r8, r27
     4a4:	45 52       	subi	r20, 0x25	; 37
     4a6:	24 45       	sbci	r18, 0x54	; 84
     4a8:	52 24       	eor	r5, r2
     4aa:	45 52       	subi	r20, 0x25	; 37
     4ac:	24 15       	cp	r18, r4
     4ae:	6e 0a       	sbc	r6, r30
     4b0:	c6 84       	ldd	r12, Z+14	; 0x0e
     4b2:	19 c9       	rjmp	.-3534   	; 0xfffff6e6 <__eeprom_end+0xff7ef6e6>
     4b4:	a2 89       	ldd	r26, Z+18	; 0x12
     4b6:	3e 06       	cpc	r3, r30
     4b8:	6f 0c       	add	r6, r15
     4ba:	c6 84       	ldd	r12, Z+14	; 0x0e
     4bc:	39 43       	sbci	r19, 0x39	; 57
     4be:	12 fa       	bst	r1, 2
     4c0:	98 0c       	add	r9, r8
     4c2:	09 00       	.word	0x0009	; ????
     4c4:	70 0e       	add	r7, r16
     4c6:	de 6c       	ori	r29, 0xCE	; 206
     4c8:	19 c9       	rjmp	.-3534   	; 0xfffff6fc <__eeprom_end+0xff7ef6fc>
     4ca:	a2 89       	ldd	r26, Z+18	; 0x12
     4cc:	8e 9b       	sbis	0x11, 6	; 17
     4ce:	b2 a4       	ldd	r11, Z+42	; 0x2a
     4d0:	55 00       	.word	0x0055	; ????
     4d2:	71 0c       	add	r7, r1
     4d4:	de 6c       	ori	r29, 0xCE	; 206
     4d6:	39 8b       	std	Y+17, r19	; 0x11
     4d8:	36 7a       	andi	r19, 0xA6	; 166
     4da:	53 96       	adiw	r26, 0x13	; 19
     4dc:	b4 01       	movw	r22, r8
     4de:	72 0b       	sbc	r23, r18
     4e0:	c6 84       	ldd	r12, Z+14	; 0x0e
     4e2:	19 ca       	rjmp	.-3022   	; 0xfffff916 <__eeprom_end+0xff7ef916>
     4e4:	22 25       	eor	r18, r2
     4e6:	69 8f       	std	Y+25, r22	; 0x19
     4e8:	00 73       	andi	r16, 0x30	; 48
     4ea:	0c c6       	rjmp	.+3096   	; 0x1104 <u8g2_update_dimension_common+0x5e>
     4ec:	84 39       	cpi	r24, 0x94	; 148
     4ee:	43 12       	cpse	r4, r19
     4f0:	ca 8e       	std	Y+26, r12	; 0x1a
     4f2:	c9 90       	ld	r12, Y+
     4f4:	00 74       	andi	r16, 0x40	; 64
     4f6:	0c d6       	rcall	.+3096   	; 0x1110 <u8g2_update_dimension_common+0x6a>
     4f8:	84 59       	subi	r24, 0x94	; 148
     4fa:	69 36       	cpi	r22, 0x69	; 105
     4fc:	68 69       	ori	r22, 0x98	; 152
     4fe:	4f 99       	sbic	0x09, 7	; 9
     500:	02 75       	andi	r16, 0x52	; 82
     502:	09 c6       	rjmp	.+3090   	; 0x1116 <u8g2_update_dimension_common+0x70>
     504:	84 19       	sub	r24, r4
     506:	a1 df       	rcall	.-190    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     508:	94 25       	eor	r25, r4
     50a:	76 0f       	add	r23, r22
     50c:	c7 84       	ldd	r12, Z+15	; 0x0f
     50e:	19 a9       	ldd	r17, Y+49	; 0x31
     510:	9a 64       	ori	r25, 0x4A	; 74
     512:	51 56       	subi	r21, 0x61	; 97
     514:	09 93       	st	Y+, r16
     516:	34 ce       	rjmp	.-920    	; 0x180 <__trampolines_end+0xd4>
     518:	00 77       	andi	r16, 0x70	; 112
     51a:	0f c7       	rjmp	.+3614   	; 0x133a <u8x8_byte_ks0108+0x70>
     51c:	84 19       	sub	r24, r4
     51e:	a9 29       	or	r26, r9
     520:	92 22       	and	r9, r18
     522:	a9 62       	ori	r26, 0x29	; 41
     524:	ca a2       	std	Y+34, r12	; 0x22
     526:	2c 01       	movw	r4, r24
     528:	78 0e       	add	r7, r24
     52a:	c6 84       	ldd	r12, Z+14	; 0x0e
     52c:	19 a1       	ldd	r17, Y+33	; 0x21
     52e:	98 44       	sbci	r25, 0x48	; 72
     530:	99 a8       	ldd	r9, Y+49	; 0x31
     532:	45 49       	sbci	r20, 0x95	; 149
     534:	28 06       	cpc	r2, r24
     536:	79 10       	cpse	r7, r9
     538:	de 6c       	ori	r29, 0xCE	; 206
     53a:	19 a1       	ldd	r17, Y+33	; 0x21
     53c:	31 89       	ldd	r19, Z+17	; 0x11
     53e:	da 92       	st	-Y, r13
     540:	4c 0d       	add	r20, r12
     542:	b3 24       	eor	r11, r3
     544:	0c 01       	movw	r0, r24
     546:	7a 09       	sbc	r23, r10
     548:	c6 84       	ldd	r12, Z+14	; 0x0e
     54a:	19 d7       	rcall	.+3634   	; 0x137e <u8x8_byte_ks0108+0xb4>
     54c:	b0 d7       	rcall	.+3936   	; 0x14ae <u8x8_cad_SendSequence+0x92>
     54e:	61 7b       	andi	r22, 0xB1	; 177
     550:	0c 6d       	ori	r16, 0xDC	; 220
     552:	7d 79       	andi	r23, 0x9D	; 157
     554:	52 d8       	rcall	.-3932   	; 0xfffff5fa <__eeprom_end+0xff7ef5fa>
     556:	96 89       	ldd	r25, Z+22	; 0x16
     558:	69 d8       	rcall	.-3886   	; 0xfffff62c <__eeprom_end+0xff7ef62c>
     55a:	2a 7c       	andi	r18, 0xCA	; 202
     55c:	07 69       	ori	r16, 0x97	; 151
     55e:	7e 19       	sub	r23, r14
     560:	1f 02       	muls	r17, r31
     562:	7d 0c       	add	r7, r13
     564:	6d 7d       	andi	r22, 0xDD	; 221
     566:	19 6a       	ori	r17, 0xA9	; 169
     568:	d8 1a       	sub	r13, r24
     56a:	6a c5       	rjmp	.+2772   	; 0x1040 <u8g2_ll_hvline_vertical_top_lsb+0x60>
     56c:	26 0d       	add	r18, r6
     56e:	7e 09       	sbc	r23, r14
     570:	9e c4       	rjmp	.+2364   	; 0xeae <u8g2_DrawHVLine+0xa>
     572:	39 92       	st	Y+, r3
     574:	62 52       	subi	r22, 0x22	; 34
     576:	00 00       	nop
     578:	00 00       	nop
     57a:	04 ff       	sbrs	r16, 4
     57c:	ff 00       	.word	0x00ff	; ????
	...

00000580 <__ctors_end>:
     580:	11 24       	eor	r1, r1
     582:	1f be       	out	0x3f, r1	; 63
     584:	cf e5       	ldi	r28, 0x5F	; 95
     586:	d8 e0       	ldi	r29, 0x08	; 8
     588:	de bf       	out	0x3e, r29	; 62
     58a:	cd bf       	out	0x3d, r28	; 61

0000058c <__do_copy_data>:
     58c:	10 e0       	ldi	r17, 0x00	; 0
     58e:	a0 e6       	ldi	r26, 0x60	; 96
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	ec e5       	ldi	r30, 0x5C	; 92
     594:	f2 e2       	ldi	r31, 0x22	; 34
     596:	02 c0       	rjmp	.+4      	; 0x59c <__do_copy_data+0x10>
     598:	05 90       	lpm	r0, Z+
     59a:	0d 92       	st	X+, r0
     59c:	ac 39       	cpi	r26, 0x9C	; 156
     59e:	b1 07       	cpc	r27, r17
     5a0:	d9 f7       	brne	.-10     	; 0x598 <__do_copy_data+0xc>

000005a2 <__do_clear_bss>:
     5a2:	25 e0       	ldi	r18, 0x05	; 5
     5a4:	ac e9       	ldi	r26, 0x9C	; 156
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	01 c0       	rjmp	.+2      	; 0x5ac <.do_clear_bss_start>

000005aa <.do_clear_bss_loop>:
     5aa:	1d 92       	st	X+, r1

000005ac <.do_clear_bss_start>:
     5ac:	a1 30       	cpi	r26, 0x01	; 1
     5ae:	b2 07       	cpc	r27, r18
     5b0:	e1 f7       	brne	.-8      	; 0x5aa <.do_clear_bss_loop>
     5b2:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <main>
     5b6:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <_exit>

000005ba <__bad_interrupt>:
     5ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005be <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
     5be:	af 92       	push	r10
     5c0:	bf 92       	push	r11
     5c2:	cf 92       	push	r12
     5c4:	df 92       	push	r13
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	7c 01       	movw	r14, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
     5d4:	dc 01       	movw	r26, r24
     5d6:	94 96       	adiw	r26, 0x24	; 36
     5d8:	bc 90       	ld	r11, X
     5da:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
     5dc:	95 96       	adiw	r26, 0x25	; 37
     5de:	dc 91       	ld	r29, X
     5e0:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     5e2:	ed 91       	ld	r30, X+
     5e4:	fc 91       	ld	r31, X
     5e6:	a1 88       	ldd	r10, Z+17	; 0x11
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
     5e8:	cd 2f       	mov	r28, r29
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     5ea:	c1 2c       	mov	r12, r1
     5ec:	d1 2c       	mov	r13, r1
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     5ee:	d7 01       	movw	r26, r14
     5f0:	ed 91       	ld	r30, X+
     5f2:	fc 91       	ld	r31, X
     5f4:	11 97       	sbiw	r26, 0x01	; 1
     5f6:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
     5f8:	92 96       	adiw	r26, 0x22	; 34
     5fa:	0d 91       	ld	r16, X+
     5fc:	1c 91       	ld	r17, X
     5fe:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     600:	42 2f       	mov	r20, r18
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	44 0f       	add	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	44 0f       	add	r20, r20
     60a:	55 1f       	adc	r21, r21
     60c:	44 0f       	add	r20, r20
     60e:	55 1f       	adc	r21, r21
     610:	4c 9d       	mul	r20, r12
     612:	c0 01       	movw	r24, r0
     614:	4d 9d       	mul	r20, r13
     616:	90 0d       	add	r25, r0
     618:	5c 9d       	mul	r21, r12
     61a:	90 0d       	add	r25, r0
     61c:	11 24       	eor	r1, r1
     61e:	08 0f       	add	r16, r24
     620:	19 1f       	adc	r17, r25
     622:	4c 2f       	mov	r20, r28
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	c7 01       	movw	r24, r14
     628:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <u8x8_DrawTile>
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
     62c:	cf 5f       	subi	r28, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
     62e:	8c 2f       	mov	r24, r28
     630:	8d 1b       	sub	r24, r29
     632:	8b 15       	cp	r24, r11
     634:	28 f4       	brcc	.+10     	; 0x640 <u8g2_send_buffer+0x82>
     636:	bf ef       	ldi	r27, 0xFF	; 255
     638:	cb 1a       	sub	r12, r27
     63a:	db 0a       	sbc	r13, r27
     63c:	ca 15       	cp	r28, r10
     63e:	b8 f2       	brcs	.-82     	; 0x5ee <u8g2_send_buffer+0x30>
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	df 90       	pop	r13
     64e:	cf 90       	pop	r12
     650:	bf 90       	pop	r11
     652:	af 90       	pop	r10
     654:	08 95       	ret

00000656 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
     656:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     658:	a0 81       	ld	r26, Z
     65a:	b1 81       	ldd	r27, Z+1	; 0x01
     65c:	50 96       	adiw	r26, 0x10	; 16
     65e:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
     660:	44 a1       	ldd	r20, Z+36	; 0x24
     662:	94 9f       	mul	r25, r20
     664:	a0 01       	movw	r20, r0
     666:	11 24       	eor	r1, r1
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
     668:	44 0f       	add	r20, r20
     66a:	55 1f       	adc	r21, r21
     66c:	44 0f       	add	r20, r20
     66e:	55 1f       	adc	r21, r21
     670:	44 0f       	add	r20, r20
     672:	55 1f       	adc	r21, r21
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	82 a1       	ldd	r24, Z+34	; 0x22
     67a:	93 a1       	ldd	r25, Z+35	; 0x23
     67c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <memset>
     680:	08 95       	ret

00000682 <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
     688:	0e 94 df 02 	call	0x5be	; 0x5be <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
     68c:	ce 01       	movw	r24, r28
     68e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <u8x8_RefreshDisplay>
}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
     698:	28 e0       	ldi	r18, 0x08	; 8
     69a:	fc 01       	movw	r30, r24
     69c:	20 83       	st	Z, r18
  return buf;
  #endif
}
     69e:	8c e9       	ldi	r24, 0x9C	; 156
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	08 95       	ret

000006a4 <u8g2_Setup_ks0108_128x64_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ks0108 f */
void u8g2_Setup_ks0108_128x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
     6a4:	cf 92       	push	r12
     6a6:	df 92       	push	r13
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	1f 92       	push	r1
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	7c 01       	movw	r14, r24
     6bc:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ks0108_128x64, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
     6be:	89 01       	movw	r16, r18
     6c0:	9a 01       	movw	r18, r20
     6c2:	41 e6       	ldi	r20, 0x61	; 97
     6c4:	5a e0       	ldi	r21, 0x0A	; 10
     6c6:	66 e7       	ldi	r22, 0x76	; 118
     6c8:	7b e0       	ldi	r23, 0x0B	; 11
     6ca:	0e 94 bc 0c 	call	0x1978	; 0x1978 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
     6ce:	ce 01       	movw	r24, r28
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	0e 94 4c 03 	call	0x698	; 0x698 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
     6d6:	86 01       	movw	r16, r12
     6d8:	20 ef       	ldi	r18, 0xF0	; 240
     6da:	37 e0       	ldi	r19, 0x07	; 7
     6dc:	49 81       	ldd	r20, Y+1	; 0x01
     6de:	bc 01       	movw	r22, r24
     6e0:	c7 01       	movw	r24, r14
     6e2:	0e 94 e7 08 	call	0x11ce	; 0x11ce <u8g2_SetupBuffer>
}
     6e6:	0f 90       	pop	r0
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	df 90       	pop	r13
     6f6:	cf 90       	pop	r12
     6f8:	08 95       	ret

000006fa <u8g2_font_get_word>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
     6fa:	fc 01       	movw	r30, r24
     6fc:	e6 0f       	add	r30, r22
     6fe:	f1 1d       	adc	r31, r1
     700:	84 91       	lpm	r24, Z
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	98 2f       	mov	r25, r24
     706:	88 27       	eor	r24, r24
     708:	31 96       	adiw	r30, 0x01	; 1
     70a:	e4 91       	lpm	r30, Z
     70c:	8e 0f       	add	r24, r30
     70e:	91 1d       	adc	r25, r1
     710:	08 95       	ret

00000712 <u8g2_font_calc_vref_font>:
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	08 95       	ret

00000716 <u8g2_read_font_info>:
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	ec 01       	movw	r28, r24
     720:	8b 01       	movw	r16, r22
     722:	fb 01       	movw	r30, r22
     724:	84 91       	lpm	r24, Z
     726:	88 83       	st	Y, r24
     728:	31 96       	adiw	r30, 0x01	; 1
     72a:	e4 91       	lpm	r30, Z
     72c:	e9 83       	std	Y+1, r30	; 0x01
     72e:	fb 01       	movw	r30, r22
     730:	32 96       	adiw	r30, 0x02	; 2
     732:	e4 91       	lpm	r30, Z
     734:	ea 83       	std	Y+2, r30	; 0x02
     736:	fb 01       	movw	r30, r22
     738:	33 96       	adiw	r30, 0x03	; 3
     73a:	e4 91       	lpm	r30, Z
     73c:	eb 83       	std	Y+3, r30	; 0x03
     73e:	fb 01       	movw	r30, r22
     740:	34 96       	adiw	r30, 0x04	; 4
     742:	e4 91       	lpm	r30, Z
     744:	ec 83       	std	Y+4, r30	; 0x04
     746:	fb 01       	movw	r30, r22
     748:	35 96       	adiw	r30, 0x05	; 5
     74a:	e4 91       	lpm	r30, Z
     74c:	ed 83       	std	Y+5, r30	; 0x05
     74e:	fb 01       	movw	r30, r22
     750:	36 96       	adiw	r30, 0x06	; 6
     752:	e4 91       	lpm	r30, Z
     754:	ee 83       	std	Y+6, r30	; 0x06
     756:	fb 01       	movw	r30, r22
     758:	37 96       	adiw	r30, 0x07	; 7
     75a:	e4 91       	lpm	r30, Z
     75c:	ef 83       	std	Y+7, r30	; 0x07
     75e:	fb 01       	movw	r30, r22
     760:	38 96       	adiw	r30, 0x08	; 8
     762:	e4 91       	lpm	r30, Z
     764:	e8 87       	std	Y+8, r30	; 0x08
     766:	fb 01       	movw	r30, r22
     768:	39 96       	adiw	r30, 0x09	; 9
     76a:	e4 91       	lpm	r30, Z
     76c:	e9 87       	std	Y+9, r30	; 0x09
     76e:	fb 01       	movw	r30, r22
     770:	3a 96       	adiw	r30, 0x0a	; 10
     772:	e4 91       	lpm	r30, Z
     774:	ea 87       	std	Y+10, r30	; 0x0a
     776:	fb 01       	movw	r30, r22
     778:	3b 96       	adiw	r30, 0x0b	; 11
     77a:	e4 91       	lpm	r30, Z
     77c:	eb 87       	std	Y+11, r30	; 0x0b
     77e:	fb 01       	movw	r30, r22
     780:	3c 96       	adiw	r30, 0x0c	; 12
     782:	e4 91       	lpm	r30, Z
     784:	ec 87       	std	Y+12, r30	; 0x0c
     786:	fb 01       	movw	r30, r22
     788:	3d 96       	adiw	r30, 0x0d	; 13
     78a:	e4 91       	lpm	r30, Z
     78c:	ed 87       	std	Y+13, r30	; 0x0d
     78e:	fb 01       	movw	r30, r22
     790:	3e 96       	adiw	r30, 0x0e	; 14
     792:	e4 91       	lpm	r30, Z
     794:	ee 87       	std	Y+14, r30	; 0x0e
     796:	fb 01       	movw	r30, r22
     798:	3f 96       	adiw	r30, 0x0f	; 15
     79a:	e4 91       	lpm	r30, Z
     79c:	ef 87       	std	Y+15, r30	; 0x0f
     79e:	fb 01       	movw	r30, r22
     7a0:	70 96       	adiw	r30, 0x10	; 16
     7a2:	e4 91       	lpm	r30, Z
     7a4:	e8 8b       	std	Y+16, r30	; 0x10
     7a6:	61 e1       	ldi	r22, 0x11	; 17
     7a8:	c8 01       	movw	r24, r16
     7aa:	0e 94 7d 03 	call	0x6fa	; 0x6fa <u8g2_font_get_word>
     7ae:	9a 8b       	std	Y+18, r25	; 0x12
     7b0:	89 8b       	std	Y+17, r24	; 0x11
     7b2:	63 e1       	ldi	r22, 0x13	; 19
     7b4:	c8 01       	movw	r24, r16
     7b6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <u8g2_font_get_word>
     7ba:	9c 8b       	std	Y+20, r25	; 0x14
     7bc:	8b 8b       	std	Y+19, r24	; 0x13
     7be:	65 e1       	ldi	r22, 0x15	; 21
     7c0:	c8 01       	movw	r24, r16
     7c2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <u8g2_font_get_word>
     7c6:	9e 8b       	std	Y+22, r25	; 0x16
     7c8:	8d 8b       	std	Y+21, r24	; 0x15
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	08 95       	ret

000007d4 <u8g2_font_decode_get_unsigned_bits>:
     7d4:	dc 01       	movw	r26, r24
     7d6:	18 96       	adiw	r26, 0x08	; 8
     7d8:	9c 91       	ld	r25, X
     7da:	18 97       	sbiw	r26, 0x08	; 8
     7dc:	ed 91       	ld	r30, X+
     7de:	fc 91       	ld	r31, X
     7e0:	11 97       	sbiw	r26, 0x01	; 1
     7e2:	24 91       	lpm	r18, Z
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	09 2e       	mov	r0, r25
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <u8g2_font_decode_get_unsigned_bits+0x1a>
     7ea:	35 95       	asr	r19
     7ec:	27 95       	ror	r18
     7ee:	0a 94       	dec	r0
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <u8g2_font_decode_get_unsigned_bits+0x16>
     7f2:	89 2f       	mov	r24, r25
     7f4:	86 0f       	add	r24, r22
     7f6:	88 30       	cpi	r24, 0x08	; 8
     7f8:	10 f4       	brcc	.+4      	; 0x7fe <u8g2_font_decode_get_unsigned_bits+0x2a>
     7fa:	e2 2f       	mov	r30, r18
     7fc:	0f c0       	rjmp	.+30     	; 0x81c <u8g2_font_decode_get_unsigned_bits+0x48>
     7fe:	31 96       	adiw	r30, 0x01	; 1
     800:	11 96       	adiw	r26, 0x01	; 1
     802:	fc 93       	st	X, r31
     804:	ee 93       	st	-X, r30
     806:	e4 91       	lpm	r30, Z
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	38 e0       	ldi	r19, 0x08	; 8
     80c:	39 1b       	sub	r19, r25
     80e:	02 c0       	rjmp	.+4      	; 0x814 <u8g2_font_decode_get_unsigned_bits+0x40>
     810:	ee 0f       	add	r30, r30
     812:	ff 1f       	adc	r31, r31
     814:	3a 95       	dec	r19
     816:	e2 f7       	brpl	.-8      	; 0x810 <u8g2_font_decode_get_unsigned_bits+0x3c>
     818:	e2 2b       	or	r30, r18
     81a:	88 50       	subi	r24, 0x08	; 8
     81c:	18 96       	adiw	r26, 0x08	; 8
     81e:	8c 93       	st	X, r24
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	02 c0       	rjmp	.+4      	; 0x82a <u8g2_font_decode_get_unsigned_bits+0x56>
     826:	88 0f       	add	r24, r24
     828:	99 1f       	adc	r25, r25
     82a:	6a 95       	dec	r22
     82c:	e2 f7       	brpl	.-8      	; 0x826 <u8g2_font_decode_get_unsigned_bits+0x52>
     82e:	81 50       	subi	r24, 0x01	; 1
     830:	8e 23       	and	r24, r30
     832:	08 95       	ret

00000834 <u8g2_font_setup_decode>:
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	ec 01       	movw	r28, r24
     83e:	8c 01       	movw	r16, r24
     840:	07 5c       	subi	r16, 0xC7	; 199
     842:	1f 4f       	sbci	r17, 0xFF	; 255
     844:	7a af       	std	Y+58, r23	; 0x3a
     846:	69 af       	std	Y+57, r22	; 0x39
     848:	fc 01       	movw	r30, r24
     84a:	ef 5b       	subi	r30, 0xBF	; 191
     84c:	ff 4f       	sbci	r31, 0xFF	; 255
     84e:	10 82       	st	Z, r1
     850:	39 96       	adiw	r30, 0x09	; 9
     852:	60 81       	ld	r22, Z
     854:	c8 01       	movw	r24, r16
     856:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <u8g2_font_decode_get_unsigned_bits>
     85a:	8f af       	std	Y+63, r24	; 0x3f
     85c:	fe 01       	movw	r30, r28
     85e:	e5 5b       	subi	r30, 0xB5	; 181
     860:	ff 4f       	sbci	r31, 0xFF	; 255
     862:	60 81       	ld	r22, Z
     864:	c8 01       	movw	r24, r16
     866:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <u8g2_font_decode_get_unsigned_bits>
     86a:	fe 01       	movw	r30, r28
     86c:	e0 5c       	subi	r30, 0xC0	; 192
     86e:	ff 4f       	sbci	r31, 0xFF	; 255
     870:	80 83       	st	Z, r24
     872:	b3 96       	adiw	r30, 0x23	; 35
     874:	80 81       	ld	r24, Z
     876:	b0 97       	sbiw	r30, 0x20	; 32
     878:	80 83       	st	Z, r24
     87a:	cc 5b       	subi	r28, 0xBC	; 188
     87c:	df 4f       	sbci	r29, 0xFF	; 255
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	81 11       	cpse	r24, r1
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	98 83       	st	Y, r25
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	08 95       	ret

00000890 <u8g2_font_decode_get_signed_bits>:
     890:	cf 93       	push	r28
     892:	c6 2f       	mov	r28, r22
     894:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <u8g2_font_decode_get_unsigned_bits>
     898:	c1 50       	subi	r28, 0x01	; 1
     89a:	21 e0       	ldi	r18, 0x01	; 1
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <u8g2_font_decode_get_signed_bits+0x14>
     8a0:	22 0f       	add	r18, r18
     8a2:	33 1f       	adc	r19, r19
     8a4:	ca 95       	dec	r28
     8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <u8g2_font_decode_get_signed_bits+0x10>
     8a8:	82 1b       	sub	r24, r18
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <u8g2_add_vector_y>:
     8ae:	21 30       	cpi	r18, 0x01	; 1
     8b0:	31 f0       	breq	.+12     	; 0x8be <u8g2_add_vector_y+0x10>
     8b2:	18 f0       	brcs	.+6      	; 0x8ba <u8g2_add_vector_y+0xc>
     8b4:	22 30       	cpi	r18, 0x02	; 2
     8b6:	29 f0       	breq	.+10     	; 0x8c2 <u8g2_add_vector_y+0x14>
     8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <u8g2_add_vector_y+0x18>
     8ba:	84 0f       	add	r24, r20
     8bc:	08 95       	ret
     8be:	86 0f       	add	r24, r22
     8c0:	08 95       	ret
     8c2:	84 1b       	sub	r24, r20
     8c4:	08 95       	ret
     8c6:	86 1b       	sub	r24, r22
     8c8:	08 95       	ret

000008ca <u8g2_add_vector_x>:
     8ca:	21 30       	cpi	r18, 0x01	; 1
     8cc:	31 f0       	breq	.+12     	; 0x8da <u8g2_add_vector_x+0x10>
     8ce:	18 f0       	brcs	.+6      	; 0x8d6 <u8g2_add_vector_x+0xc>
     8d0:	22 30       	cpi	r18, 0x02	; 2
     8d2:	29 f0       	breq	.+10     	; 0x8de <u8g2_add_vector_x+0x14>
     8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <u8g2_add_vector_x+0x18>
     8d6:	86 0f       	add	r24, r22
     8d8:	08 95       	ret
     8da:	84 1b       	sub	r24, r20
     8dc:	08 95       	ret
     8de:	86 1b       	sub	r24, r22
     8e0:	08 95       	ret
     8e2:	84 0f       	add	r24, r20
     8e4:	08 95       	ret

000008e6 <u8g2_font_decode_len>:
     8e6:	2f 92       	push	r2
     8e8:	3f 92       	push	r3
     8ea:	4f 92       	push	r4
     8ec:	5f 92       	push	r5
     8ee:	6f 92       	push	r6
     8f0:	7f 92       	push	r7
     8f2:	8f 92       	push	r8
     8f4:	9f 92       	push	r9
     8f6:	af 92       	push	r10
     8f8:	bf 92       	push	r11
     8fa:	cf 92       	push	r12
     8fc:	df 92       	push	r13
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	00 d0       	rcall	.+0      	; 0x90c <u8g2_font_decode_len+0x26>
     90c:	00 d0       	rcall	.+0      	; 0x90e <u8g2_font_decode_len+0x28>
     90e:	00 d0       	rcall	.+0      	; 0x910 <u8g2_font_decode_len+0x2a>
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	7c 01       	movw	r14, r24
     916:	6e 83       	std	Y+6, r22	; 0x06
     918:	34 2e       	mov	r3, r20
     91a:	fc 01       	movw	r30, r24
     91c:	75 ac       	ldd	r7, Z+61	; 0x3d
     91e:	16 ad       	ldd	r17, Z+62	; 0x3e
     920:	6c 01       	movw	r12, r24
     922:	f5 e4       	ldi	r31, 0x45	; 69
     924:	cf 0e       	add	r12, r31
     926:	d1 1c       	adc	r13, r1
     928:	5c 01       	movw	r10, r24
     92a:	82 e4       	ldi	r24, 0x42	; 66
     92c:	a8 0e       	add	r10, r24
     92e:	b1 1c       	adc	r11, r1
     930:	47 01       	movw	r8, r14
     932:	93 e6       	ldi	r25, 0x63	; 99
     934:	89 0e       	add	r8, r25
     936:	91 1c       	adc	r9, r1
     938:	f7 01       	movw	r30, r14
     93a:	ec 5b       	subi	r30, 0xBC	; 188
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	fc 83       	std	Y+4, r31	; 0x04
     940:	eb 83       	std	Y+3, r30	; 0x03
     942:	c7 01       	movw	r24, r14
     944:	8d 5b       	subi	r24, 0xBD	; 189
     946:	9f 4f       	sbci	r25, 0xFF	; 255
     948:	9a 83       	std	Y+2, r25	; 0x02
     94a:	89 83       	std	Y+1, r24	; 0x01
     94c:	f7 01       	movw	r30, r14
     94e:	f7 ad       	ldd	r31, Z+63	; 0x3f
     950:	f7 19       	sub	r31, r7
     952:	fd 83       	std	Y+5, r31	; 0x05
     954:	5e 80       	ldd	r5, Y+6	; 0x06
     956:	f5 15       	cp	r31, r5
     958:	08 f4       	brcc	.+2      	; 0x95c <u8g2_font_decode_len+0x76>
     95a:	5f 2e       	mov	r5, r31
     95c:	f7 01       	movw	r30, r14
     95e:	64 ac       	ldd	r6, Z+60	; 0x3c
     960:	f6 01       	movw	r30, r12
     962:	00 81       	ld	r16, Z
     964:	21 2e       	mov	r2, r17
     966:	20 2f       	mov	r18, r16
     968:	41 2f       	mov	r20, r17
     96a:	67 2d       	mov	r22, r7
     96c:	f7 01       	movw	r30, r14
     96e:	83 ad       	ldd	r24, Z+59	; 0x3b
     970:	0e 94 65 04 	call	0x8ca	; 0x8ca <u8g2_add_vector_x>
     974:	48 2e       	mov	r4, r24
     976:	20 2f       	mov	r18, r16
     978:	41 2f       	mov	r20, r17
     97a:	67 2d       	mov	r22, r7
     97c:	86 2d       	mov	r24, r6
     97e:	0e 94 57 04 	call	0x8ae	; 0x8ae <u8g2_add_vector_y>
     982:	33 20       	and	r3, r3
     984:	61 f0       	breq	.+24     	; 0x99e <u8g2_font_decode_len+0xb8>
     986:	e9 81       	ldd	r30, Y+1	; 0x01
     988:	fa 81       	ldd	r31, Y+2	; 0x02
     98a:	90 81       	ld	r25, Z
     98c:	f4 01       	movw	r30, r8
     98e:	90 83       	st	Z, r25
     990:	25 2d       	mov	r18, r5
     992:	48 2f       	mov	r20, r24
     994:	64 2d       	mov	r22, r4
     996:	c7 01       	movw	r24, r14
     998:	0e 94 52 07 	call	0xea4	; 0xea4 <u8g2_DrawHVLine>
     99c:	0f c0       	rjmp	.+30     	; 0x9bc <u8g2_font_decode_len+0xd6>
     99e:	f5 01       	movw	r30, r10
     9a0:	90 81       	ld	r25, Z
     9a2:	91 11       	cpse	r25, r1
     9a4:	0b c0       	rjmp	.+22     	; 0x9bc <u8g2_font_decode_len+0xd6>
     9a6:	eb 81       	ldd	r30, Y+3	; 0x03
     9a8:	fc 81       	ldd	r31, Y+4	; 0x04
     9aa:	90 81       	ld	r25, Z
     9ac:	f4 01       	movw	r30, r8
     9ae:	90 83       	st	Z, r25
     9b0:	25 2d       	mov	r18, r5
     9b2:	48 2f       	mov	r20, r24
     9b4:	64 2d       	mov	r22, r4
     9b6:	c7 01       	movw	r24, r14
     9b8:	0e 94 52 07 	call	0xea4	; 0xea4 <u8g2_DrawHVLine>
     9bc:	fe 81       	ldd	r31, Y+6	; 0x06
     9be:	8d 81       	ldd	r24, Y+5	; 0x05
     9c0:	f8 17       	cp	r31, r24
     9c2:	28 f0       	brcs	.+10     	; 0x9ce <u8g2_font_decode_len+0xe8>
     9c4:	f8 1b       	sub	r31, r24
     9c6:	fe 83       	std	Y+6, r31	; 0x06
     9c8:	1f 5f       	subi	r17, 0xFF	; 255
     9ca:	71 2c       	mov	r7, r1
     9cc:	bf cf       	rjmp	.-130    	; 0x94c <u8g2_font_decode_len+0x66>
     9ce:	8e 81       	ldd	r24, Y+6	; 0x06
     9d0:	87 0d       	add	r24, r7
     9d2:	f7 01       	movw	r30, r14
     9d4:	85 af       	std	Z+61, r24	; 0x3d
     9d6:	26 ae       	std	Z+62, r2	; 0x3e
     9d8:	26 96       	adiw	r28, 0x06	; 6
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	cd bf       	out	0x3d, r28	; 61
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	ff 90       	pop	r15
     9ee:	ef 90       	pop	r14
     9f0:	df 90       	pop	r13
     9f2:	cf 90       	pop	r12
     9f4:	bf 90       	pop	r11
     9f6:	af 90       	pop	r10
     9f8:	9f 90       	pop	r9
     9fa:	8f 90       	pop	r8
     9fc:	7f 90       	pop	r7
     9fe:	6f 90       	pop	r6
     a00:	5f 90       	pop	r5
     a02:	4f 90       	pop	r4
     a04:	3f 90       	pop	r3
     a06:	2f 90       	pop	r2
     a08:	08 95       	ret

00000a0a <u8g2_font_decode_glyph>:
     a0a:	8f 92       	push	r8
     a0c:	9f 92       	push	r9
     a0e:	af 92       	push	r10
     a10:	bf 92       	push	r11
     a12:	cf 92       	push	r12
     a14:	df 92       	push	r13
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	ec 01       	movw	r28, r24
     a24:	7c 01       	movw	r14, r24
     a26:	89 e3       	ldi	r24, 0x39	; 57
     a28:	e8 0e       	add	r14, r24
     a2a:	f1 1c       	adc	r15, r1
     a2c:	ce 01       	movw	r24, r28
     a2e:	0e 94 1a 04 	call	0x834	; 0x834 <u8g2_font_setup_decode>
     a32:	fe 01       	movw	r30, r28
     a34:	e0 5c       	subi	r30, 0xC0	; 192
     a36:	ff 4f       	sbci	r31, 0xFF	; 255
     a38:	90 80       	ld	r9, Z
     a3a:	3c 96       	adiw	r30, 0x0c	; 12
     a3c:	60 81       	ld	r22, Z
     a3e:	c7 01       	movw	r24, r14
     a40:	0e 94 48 04 	call	0x890	; 0x890 <u8g2_font_decode_get_signed_bits>
     a44:	b8 2e       	mov	r11, r24
     a46:	fe 01       	movw	r30, r28
     a48:	e3 5b       	subi	r30, 0xB3	; 179
     a4a:	ff 4f       	sbci	r31, 0xFF	; 255
     a4c:	60 81       	ld	r22, Z
     a4e:	c7 01       	movw	r24, r14
     a50:	0e 94 48 04 	call	0x890	; 0x890 <u8g2_font_decode_get_signed_bits>
     a54:	18 2f       	mov	r17, r24
     a56:	fe 01       	movw	r30, r28
     a58:	e2 5b       	subi	r30, 0xB2	; 178
     a5a:	ff 4f       	sbci	r31, 0xFF	; 255
     a5c:	60 81       	ld	r22, Z
     a5e:	c7 01       	movw	r24, r14
     a60:	0e 94 48 04 	call	0x890	; 0x890 <u8g2_font_decode_get_signed_bits>
     a64:	88 2e       	mov	r8, r24
     a66:	df ac       	ldd	r13, Y+63	; 0x3f
     a68:	1d 14       	cp	r1, r13
     a6a:	0c f0       	brlt	.+2      	; 0xa6e <u8g2_font_decode_glyph+0x64>
     a6c:	79 c0       	rjmp	.+242    	; 0xb60 <u8g2_font_decode_glyph+0x156>
     a6e:	fe 01       	movw	r30, r28
     a70:	eb 5b       	subi	r30, 0xBB	; 187
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	00 81       	ld	r16, Z
     a76:	19 0d       	add	r17, r9
     a78:	11 95       	neg	r17
     a7a:	20 2f       	mov	r18, r16
     a7c:	41 2f       	mov	r20, r17
     a7e:	6b 2d       	mov	r22, r11
     a80:	8b ad       	ldd	r24, Y+59	; 0x3b
     a82:	0e 94 65 04 	call	0x8ca	; 0x8ca <u8g2_add_vector_x>
     a86:	c8 2e       	mov	r12, r24
     a88:	8b af       	std	Y+59, r24	; 0x3b
     a8a:	20 2f       	mov	r18, r16
     a8c:	41 2f       	mov	r20, r17
     a8e:	6b 2d       	mov	r22, r11
     a90:	8c ad       	ldd	r24, Y+60	; 0x3c
     a92:	0e 94 57 04 	call	0x8ae	; 0x8ae <u8g2_add_vector_y>
     a96:	8c af       	std	Y+60, r24	; 0x3c
     a98:	01 30       	cpi	r16, 0x01	; 1
     a9a:	59 f0       	breq	.+22     	; 0xab2 <u8g2_font_decode_glyph+0xa8>
     a9c:	28 f0       	brcs	.+10     	; 0xaa8 <u8g2_font_decode_glyph+0x9e>
     a9e:	02 30       	cpi	r16, 0x02	; 2
     aa0:	91 f0       	breq	.+36     	; 0xac6 <u8g2_font_decode_glyph+0xbc>
     aa2:	03 30       	cpi	r16, 0x03	; 3
     aa4:	d9 f0       	breq	.+54     	; 0xadc <u8g2_font_decode_glyph+0xd2>
     aa6:	23 c0       	rjmp	.+70     	; 0xaee <u8g2_font_decode_glyph+0xe4>
     aa8:	2d 2d       	mov	r18, r13
     aaa:	2c 0d       	add	r18, r12
     aac:	09 2d       	mov	r16, r9
     aae:	08 0f       	add	r16, r24
     ab0:	20 c0       	rjmp	.+64     	; 0xaf2 <u8g2_font_decode_glyph+0xe8>
     ab2:	9c 2d       	mov	r25, r12
     ab4:	99 19       	sub	r25, r9
     ab6:	21 e0       	ldi	r18, 0x01	; 1
     ab8:	2c 0d       	add	r18, r12
     aba:	0d 2d       	mov	r16, r13
     abc:	08 0f       	add	r16, r24
     abe:	cc 24       	eor	r12, r12
     ac0:	c3 94       	inc	r12
     ac2:	c9 0e       	add	r12, r25
     ac4:	16 c0       	rjmp	.+44     	; 0xaf2 <u8g2_font_decode_glyph+0xe8>
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	39 2f       	mov	r19, r25
     aca:	3d 19       	sub	r19, r13
     acc:	21 e0       	ldi	r18, 0x01	; 1
     ace:	2c 0d       	add	r18, r12
     ad0:	99 19       	sub	r25, r9
     ad2:	01 e0       	ldi	r16, 0x01	; 1
     ad4:	08 0f       	add	r16, r24
     ad6:	89 0f       	add	r24, r25
     ad8:	c3 0e       	add	r12, r19
     ada:	0b c0       	rjmp	.+22     	; 0xaf2 <u8g2_font_decode_glyph+0xe8>
     adc:	29 2d       	mov	r18, r9
     ade:	2c 0d       	add	r18, r12
     ae0:	98 2f       	mov	r25, r24
     ae2:	9d 19       	sub	r25, r13
     ae4:	01 e0       	ldi	r16, 0x01	; 1
     ae6:	08 0f       	add	r16, r24
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	89 0f       	add	r24, r25
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <u8g2_font_decode_glyph+0xe8>
     aee:	08 2f       	mov	r16, r24
     af0:	2c 2d       	mov	r18, r12
     af2:	48 2f       	mov	r20, r24
     af4:	6c 2d       	mov	r22, r12
     af6:	ce 01       	movw	r24, r28
     af8:	0e 94 d5 07 	call	0xfaa	; 0xfaa <u8g2_IsIntersection>
     afc:	88 23       	and	r24, r24
     afe:	81 f1       	breq	.+96     	; 0xb60 <u8g2_font_decode_glyph+0x156>
     b00:	1d ae       	std	Y+61, r1	; 0x3d
     b02:	1e ae       	std	Y+62, r1	; 0x3e
     b04:	5e 01       	movw	r10, r28
     b06:	e8 e4       	ldi	r30, 0x48	; 72
     b08:	ae 0e       	add	r10, r30
     b0a:	b1 1c       	adc	r11, r1
     b0c:	6e 01       	movw	r12, r28
     b0e:	f9 e4       	ldi	r31, 0x49	; 73
     b10:	cf 0e       	add	r12, r31
     b12:	d1 1c       	adc	r13, r1
     b14:	f5 01       	movw	r30, r10
     b16:	60 81       	ld	r22, Z
     b18:	c7 01       	movw	r24, r14
     b1a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <u8g2_font_decode_get_unsigned_bits>
     b1e:	08 2f       	mov	r16, r24
     b20:	f6 01       	movw	r30, r12
     b22:	60 81       	ld	r22, Z
     b24:	c7 01       	movw	r24, r14
     b26:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <u8g2_font_decode_get_unsigned_bits>
     b2a:	18 2f       	mov	r17, r24
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	60 2f       	mov	r22, r16
     b30:	ce 01       	movw	r24, r28
     b32:	0e 94 73 04 	call	0x8e6	; 0x8e6 <u8g2_font_decode_len>
     b36:	41 e0       	ldi	r20, 0x01	; 1
     b38:	61 2f       	mov	r22, r17
     b3a:	ce 01       	movw	r24, r28
     b3c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <u8g2_font_decode_len>
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	c7 01       	movw	r24, r14
     b44:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <u8g2_font_decode_get_unsigned_bits>
     b48:	81 11       	cpse	r24, r1
     b4a:	f0 cf       	rjmp	.-32     	; 0xb2c <u8g2_font_decode_glyph+0x122>
     b4c:	8e ad       	ldd	r24, Y+62	; 0x3e
     b4e:	89 15       	cp	r24, r9
     b50:	0c f3       	brlt	.-62     	; 0xb14 <u8g2_font_decode_glyph+0x10a>
     b52:	fe 01       	movw	r30, r28
     b54:	ed 59       	subi	r30, 0x9D	; 157
     b56:	ff 4f       	sbci	r31, 0xFF	; 255
     b58:	cd 5b       	subi	r28, 0xBD	; 189
     b5a:	df 4f       	sbci	r29, 0xFF	; 255
     b5c:	88 81       	ld	r24, Y
     b5e:	80 83       	st	Z, r24
     b60:	88 2d       	mov	r24, r8
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	ef 90       	pop	r14
     b6e:	df 90       	pop	r13
     b70:	cf 90       	pop	r12
     b72:	bf 90       	pop	r11
     b74:	af 90       	pop	r10
     b76:	9f 90       	pop	r9
     b78:	8f 90       	pop	r8
     b7a:	08 95       	ret

00000b7c <u8g2_font_get_glyph_data>:
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	fc 01       	movw	r30, r24
     b8a:	c5 a9       	ldd	r28, Z+53	; 0x35
     b8c:	d6 a9       	ldd	r29, Z+54	; 0x36
     b8e:	67 96       	adiw	r28, 0x17	; 23
     b90:	6f 3f       	cpi	r22, 0xFF	; 255
     b92:	71 05       	cpc	r23, r1
     b94:	11 f0       	breq	.+4      	; 0xb9a <u8g2_font_get_glyph_data+0x1e>
     b96:	08 f0       	brcs	.+2      	; 0xb9a <u8g2_font_get_glyph_data+0x1e>
     b98:	36 c0       	rjmp	.+108    	; 0xc06 <u8g2_font_get_glyph_data+0x8a>
     b9a:	61 36       	cpi	r22, 0x61	; 97
     b9c:	71 05       	cpc	r23, r1
     b9e:	38 f0       	brcs	.+14     	; 0xbae <u8g2_font_get_glyph_data+0x32>
     ba0:	e7 5a       	subi	r30, 0xA7	; 167
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	80 81       	ld	r24, Z
     ba6:	91 81       	ldd	r25, Z+1	; 0x01
     ba8:	c8 0f       	add	r28, r24
     baa:	d9 1f       	adc	r29, r25
     bac:	0a c0       	rjmp	.+20     	; 0xbc2 <u8g2_font_get_glyph_data+0x46>
     bae:	61 34       	cpi	r22, 0x41	; 65
     bb0:	71 05       	cpc	r23, r1
     bb2:	38 f0       	brcs	.+14     	; 0xbc2 <u8g2_font_get_glyph_data+0x46>
     bb4:	fc 01       	movw	r30, r24
     bb6:	e9 5a       	subi	r30, 0xA9	; 169
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	c8 0f       	add	r28, r24
     bc0:	d9 1f       	adc	r29, r25
     bc2:	ce 01       	movw	r24, r28
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	fc 01       	movw	r30, r24
     bc8:	24 91       	lpm	r18, Z
     bca:	22 23       	and	r18, r18
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <u8g2_font_get_glyph_data+0x54>
     bce:	5a c0       	rjmp	.+180    	; 0xc84 <u8g2_font_get_glyph_data+0x108>
     bd0:	fe 01       	movw	r30, r28
     bd2:	24 91       	lpm	r18, Z
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	62 17       	cp	r22, r18
     bd8:	73 07       	cpc	r23, r19
     bda:	51 f4       	brne	.+20     	; 0xbf0 <u8g2_font_get_glyph_data+0x74>
     bdc:	06 c0       	rjmp	.+12     	; 0xbea <u8g2_font_get_glyph_data+0x6e>
     bde:	fe 01       	movw	r30, r28
     be0:	24 91       	lpm	r18, Z
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	62 17       	cp	r22, r18
     be6:	73 07       	cpc	r23, r19
     be8:	19 f4       	brne	.+6      	; 0xbf0 <u8g2_font_get_glyph_data+0x74>
     bea:	ce 01       	movw	r24, r28
     bec:	02 96       	adiw	r24, 0x02	; 2
     bee:	52 c0       	rjmp	.+164    	; 0xc94 <u8g2_font_get_glyph_data+0x118>
     bf0:	fc 01       	movw	r30, r24
     bf2:	84 91       	lpm	r24, Z
     bf4:	c8 0f       	add	r28, r24
     bf6:	d1 1d       	adc	r29, r1
     bf8:	ce 01       	movw	r24, r28
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	fc 01       	movw	r30, r24
     bfe:	24 91       	lpm	r18, Z
     c00:	21 11       	cpse	r18, r1
     c02:	ed cf       	rjmp	.-38     	; 0xbde <u8g2_font_get_glyph_data+0x62>
     c04:	42 c0       	rjmp	.+132    	; 0xc8a <u8g2_font_get_glyph_data+0x10e>
     c06:	8b 01       	movw	r16, r22
     c08:	fc 01       	movw	r30, r24
     c0a:	e5 5a       	subi	r30, 0xA5	; 165
     c0c:	ff 4f       	sbci	r31, 0xFF	; 255
     c0e:	80 81       	ld	r24, Z
     c10:	91 81       	ldd	r25, Z+1	; 0x01
     c12:	c8 0f       	add	r28, r24
     c14:	d9 1f       	adc	r29, r25
     c16:	7e 01       	movw	r14, r28
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	c7 01       	movw	r24, r14
     c1c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <u8g2_font_get_word>
     c20:	c8 0f       	add	r28, r24
     c22:	d9 1f       	adc	r29, r25
     c24:	62 e0       	ldi	r22, 0x02	; 2
     c26:	c7 01       	movw	r24, r14
     c28:	0e 94 7d 03 	call	0x6fa	; 0x6fa <u8g2_font_get_word>
     c2c:	f4 e0       	ldi	r31, 0x04	; 4
     c2e:	ef 0e       	add	r14, r31
     c30:	f1 1c       	adc	r15, r1
     c32:	80 17       	cp	r24, r16
     c34:	91 07       	cpc	r25, r17
     c36:	80 f3       	brcs	.-32     	; 0xc18 <u8g2_font_get_glyph_data+0x9c>
     c38:	fe 01       	movw	r30, r28
     c3a:	84 91       	lpm	r24, Z
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	98 2f       	mov	r25, r24
     c40:	88 27       	eor	r24, r24
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	e4 91       	lpm	r30, Z
     c46:	8e 2b       	or	r24, r30
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	11 f1       	breq	.+68     	; 0xc90 <u8g2_font_get_glyph_data+0x114>
     c4c:	08 17       	cp	r16, r24
     c4e:	19 07       	cpc	r17, r25
     c50:	39 f4       	brne	.+14     	; 0xc60 <u8g2_font_get_glyph_data+0xe4>
     c52:	03 c0       	rjmp	.+6      	; 0xc5a <u8g2_font_get_glyph_data+0xde>
     c54:	08 17       	cp	r16, r24
     c56:	19 07       	cpc	r17, r25
     c58:	19 f4       	brne	.+6      	; 0xc60 <u8g2_font_get_glyph_data+0xe4>
     c5a:	ce 01       	movw	r24, r28
     c5c:	03 96       	adiw	r24, 0x03	; 3
     c5e:	1a c0       	rjmp	.+52     	; 0xc94 <u8g2_font_get_glyph_data+0x118>
     c60:	fe 01       	movw	r30, r28
     c62:	32 96       	adiw	r30, 0x02	; 2
     c64:	e4 91       	lpm	r30, Z
     c66:	ce 0f       	add	r28, r30
     c68:	d1 1d       	adc	r29, r1
     c6a:	fe 01       	movw	r30, r28
     c6c:	84 91       	lpm	r24, Z
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	98 2f       	mov	r25, r24
     c72:	88 27       	eor	r24, r24
     c74:	31 96       	adiw	r30, 0x01	; 1
     c76:	e4 91       	lpm	r30, Z
     c78:	8e 2b       	or	r24, r30
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	59 f7       	brne	.-42     	; 0xc54 <u8g2_font_get_glyph_data+0xd8>
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	08 c0       	rjmp	.+16     	; 0xc94 <u8g2_font_get_glyph_data+0x118>
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	05 c0       	rjmp	.+10     	; 0xc94 <u8g2_font_get_glyph_data+0x118>
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <u8g2_font_get_glyph_data+0x118>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	ff 90       	pop	r15
     c9e:	ef 90       	pop	r14
     ca0:	08 95       	ret

00000ca2 <u8g2_DrawGlyph>:
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	ec 01       	movw	r28, r24
     cb0:	06 2f       	mov	r16, r22
     cb2:	14 2f       	mov	r17, r20
     cb4:	79 01       	movw	r14, r18
     cb6:	fc 01       	movw	r30, r24
     cb8:	eb 5b       	subi	r30, 0xBB	; 187
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	80 81       	ld	r24, Z
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	61 f0       	breq	.+24     	; 0xcda <u8g2_DrawGlyph+0x38>
     cc2:	28 f0       	brcs	.+10     	; 0xcce <u8g2_DrawGlyph+0x2c>
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	79 f0       	breq	.+30     	; 0xce6 <u8g2_DrawGlyph+0x44>
     cc8:	83 30       	cpi	r24, 0x03	; 3
     cca:	99 f0       	breq	.+38     	; 0xcf2 <u8g2_DrawGlyph+0x50>
     ccc:	17 c0       	rjmp	.+46     	; 0xcfc <u8g2_DrawGlyph+0x5a>
     cce:	ef a9       	ldd	r30, Y+55	; 0x37
     cd0:	f8 ad       	ldd	r31, Y+56	; 0x38
     cd2:	ce 01       	movw	r24, r28
     cd4:	09 95       	icall
     cd6:	18 0f       	add	r17, r24
     cd8:	11 c0       	rjmp	.+34     	; 0xcfc <u8g2_DrawGlyph+0x5a>
     cda:	ef a9       	ldd	r30, Y+55	; 0x37
     cdc:	f8 ad       	ldd	r31, Y+56	; 0x38
     cde:	ce 01       	movw	r24, r28
     ce0:	09 95       	icall
     ce2:	08 1b       	sub	r16, r24
     ce4:	0b c0       	rjmp	.+22     	; 0xcfc <u8g2_DrawGlyph+0x5a>
     ce6:	ef a9       	ldd	r30, Y+55	; 0x37
     ce8:	f8 ad       	ldd	r31, Y+56	; 0x38
     cea:	ce 01       	movw	r24, r28
     cec:	09 95       	icall
     cee:	18 1b       	sub	r17, r24
     cf0:	05 c0       	rjmp	.+10     	; 0xcfc <u8g2_DrawGlyph+0x5a>
     cf2:	ef a9       	ldd	r30, Y+55	; 0x37
     cf4:	f8 ad       	ldd	r31, Y+56	; 0x38
     cf6:	ce 01       	movw	r24, r28
     cf8:	09 95       	icall
     cfa:	08 0f       	add	r16, r24
     cfc:	0b af       	std	Y+59, r16	; 0x3b
     cfe:	1c af       	std	Y+60, r17	; 0x3c
     d00:	b7 01       	movw	r22, r14
     d02:	ce 01       	movw	r24, r28
     d04:	0e 94 be 05 	call	0xb7c	; 0xb7c <u8g2_font_get_glyph_data>
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	29 f0       	breq	.+10     	; 0xd16 <u8g2_DrawGlyph+0x74>
     d0c:	bc 01       	movw	r22, r24
     d0e:	ce 01       	movw	r24, r28
     d10:	0e 94 05 05 	call	0xa0a	; 0xa0a <u8g2_font_decode_glyph>
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <u8g2_DrawGlyph+0x76>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	08 95       	ret

00000d26 <u8g2_draw_string>:
     d26:	bf 92       	push	r11
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	ec 01       	movw	r28, r24
     d3a:	b6 2e       	mov	r11, r22
     d3c:	c4 2e       	mov	r12, r20
     d3e:	e2 2e       	mov	r14, r18
     d40:	f3 2e       	mov	r15, r19
     d42:	0e 94 21 09 	call	0x1242	; 0x1242 <u8x8_utf8_init>
     d46:	0e 2d       	mov	r16, r14
     d48:	1f 2d       	mov	r17, r15
     d4a:	d1 2c       	mov	r13, r1
     d4c:	7e 01       	movw	r14, r28
     d4e:	25 e4       	ldi	r18, 0x45	; 69
     d50:	e2 0e       	add	r14, r18
     d52:	f1 1c       	adc	r15, r1
     d54:	f8 01       	movw	r30, r16
     d56:	61 91       	ld	r22, Z+
     d58:	8f 01       	movw	r16, r30
     d5a:	ea 81       	ldd	r30, Y+2	; 0x02
     d5c:	fb 81       	ldd	r31, Y+3	; 0x03
     d5e:	ce 01       	movw	r24, r28
     d60:	09 95       	icall
     d62:	8f 3f       	cpi	r24, 0xFF	; 255
     d64:	ff ef       	ldi	r31, 0xFF	; 255
     d66:	9f 07       	cpc	r25, r31
     d68:	e9 f0       	breq	.+58     	; 0xda4 <u8g2_draw_string+0x7e>
     d6a:	8e 3f       	cpi	r24, 0xFE	; 254
     d6c:	2f ef       	ldi	r18, 0xFF	; 255
     d6e:	92 07       	cpc	r25, r18
     d70:	89 f3       	breq	.-30     	; 0xd54 <u8g2_draw_string+0x2e>
     d72:	9c 01       	movw	r18, r24
     d74:	4c 2d       	mov	r20, r12
     d76:	6b 2d       	mov	r22, r11
     d78:	ce 01       	movw	r24, r28
     d7a:	0e 94 51 06 	call	0xca2	; 0xca2 <u8g2_DrawGlyph>
     d7e:	f7 01       	movw	r30, r14
     d80:	90 81       	ld	r25, Z
     d82:	91 30       	cpi	r25, 0x01	; 1
     d84:	41 f0       	breq	.+16     	; 0xd96 <u8g2_draw_string+0x70>
     d86:	28 f0       	brcs	.+10     	; 0xd92 <u8g2_draw_string+0x6c>
     d88:	92 30       	cpi	r25, 0x02	; 2
     d8a:	39 f0       	breq	.+14     	; 0xd9a <u8g2_draw_string+0x74>
     d8c:	93 30       	cpi	r25, 0x03	; 3
     d8e:	39 f0       	breq	.+14     	; 0xd9e <u8g2_draw_string+0x78>
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <u8g2_draw_string+0x7a>
     d92:	b8 0e       	add	r11, r24
     d94:	05 c0       	rjmp	.+10     	; 0xda0 <u8g2_draw_string+0x7a>
     d96:	c8 0e       	add	r12, r24
     d98:	03 c0       	rjmp	.+6      	; 0xda0 <u8g2_draw_string+0x7a>
     d9a:	b8 1a       	sub	r11, r24
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <u8g2_draw_string+0x7a>
     d9e:	c8 1a       	sub	r12, r24
     da0:	d8 0e       	add	r13, r24
     da2:	d8 cf       	rjmp	.-80     	; 0xd54 <u8g2_draw_string+0x2e>
     da4:	8d 2d       	mov	r24, r13
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ff 90       	pop	r15
     db0:	ef 90       	pop	r14
     db2:	df 90       	pop	r13
     db4:	cf 90       	pop	r12
     db6:	bf 90       	pop	r11
     db8:	08 95       	ret

00000dba <u8g2_DrawStr>:
     dba:	e4 e1       	ldi	r30, 0x14	; 20
     dbc:	f9 e0       	ldi	r31, 0x09	; 9
     dbe:	dc 01       	movw	r26, r24
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	fc 93       	st	X, r31
     dc4:	ee 93       	st	-X, r30
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	0e 94 93 06 	call	0xd26	; 0xd26 <u8g2_draw_string>
     dcc:	08 95       	ret

00000dce <u8g2_UpdateRefHeight>:
     dce:	fc 01       	movw	r30, r24
     dd0:	25 a9       	ldd	r18, Z+53	; 0x35
     dd2:	36 a9       	ldd	r19, Z+54	; 0x36
     dd4:	23 2b       	or	r18, r19
     dd6:	e9 f1       	breq	.+122    	; 0xe52 <u8g2_UpdateRefHeight+0x84>
     dd8:	ed 5a       	subi	r30, 0xAD	; 173
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	20 81       	ld	r18, Z
     dde:	3c 96       	adiw	r30, 0x0c	; 12
     de0:	20 83       	st	Z, r18
     de2:	3b 97       	sbiw	r30, 0x0b	; 11
     de4:	40 81       	ld	r20, Z
     de6:	3c 96       	adiw	r30, 0x0c	; 12
     de8:	40 83       	st	Z, r20
     dea:	32 97       	sbiw	r30, 0x02	; 2
     dec:	30 81       	ld	r19, Z
     dee:	33 23       	and	r19, r19
     df0:	81 f1       	breq	.+96     	; 0xe52 <u8g2_UpdateRefHeight+0x84>
     df2:	31 30       	cpi	r19, 0x01	; 1
     df4:	79 f4       	brne	.+30     	; 0xe14 <u8g2_UpdateRefHeight+0x46>
     df6:	39 97       	sbiw	r30, 0x09	; 9
     df8:	30 81       	ld	r19, Z
     dfa:	23 17       	cp	r18, r19
     dfc:	14 f4       	brge	.+4      	; 0xe02 <u8g2_UpdateRefHeight+0x34>
     dfe:	3a 96       	adiw	r30, 0x0a	; 10
     e00:	30 83       	st	Z, r19
     e02:	fc 01       	movw	r30, r24
     e04:	ea 5a       	subi	r30, 0xAA	; 170
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	20 81       	ld	r18, Z
     e0a:	24 17       	cp	r18, r20
     e0c:	14 f5       	brge	.+68     	; 0xe52 <u8g2_UpdateRefHeight+0x84>
     e0e:	3a 96       	adiw	r30, 0x0a	; 10
     e10:	20 83       	st	Z, r18
     e12:	08 95       	ret
     e14:	fc 01       	movw	r30, r24
     e16:	e0 5b       	subi	r30, 0xB0	; 176
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	e0 81       	ld	r30, Z
     e1c:	dc 01       	movw	r26, r24
     e1e:	ae 5a       	subi	r26, 0xAE	; 174
     e20:	bf 4f       	sbci	r27, 0xFF	; 255
     e22:	5c 91       	ld	r21, X
     e24:	02 2e       	mov	r0, r18
     e26:	00 0c       	add	r0, r0
     e28:	33 0b       	sbc	r19, r19
     e2a:	65 2f       	mov	r22, r21
     e2c:	05 2e       	mov	r0, r21
     e2e:	00 0c       	add	r0, r0
     e30:	77 0b       	sbc	r23, r23
     e32:	6e 0f       	add	r22, r30
     e34:	71 1d       	adc	r23, r1
     e36:	e7 fd       	sbrc	r30, 7
     e38:	7a 95       	dec	r23
     e3a:	26 17       	cp	r18, r22
     e3c:	37 07       	cpc	r19, r23
     e3e:	1c f4       	brge	.+6      	; 0xe46 <u8g2_UpdateRefHeight+0x78>
     e40:	1d 96       	adiw	r26, 0x0d	; 13
     e42:	e5 0f       	add	r30, r21
     e44:	ec 93       	st	X, r30
     e46:	54 17       	cp	r21, r20
     e48:	24 f4       	brge	.+8      	; 0xe52 <u8g2_UpdateRefHeight+0x84>
     e4a:	fc 01       	movw	r30, r24
     e4c:	e0 5a       	subi	r30, 0xA0	; 160
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	50 83       	st	Z, r21
     e52:	08 95       	ret

00000e54 <u8g2_SetFontPosBaseline>:
     e54:	29 e8       	ldi	r18, 0x89	; 137
     e56:	33 e0       	ldi	r19, 0x03	; 3
     e58:	fc 01       	movw	r30, r24
     e5a:	30 af       	std	Z+56, r19	; 0x38
     e5c:	27 ab       	std	Z+55, r18	; 0x37
     e5e:	08 95       	ret

00000e60 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
  if ( u8g2->font != font )
     e64:	fc 01       	movw	r30, r24
     e66:	25 a9       	ldd	r18, Z+53	; 0x35
     e68:	36 a9       	ldd	r19, Z+54	; 0x36
     e6a:	26 17       	cp	r18, r22
     e6c:	37 07       	cpc	r19, r23
     e6e:	51 f0       	breq	.+20     	; 0xe84 <u8g2_SetFont+0x24>
     e70:	ec 01       	movw	r28, r24
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
     e72:	76 ab       	std	Z+54, r23	; 0x36
     e74:	65 ab       	std	Z+53, r22	; 0x35
    u8g2_read_font_info(&(u8g2->font_info), font);
     e76:	8a 5b       	subi	r24, 0xBA	; 186
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	0e 94 8b 03 	call	0x716	; 0x716 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
     e7e:	ce 01       	movw	r24, r28
     e80:	0e 94 e7 06 	call	0xdce	; 0xdce <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
     e8a:	0f 93       	push	r16
  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
     e8c:	dc 01       	movw	r26, r24
     e8e:	98 96       	adiw	r26, 0x28	; 40
     e90:	3c 91       	ld	r19, X
     e92:	98 97       	sbiw	r26, 0x28	; 40
     e94:	43 1b       	sub	r20, r19
     e96:	5e 96       	adiw	r26, 0x1e	; 30
     e98:	ed 91       	ld	r30, X+
     e9a:	fc 91       	ld	r31, X
     e9c:	5f 97       	sbiw	r26, 0x1f	; 31
     e9e:	09 95       	icall
}
     ea0:	0f 91       	pop	r16
     ea2:	08 95       	ret

00000ea4 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
     ea4:	0f 93       	push	r16
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
     ea6:	fc 01       	movw	r30, r24
     ea8:	e3 5a       	subi	r30, 0xA3	; 163
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	30 81       	ld	r19, Z
     eae:	33 23       	and	r19, r19
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <u8g2_DrawHVLine+0x10>
     eb2:	65 c0       	rjmp	.+202    	; 0xf7e <u8g2_DrawHVLine+0xda>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
     eb4:	22 23       	and	r18, r18
     eb6:	09 f4       	brne	.+2      	; 0xeba <u8g2_DrawHVLine+0x16>
     eb8:	62 c0       	rjmp	.+196    	; 0xf7e <u8g2_DrawHVLine+0xda>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	58 f0       	brcs	.+22     	; 0xed4 <u8g2_DrawHVLine+0x30>
      {
	if ( dir == 2 )
     ebe:	02 30       	cpi	r16, 0x02	; 2
     ec0:	19 f4       	brne	.+6      	; 0xec8 <u8g2_DrawHVLine+0x24>
     ec2:	6f 5f       	subi	r22, 0xFF	; 255
	{
	  x -= len;
	  x++;
     ec4:	62 1b       	sub	r22, r18
     ec6:	0a c0       	rjmp	.+20     	; 0xedc <u8g2_DrawHVLine+0x38>
	}
	else if ( dir == 3 )
     ec8:	03 30       	cpi	r16, 0x03	; 3
     eca:	21 f4       	brne	.+8      	; 0xed4 <u8g2_DrawHVLine+0x30>
     ecc:	4f 5f       	subi	r20, 0xFF	; 255
	{
	  y -= len;
	  y++;
     ece:	42 1b       	sub	r20, r18
	}
      }
      dir &= 1;  
     ed0:	51 e0       	ldi	r21, 0x01	; 1
     ed2:	2d c0       	rjmp	.+90     	; 0xf2e <u8g2_DrawHVLine+0x8a>
      
      /* clip against the user window */
      if ( dir == 0 )
     ed4:	50 2f       	mov	r21, r16
     ed6:	51 70       	andi	r21, 0x01	; 1
     ed8:	00 fd       	sbrc	r16, 0
     eda:	29 c0       	rjmp	.+82     	; 0xf2e <u8g2_DrawHVLine+0x8a>
      {
	if ( y < u8g2->user_y0 )
     edc:	dc 01       	movw	r26, r24
     ede:	9f 96       	adiw	r26, 0x2f	; 47
     ee0:	3c 91       	ld	r19, X
     ee2:	9f 97       	sbiw	r26, 0x2f	; 47
     ee4:	43 17       	cp	r20, r19
     ee6:	08 f4       	brcc	.+2      	; 0xeea <u8g2_DrawHVLine+0x46>
     ee8:	4a c0       	rjmp	.+148    	; 0xf7e <u8g2_DrawHVLine+0xda>
	  return;
	if ( y >= u8g2->user_y1 )
     eea:	d0 96       	adiw	r26, 0x30	; 48
     eec:	3c 91       	ld	r19, X
     eee:	d0 97       	sbiw	r26, 0x30	; 48
     ef0:	43 17       	cp	r20, r19
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <u8g2_DrawHVLine+0x52>
     ef4:	44 c0       	rjmp	.+136    	; 0xf7e <u8g2_DrawHVLine+0xda>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
     ef6:	9e 96       	adiw	r26, 0x2e	; 46
     ef8:	3c 91       	ld	r19, X
     efa:	9e 97       	sbiw	r26, 0x2e	; 46
     efc:	9d 96       	adiw	r26, 0x2d	; 45
     efe:	5c 91       	ld	r21, X
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
     f00:	26 0f       	add	r18, r22
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
     f02:	26 17       	cp	r18, r22
     f04:	30 f4       	brcc	.+12     	; 0xf12 <u8g2_DrawHVLine+0x6e>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
     f06:	63 17       	cp	r22, r19
     f08:	18 f4       	brcc	.+6      	; 0xf10 <u8g2_DrawHVLine+0x6c>
    {
      b = d;
      b--;
     f0a:	2f ef       	ldi	r18, 0xFF	; 255
     f0c:	23 0f       	add	r18, r19
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <u8g2_DrawHVLine+0x72>
    }
    else
    {
      a = c;
     f10:	65 2f       	mov	r22, r21
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
     f12:	63 17       	cp	r22, r19
     f14:	a0 f5       	brcc	.+104    	; 0xf7e <u8g2_DrawHVLine+0xda>
    return 0;
  if ( b <= c )
     f16:	52 17       	cp	r21, r18
     f18:	90 f5       	brcc	.+100    	; 0xf7e <u8g2_DrawHVLine+0xda>
     f1a:	65 17       	cp	r22, r21
     f1c:	08 f4       	brcc	.+2      	; 0xf20 <u8g2_DrawHVLine+0x7c>
     f1e:	65 2f       	mov	r22, r21
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
     f20:	23 17       	cp	r18, r19
     f22:	08 f4       	brcc	.+2      	; 0xf26 <u8g2_DrawHVLine+0x82>
     f24:	32 2f       	mov	r19, r18
     f26:	23 2f       	mov	r18, r19
     f28:	26 1b       	sub	r18, r22
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	1e c0       	rjmp	.+60     	; 0xf6a <u8g2_DrawHVLine+0xc6>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
     f2e:	fc 01       	movw	r30, r24
     f30:	35 a5       	ldd	r19, Z+45	; 0x2d
     f32:	63 17       	cp	r22, r19
     f34:	20 f1       	brcs	.+72     	; 0xf7e <u8g2_DrawHVLine+0xda>
	  return;
	if ( x >= u8g2->user_x1 )
     f36:	36 a5       	ldd	r19, Z+46	; 0x2e
     f38:	63 17       	cp	r22, r19
     f3a:	08 f5       	brcc	.+66     	; 0xf7e <u8g2_DrawHVLine+0xda>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
     f3c:	30 a9       	ldd	r19, Z+48	; 0x30
     f3e:	77 a5       	ldd	r23, Z+47	; 0x2f
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
     f40:	24 0f       	add	r18, r20
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
     f42:	24 17       	cp	r18, r20
     f44:	30 f4       	brcc	.+12     	; 0xf52 <u8g2_DrawHVLine+0xae>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
     f46:	43 17       	cp	r20, r19
     f48:	18 f4       	brcc	.+6      	; 0xf50 <u8g2_DrawHVLine+0xac>
    {
      b = d;
      b--;
     f4a:	2f ef       	ldi	r18, 0xFF	; 255
     f4c:	23 0f       	add	r18, r19
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <u8g2_DrawHVLine+0xb2>
    }
    else
    {
      a = c;
     f50:	47 2f       	mov	r20, r23
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
     f52:	43 17       	cp	r20, r19
     f54:	a0 f4       	brcc	.+40     	; 0xf7e <u8g2_DrawHVLine+0xda>
    return 0;
  if ( b <= c )
     f56:	72 17       	cp	r23, r18
     f58:	90 f4       	brcc	.+36     	; 0xf7e <u8g2_DrawHVLine+0xda>
     f5a:	47 17       	cp	r20, r23
     f5c:	08 f4       	brcc	.+2      	; 0xf60 <u8g2_DrawHVLine+0xbc>
     f5e:	47 2f       	mov	r20, r23
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
     f60:	23 17       	cp	r18, r19
     f62:	08 f4       	brcc	.+2      	; 0xf66 <u8g2_DrawHVLine+0xc2>
     f64:	32 2f       	mov	r19, r18
     f66:	23 2f       	mov	r18, r19
     f68:	24 1b       	sub	r18, r20
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
     f6a:	dc 01       	movw	r26, r24
     f6c:	90 96       	adiw	r26, 0x20	; 32
     f6e:	ed 91       	ld	r30, X+
     f70:	fc 91       	ld	r31, X
     f72:	91 97       	sbiw	r26, 0x21	; 33
     f74:	04 80       	ldd	r0, Z+4	; 0x04
     f76:	f5 81       	ldd	r31, Z+5	; 0x05
     f78:	e0 2d       	mov	r30, r0
     f7a:	05 2f       	mov	r16, r21
     f7c:	09 95       	icall
    }
}
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
     f82:	46 17       	cp	r20, r22
     f84:	38 f4       	brcc	.+14     	; 0xf94 <u8g2_is_intersection_decision_tree+0x12>
  {
    if ( v1 > a0 )	// v1 >= a0
     f86:	82 17       	cp	r24, r18
     f88:	60 f0       	brcs	.+24     	; 0xfa2 <u8g2_is_intersection_decision_tree+0x20>
    {
      return 1;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	24 17       	cp	r18, r20
     f8e:	60 f0       	brcs	.+24     	; 0xfa8 <u8g2_is_intersection_decision_tree+0x26>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
     f94:	82 17       	cp	r24, r18
     f96:	38 f4       	brcc	.+14     	; 0xfa6 <u8g2_is_intersection_decision_tree+0x24>
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	24 17       	cp	r18, r20
     f9c:	28 f0       	brcs	.+10     	; 0xfa8 <u8g2_is_intersection_decision_tree+0x26>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	08 95       	ret
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
     fa6:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
}
     fa8:	08 95       	ret

00000faa <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	ec 01       	movw	r28, r24
     fb6:	16 2f       	mov	r17, r22
     fb8:	f2 2e       	mov	r15, r18
     fba:	20 2f       	mov	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
     fbc:	68 a9       	ldd	r22, Y+48	; 0x30
     fbe:	8f a5       	ldd	r24, Y+47	; 0x2f
     fc0:	0e 94 c1 07 	call	0xf82	; 0xf82 <u8g2_is_intersection_decision_tree>
     fc4:	88 23       	and	r24, r24
     fc6:	31 f0       	breq	.+12     	; 0xfd4 <u8g2_IsIntersection+0x2a>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
     fc8:	2f 2d       	mov	r18, r15
     fca:	41 2f       	mov	r20, r17
     fcc:	6e a5       	ldd	r22, Y+46	; 0x2e
     fce:	8d a5       	ldd	r24, Y+45	; 0x2d
     fd0:	0e 94 c1 07 	call	0xf82	; 0xf82 <u8g2_is_intersection_decision_tree>
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	08 95       	ret

00000fe0 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	0f 93       	push	r16
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	7c 01       	movw	r14, r24
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
     fec:	34 2f       	mov	r19, r20
     fee:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	03 2e       	mov	r0, r19
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <u8g2_ll_hvline_vertical_top_lsb+0x1c>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <u8g2_ll_hvline_vertical_top_lsb+0x18>
    1000:	c8 2f       	mov	r28, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    1002:	f7 01       	movw	r30, r14
    1004:	ed 59       	subi	r30, 0x9D	; 157
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	50 81       	ld	r21, Z
    100a:	52 30       	cpi	r21, 0x02	; 2
    100c:	20 f4       	brcc	.+8      	; 0x1016 <u8g2_ll_hvline_vertical_top_lsb+0x36>
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    100e:	51 30       	cpi	r21, 0x01	; 1
    1010:	21 f0       	breq	.+8      	; 0x101a <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    1012:	78 2f       	mov	r23, r24
    1014:	04 c0       	rjmp	.+8      	; 0x101e <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	02 c0       	rjmp	.+4      	; 0x101e <u8g2_ll_hvline_vertical_top_lsb+0x3e>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    101a:	78 2f       	mov	r23, r24
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    101c:	c0 e0       	ldi	r28, 0x00	; 0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
    101e:	50 e0       	ldi	r21, 0x00	; 0
  offset &= ~7;
    1020:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    1022:	d7 01       	movw	r26, r14
    1024:	92 96       	adiw	r26, 0x22	; 34
    1026:	8d 91       	ld	r24, X+
    1028:	9c 91       	ld	r25, X
    102a:	93 97       	sbiw	r26, 0x23	; 35
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    102c:	ed 91       	ld	r30, X+
    102e:	fc 91       	ld	r31, X
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    1030:	d0 89       	ldd	r29, Z+16	; 0x10
    1032:	d4 9f       	mul	r29, r20
    1034:	f0 01       	movw	r30, r0
    1036:	d5 9f       	mul	r29, r21
    1038:	f0 0d       	add	r31, r0
    103a:	11 24       	eor	r1, r1
    103c:	e6 0f       	add	r30, r22
    103e:	f1 1d       	adc	r31, r1
    1040:	e8 0f       	add	r30, r24
    1042:	f9 1f       	adc	r31, r25
  
  if ( dir == 0 )
    1044:	01 11       	cpse	r16, r1
    1046:	07 c0       	rjmp	.+14     	; 0x1056 <u8g2_ll_hvline_vertical_top_lsb+0x76>
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    1048:	80 81       	ld	r24, Z
    104a:	87 2b       	or	r24, r23
    104c:	8c 27       	eor	r24, r28
    104e:	81 93       	st	Z+, r24
	ptr++;
	len--;
    1050:	21 50       	subi	r18, 0x01	; 1
      } while( len != 0 );
    1052:	d1 f7       	brne	.-12     	; 0x1048 <u8g2_ll_hvline_vertical_top_lsb+0x68>
    1054:	22 c0       	rjmp	.+68     	; 0x109a <u8g2_ll_hvline_vertical_top_lsb+0xba>

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
    1056:	a7 01       	movw	r20, r14
    1058:	4d 59       	subi	r20, 0x9D	; 157
    105a:	5f 4f       	sbci	r21, 0xFF	; 255
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    105c:	90 81       	ld	r25, Z
    105e:	97 2b       	or	r25, r23
    1060:	9c 27       	eor	r25, r28
    1062:	90 83       	st	Z, r25
      
      bit_pos++;
    1064:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    1066:	37 70       	andi	r19, 0x07	; 7

      len--;
    1068:	21 50       	subi	r18, 0x01	; 1

      if ( bit_pos == 0 )
    106a:	31 11       	cpse	r19, r1
    106c:	0e c0       	rjmp	.+28     	; 0x108a <u8g2_ll_hvline_vertical_top_lsb+0xaa>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    106e:	d7 01       	movw	r26, r14
    1070:	96 96       	adiw	r26, 0x26	; 38
    1072:	8c 91       	ld	r24, X
    1074:	e8 0f       	add	r30, r24
    1076:	f1 1d       	adc	r31, r1
		
	if ( u8g2->draw_color <= 1 )
    1078:	da 01       	movw	r26, r20
    107a:	8c 91       	ld	r24, X
    107c:	82 30       	cpi	r24, 0x02	; 2
    107e:	40 f4       	brcc	.+16     	; 0x1090 <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	41 f0       	breq	.+16     	; 0x1094 <u8g2_ll_hvline_vertical_top_lsb+0xb4>
	  xor_mask = 1;
    1084:	c1 e0       	ldi	r28, 0x01	; 1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    1086:	71 e0       	ldi	r23, 0x01	; 1
    1088:	06 c0       	rjmp	.+12     	; 0x1096 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    108a:	77 0f       	add	r23, r23
	xor_mask <<= 1;
    108c:	cc 0f       	add	r28, r28
    108e:	03 c0       	rjmp	.+6      	; 0x1096 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    1090:	c1 e0       	ldi	r28, 0x01	; 1
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <u8g2_ll_hvline_vertical_top_lsb+0xb6>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    1094:	71 e0       	ldi	r23, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    1096:	21 11       	cpse	r18, r1
    1098:	e1 cf       	rjmp	.-62     	; 0x105c <u8g2_ll_hvline_vertical_top_lsb+0x7c>
  }
}
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	08 95       	ret

000010a6 <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    10a6:	fc 01       	movw	r30, r24
    10a8:	a0 81       	ld	r26, Z
    10aa:	b1 81       	ldd	r27, Z+1	; 0x01
    10ac:	84 a1       	ldd	r24, Z+36	; 0x24
    10ae:	98 2f       	mov	r25, r24
    10b0:	99 0f       	add	r25, r25
    10b2:	99 0f       	add	r25, r25
    10b4:	99 0f       	add	r25, r25
    10b6:	97 a3       	std	Z+39, r25	; 0x27
    10b8:	50 96       	adiw	r26, 0x10	; 16
    10ba:	9c 91       	ld	r25, X
    10bc:	50 97       	sbiw	r26, 0x10	; 16
    10be:	90 32       	cpi	r25, 0x20	; 32
    10c0:	08 f0       	brcs	.+2      	; 0x10c4 <u8g2_update_dimension_common+0x1e>
    10c2:	9f e1       	ldi	r25, 0x1F	; 31
    10c4:	99 0f       	add	r25, r25
    10c6:	99 0f       	add	r25, r25
    10c8:	99 0f       	add	r25, r25
    10ca:	96 a3       	std	Z+38, r25	; 0x26
    10cc:	45 a1       	ldd	r20, Z+37	; 0x25
    10ce:	94 2f       	mov	r25, r20
    10d0:	99 0f       	add	r25, r25
    10d2:	99 0f       	add	r25, r25
    10d4:	99 0f       	add	r25, r25
    10d6:	90 a7       	std	Z+40, r25	; 0x28
    10d8:	51 96       	adiw	r26, 0x11	; 17
    10da:	5c 91       	ld	r21, X
    10dc:	51 97       	sbiw	r26, 0x11	; 17
    10de:	24 2f       	mov	r18, r20
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	28 0f       	add	r18, r24
    10e4:	31 1d       	adc	r19, r1
    10e6:	65 2f       	mov	r22, r21
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	62 17       	cp	r22, r18
    10ec:	73 07       	cpc	r23, r19
    10ee:	14 f4       	brge	.+4      	; 0x10f4 <u8g2_update_dimension_common+0x4e>
    10f0:	85 2f       	mov	r24, r21
    10f2:	84 1b       	sub	r24, r20
    10f4:	91 a7       	std	Z+41, r25	; 0x29
    10f6:	88 0f       	add	r24, r24
    10f8:	88 0f       	add	r24, r24
    10fa:	88 0f       	add	r24, r24
    10fc:	89 0f       	add	r24, r25
    10fe:	82 a7       	std	Z+42, r24	; 0x2a
    1100:	80 ef       	ldi	r24, 0xF0	; 240
    1102:	83 a7       	std	Z+43, r24	; 0x2b
    1104:	54 96       	adiw	r26, 0x14	; 20
    1106:	8d 91       	ld	r24, X+
    1108:	9c 91       	ld	r25, X
    110a:	55 97       	sbiw	r26, 0x15	; 21
    110c:	81 3f       	cpi	r24, 0xF1	; 241
    110e:	91 05       	cpc	r25, r1
    1110:	08 f4       	brcc	.+2      	; 0x1114 <u8g2_update_dimension_common+0x6e>
    1112:	83 a7       	std	Z+43, r24	; 0x2b
    1114:	56 96       	adiw	r26, 0x16	; 22
    1116:	8c 91       	ld	r24, X
    1118:	84 a7       	std	Z+44, r24	; 0x2c
    111a:	08 95       	ret

0000111c <u8g2_update_dimension_r0>:
    111c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <u8g2_update_dimension_common>
    1120:	08 95       	ret

00001122 <u8g2_apply_clip_window>:
    1122:	0f 93       	push	r16
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	ec 01       	movw	r28, r24
    112a:	0c a9       	ldd	r16, Y+52	; 0x34
    112c:	2a a9       	ldd	r18, Y+50	; 0x32
    112e:	4b a9       	ldd	r20, Y+51	; 0x33
    1130:	69 a9       	ldd	r22, Y+49	; 0x31
    1132:	0e 94 d5 07 	call	0xfaa	; 0xfaa <u8g2_IsIntersection>
    1136:	81 11       	cpse	r24, r1
    1138:	04 c0       	rjmp	.+8      	; 0x1142 <u8g2_apply_clip_window+0x20>
    113a:	c3 5a       	subi	r28, 0xA3	; 163
    113c:	df 4f       	sbci	r29, 0xFF	; 255
    113e:	18 82       	st	Y, r1
    1140:	19 c0       	rjmp	.+50     	; 0x1174 <u8g2_apply_clip_window+0x52>
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	fe 01       	movw	r30, r28
    1146:	e3 5a       	subi	r30, 0xA3	; 163
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	80 83       	st	Z, r24
    114c:	89 a9       	ldd	r24, Y+49	; 0x31
    114e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1150:	98 17       	cp	r25, r24
    1152:	08 f4       	brcc	.+2      	; 0x1156 <u8g2_apply_clip_window+0x34>
    1154:	8d a7       	std	Y+45, r24	; 0x2d
    1156:	8a a9       	ldd	r24, Y+50	; 0x32
    1158:	9e a5       	ldd	r25, Y+46	; 0x2e
    115a:	89 17       	cp	r24, r25
    115c:	08 f4       	brcc	.+2      	; 0x1160 <u8g2_apply_clip_window+0x3e>
    115e:	8e a7       	std	Y+46, r24	; 0x2e
    1160:	8b a9       	ldd	r24, Y+51	; 0x33
    1162:	9f a5       	ldd	r25, Y+47	; 0x2f
    1164:	98 17       	cp	r25, r24
    1166:	08 f4       	brcc	.+2      	; 0x116a <u8g2_apply_clip_window+0x48>
    1168:	8f a7       	std	Y+47, r24	; 0x2f
    116a:	8c a9       	ldd	r24, Y+52	; 0x34
    116c:	98 a9       	ldd	r25, Y+48	; 0x30
    116e:	89 17       	cp	r24, r25
    1170:	08 f4       	brcc	.+2      	; 0x1174 <u8g2_apply_clip_window+0x52>
    1172:	88 ab       	std	Y+48, r24	; 0x30
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	0f 91       	pop	r16
    117a:	08 95       	ret

0000117c <u8g2_update_page_win_r0>:
    117c:	fc 01       	movw	r30, r24
    117e:	15 a6       	std	Z+45, r1	; 0x2d
    1180:	83 a5       	ldd	r24, Z+43	; 0x2b
    1182:	86 a7       	std	Z+46, r24	; 0x2e
    1184:	81 a5       	ldd	r24, Z+41	; 0x29
    1186:	87 a7       	std	Z+47, r24	; 0x2f
    1188:	82 a5       	ldd	r24, Z+42	; 0x2a
    118a:	80 ab       	std	Z+48, r24	; 0x30
    118c:	cf 01       	movw	r24, r30
    118e:	0e 94 91 08 	call	0x1122	; 0x1122 <u8g2_apply_clip_window>
    1192:	08 95       	ret

00001194 <u8g2_draw_l90_r0>:
    1194:	0f 93       	push	r16
    1196:	0e 94 45 07 	call	0xe8a	; 0xe8a <u8g2_draw_hv_line_2dir>
    119a:	0f 91       	pop	r16
    119c:	08 95       	ret

0000119e <u8g2_SetMaxClipWindow>:
    119e:	dc 01       	movw	r26, r24
    11a0:	d1 96       	adiw	r26, 0x31	; 49
    11a2:	1c 92       	st	X, r1
    11a4:	d1 97       	sbiw	r26, 0x31	; 49
    11a6:	d3 96       	adiw	r26, 0x33	; 51
    11a8:	1c 92       	st	X, r1
    11aa:	d3 97       	sbiw	r26, 0x33	; 51
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	d2 96       	adiw	r26, 0x32	; 50
    11b0:	8c 93       	st	X, r24
    11b2:	d2 97       	sbiw	r26, 0x32	; 50
    11b4:	d4 96       	adiw	r26, 0x34	; 52
    11b6:	8c 93       	st	X, r24
    11b8:	d4 97       	sbiw	r26, 0x34	; 52
    11ba:	90 96       	adiw	r26, 0x20	; 32
    11bc:	ed 91       	ld	r30, X+
    11be:	fc 91       	ld	r31, X
    11c0:	91 97       	sbiw	r26, 0x21	; 33
    11c2:	02 80       	ldd	r0, Z+2	; 0x02
    11c4:	f3 81       	ldd	r31, Z+3	; 0x03
    11c6:	e0 2d       	mov	r30, r0
    11c8:	cd 01       	movw	r24, r26
    11ca:	09 95       	icall
    11cc:	08 95       	ret

000011ce <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    11d8:	1e aa       	std	Y+54, r1	; 0x36
    11da:	1d aa       	std	Y+53, r1	; 0x35
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    11dc:	3f 8f       	std	Y+31, r19	; 0x1f
    11de:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    11e0:	7b a3       	std	Y+35, r23	; 0x23
    11e2:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    11e4:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    11e6:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    11e8:	fc 01       	movw	r30, r24
    11ea:	ee 5b       	subi	r30, 0xBE	; 190
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    11f0:	b0 96       	adiw	r30, 0x20	; 32
    11f2:	10 82       	st	Z, r1
  
  u8g2->draw_color = 1;
    11f4:	31 96       	adiw	r30, 0x01	; 1
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    11fa:	31 96       	adiw	r30, 0x01	; 1
    11fc:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    11fe:	19 a3       	std	Y+33, r17	; 0x21
    1200:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    1202:	d8 01       	movw	r26, r16
    1204:	ed 91       	ld	r30, X+
    1206:	fc 91       	ld	r31, X
    1208:	ce 01       	movw	r24, r28
    120a:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    120c:	ce 01       	movw	r24, r28
    120e:	0e 94 cf 08 	call	0x119e	; 0x119e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    1212:	ce 01       	movw	r24, r28
    1214:	0e 94 2a 07 	call	0xe54	; 0xe54 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    1218:	cb 5b       	subi	r28, 0xBB	; 187
    121a:	df 4f       	sbci	r29, 0xFF	; 255
    121c:	18 82       	st	Y, r1
#endif
}
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	08 95       	ret

00001228 <u8x8_ascii_next>:
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    1228:	66 23       	and	r22, r22
    122a:	29 f0       	breq	.+10     	; 0x1236 <u8x8_ascii_next+0xe>
    122c:	6a 30       	cpi	r22, 0x0A	; 10
    122e:	31 f0       	breq	.+12     	; 0x123c <u8x8_ascii_next+0x14>
    1230:	86 2f       	mov	r24, r22
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	08 95       	ret
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	9f ef       	ldi	r25, 0xFF	; 255
    123a:	08 95       	ret
    123c:	8f ef       	ldi	r24, 0xFF	; 255
    123e:	9f ef       	ldi	r25, 0xFF	; 255
    1240:	08 95       	ret

00001242 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    1242:	fc 01       	movw	r30, r24
    1244:	10 8e       	std	Z+24, r1	; 0x18
    1246:	08 95       	ret

00001248 <u8x8_byte_SetDC>:
      break;
    default:
      return 0;
  }
  return 1;
}
    1248:	46 2f       	mov	r20, r22
    124a:	dc 01       	movw	r26, r24
    124c:	18 96       	adiw	r26, 0x08	; 8
    124e:	ed 91       	ld	r30, X+
    1250:	fc 91       	ld	r31, X
    1252:	19 97       	sbiw	r26, 0x09	; 9
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	60 e2       	ldi	r22, 0x20	; 32
    125a:	09 95       	icall
    125c:	08 95       	ret

0000125e <u8x8_byte_SendBytes>:
    125e:	9a 01       	movw	r18, r20
    1260:	dc 01       	movw	r26, r24
    1262:	18 96       	adiw	r26, 0x08	; 8
    1264:	ed 91       	ld	r30, X+
    1266:	fc 91       	ld	r31, X
    1268:	19 97       	sbiw	r26, 0x09	; 9
    126a:	46 2f       	mov	r20, r22
    126c:	67 e1       	ldi	r22, 0x17	; 23
    126e:	09 95       	icall
    1270:	08 95       	ret

00001272 <u8x8_byte_SendByte>:
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	1f 92       	push	r1
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	69 83       	std	Y+1, r22	; 0x01
    127e:	ae 01       	movw	r20, r28
    1280:	4f 5f       	subi	r20, 0xFF	; 255
    1282:	5f 4f       	sbci	r21, 0xFF	; 255
    1284:	61 e0       	ldi	r22, 0x01	; 1
    1286:	0e 94 2f 09 	call	0x125e	; 0x125e <u8x8_byte_SendBytes>
    128a:	0f 90       	pop	r0
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	08 95       	ret

00001292 <u8x8_byte_set_ks0108_cs>:

/*=========================================*/

void u8x8_byte_set_ks0108_cs(u8x8_t *u8x8, uint8_t arg)
{
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	8c 01       	movw	r16, r24
    129a:	c6 2f       	mov	r28, r22
  u8x8_gpio_SetCS(u8x8, arg&1);
    129c:	46 2f       	mov	r20, r22
    129e:	41 70       	andi	r20, 0x01	; 1
    12a0:	69 e4       	ldi	r22, 0x49	; 73
    12a2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
  arg = arg >> 1;
    12a6:	c6 95       	lsr	r28
  u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_CS1, arg&1);
    12a8:	4c 2f       	mov	r20, r28
    12aa:	41 70       	andi	r20, 0x01	; 1
    12ac:	6e e4       	ldi	r22, 0x4E	; 78
    12ae:	c8 01       	movw	r24, r16
    12b0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
  arg = arg >> 1;
  u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_CS2, arg&1);
    12b4:	c1 fb       	bst	r28, 1
    12b6:	44 27       	eor	r20, r20
    12b8:	40 f9       	bld	r20, 0
    12ba:	6f e4       	ldi	r22, 0x4F	; 79
    12bc:	c8 01       	movw	r24, r16
    12be:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
}
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	08 95       	ret

000012ca <u8x8_byte_ks0108>:

/* 6800 mode */
uint8_t u8x8_byte_ks0108(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    12ca:	cf 92       	push	r12
    12cc:	df 92       	push	r13
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	8c 01       	movw	r16, r24
    12dc:	c4 2e       	mov	r12, r20
    12de:	79 01       	movw	r14, r18
  uint8_t i, b;
  uint8_t *data;
 
  switch(msg)
    12e0:	68 31       	cpi	r22, 0x18	; 24
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <u8x8_byte_ks0108+0x1c>
    12e4:	57 c0       	rjmp	.+174    	; 0x1394 <u8x8_byte_ks0108+0xca>
    12e6:	30 f4       	brcc	.+12     	; 0x12f4 <u8x8_byte_ks0108+0x2a>
    12e8:	64 31       	cpi	r22, 0x14	; 20
    12ea:	09 f4       	brne	.+2      	; 0x12ee <u8x8_byte_ks0108+0x24>
    12ec:	40 c0       	rjmp	.+128    	; 0x136e <u8x8_byte_ks0108+0xa4>
    12ee:	67 31       	cpi	r22, 0x17	; 23
    12f0:	41 f0       	breq	.+16     	; 0x1302 <u8x8_byte_ks0108+0x38>
    12f2:	73 c0       	rjmp	.+230    	; 0x13da <u8x8_byte_ks0108+0x110>
    12f4:	69 31       	cpi	r22, 0x19	; 25
    12f6:	09 f4       	brne	.+2      	; 0x12fa <u8x8_byte_ks0108+0x30>
    12f8:	5e c0       	rjmp	.+188    	; 0x13b6 <u8x8_byte_ks0108+0xec>
    12fa:	60 32       	cpi	r22, 0x20	; 32
    12fc:	09 f4       	brne	.+2      	; 0x1300 <u8x8_byte_ks0108+0x36>
    12fe:	45 c0       	rjmp	.+138    	; 0x138a <u8x8_byte_ks0108+0xc0>
    1300:	6c c0       	rjmp	.+216    	; 0x13da <u8x8_byte_ks0108+0x110>
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
    1302:	44 23       	and	r20, r20
    1304:	09 f4       	brne	.+2      	; 0x1308 <u8x8_byte_ks0108+0x3e>
    1306:	6b c0       	rjmp	.+214    	; 0x13de <u8x8_byte_ks0108+0x114>
    1308:	ca 94       	dec	r12
    130a:	d1 2c       	mov	r13, r1
    130c:	8f ef       	ldi	r24, 0xFF	; 255
    130e:	c8 1a       	sub	r12, r24
    1310:	d8 0a       	sbc	r13, r24
    1312:	c2 0e       	add	r12, r18
    1314:	d3 1e       	adc	r13, r19
      {
	b = *data;
    1316:	d7 01       	movw	r26, r14
    1318:	dd 91       	ld	r29, X+
    131a:	7d 01       	movw	r14, r26
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
    131c:	c0 e4       	ldi	r28, 0x40	; 64
	{
	  u8x8_gpio_call(u8x8, i, b&1);
    131e:	4d 2f       	mov	r20, r29
    1320:	41 70       	andi	r20, 0x01	; 1
    1322:	6c 2f       	mov	r22, r28
    1324:	c8 01       	movw	r24, r16
    1326:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
	  b >>= 1;
    132a:	d6 95       	lsr	r29
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
    132c:	cf 5f       	subi	r28, 0xFF	; 255
    132e:	c8 34       	cpi	r28, 0x48	; 72
    1330:	b1 f7       	brne	.-20     	; 0x131e <u8x8_byte_ks0108+0x54>
	{
	  u8x8_gpio_call(u8x8, i, b&1);
	  b >>= 1;
	}    
	
	u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->data_setup_time_ns);
    1332:	e8 01       	movw	r28, r16
    1334:	e8 81       	ld	r30, Y
    1336:	f9 81       	ldd	r31, Y+1	; 0x01
    1338:	46 85       	ldd	r20, Z+14	; 0x0e
    133a:	6c e2       	ldi	r22, 0x2C	; 44
    133c:	c8 01       	movw	r24, r16
    133e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
	u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 1);
    1342:	41 e0       	ldi	r20, 0x01	; 1
    1344:	68 e4       	ldi	r22, 0x48	; 72
    1346:	c8 01       	movw	r24, r16
    1348:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
	u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->write_pulse_width_ns);
    134c:	e8 81       	ld	r30, Y
    134e:	f9 81       	ldd	r31, Y+1	; 0x01
    1350:	47 85       	ldd	r20, Z+15	; 0x0f
    1352:	6c e2       	ldi	r22, 0x2C	; 44
    1354:	c8 01       	movw	r24, r16
    1356:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
	u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	68 e4       	ldi	r22, 0x48	; 72
    135e:	c8 01       	movw	r24, r16
    1360:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
    1364:	ec 14       	cp	r14, r12
    1366:	fd 04       	cpc	r15, r13
    1368:	b1 f6       	brne	.-84     	; 0x1316 <u8x8_byte_ks0108+0x4c>
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
      break;
    default:
      return 0;
  }
  return 1;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	39 c0       	rjmp	.+114    	; 0x13e0 <u8x8_byte_ks0108+0x116>
      }
      break;
      
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
    136e:	dc 01       	movw	r26, r24
    1370:	ed 91       	ld	r30, X+
    1372:	fc 91       	ld	r31, X
    1374:	41 81       	ldd	r20, Z+1	; 0x01
    1376:	69 e4       	ldi	r22, 0x49	; 73
    1378:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
      /* ensure that the enable signal is low */
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	68 e4       	ldi	r22, 0x48	; 72
    1380:	c8 01       	movw	r24, r16
    1382:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
      break;
    default:
      return 0;
  }
  return 1;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
      /* ensure that the enable signal is low */
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
      break;
    1388:	2b c0       	rjmp	.+86     	; 0x13e0 <u8x8_byte_ks0108+0x116>
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
    138a:	6a e4       	ldi	r22, 0x4A	; 74
    138c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
      break;
    default:
      return 0;
  }
  return 1;
    1390:	81 e0       	ldi	r24, 0x01	; 1
      /* ensure that the enable signal is low */
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
      break;
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    1392:	26 c0       	rjmp	.+76     	; 0x13e0 <u8x8_byte_ks0108+0x116>
    case U8X8_MSG_BYTE_START_TRANSFER:
      /* expects 3 bits in arg_int for the chip select lines */ 
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
    1394:	64 2f       	mov	r22, r20
    1396:	0e 94 49 09 	call	0x1292	; 0x1292 <u8x8_byte_set_ks0108_cs>
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
    139a:	e8 01       	movw	r28, r16
    139c:	a8 81       	ld	r26, Y
    139e:	b9 81       	ldd	r27, Y+1	; 0x01
    13a0:	ea 85       	ldd	r30, Y+10	; 0x0a
    13a2:	fb 85       	ldd	r31, Y+11	; 0x0b
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	12 96       	adiw	r26, 0x02	; 2
    13aa:	4c 91       	ld	r20, X
    13ac:	6c e2       	ldi	r22, 0x2C	; 44
    13ae:	c8 01       	movw	r24, r16
    13b0:	09 95       	icall
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
      break;
    default:
      return 0;
  }
  return 1;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      /* expects 3 bits in arg_int for the chip select lines */ 
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    13b4:	15 c0       	rjmp	.+42     	; 0x13e0 <u8x8_byte_ks0108+0x116>
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
    13b6:	fc 01       	movw	r30, r24
    13b8:	a0 81       	ld	r26, Z
    13ba:	b1 81       	ldd	r27, Z+1	; 0x01
    13bc:	02 84       	ldd	r0, Z+10	; 0x0a
    13be:	f3 85       	ldd	r31, Z+11	; 0x0b
    13c0:	e0 2d       	mov	r30, r0
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	13 96       	adiw	r26, 0x03	; 3
    13c8:	4c 91       	ld	r20, X
    13ca:	6c e2       	ldi	r22, 0x2C	; 44
    13cc:	09 95       	icall
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
    13ce:	6c 2d       	mov	r22, r12
    13d0:	c8 01       	movw	r24, r16
    13d2:	0e 94 49 09 	call	0x1292	; 0x1292 <u8x8_byte_set_ks0108_cs>
      break;
    default:
      return 0;
  }
  return 1;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
      break;
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <u8x8_byte_ks0108+0x116>
    default:
      return 0;
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <u8x8_byte_ks0108+0x116>
  }
  return 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
}
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	ff 90       	pop	r15
    13ea:	ef 90       	pop	r14
    13ec:	df 90       	pop	r13
    13ee:	cf 90       	pop	r12
    13f0:	08 95       	ret

000013f2 <u8x8_cad_SendCmd>:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
}
    13f2:	46 2f       	mov	r20, r22
    13f4:	dc 01       	movw	r26, r24
    13f6:	16 96       	adiw	r26, 0x06	; 6
    13f8:	ed 91       	ld	r30, X+
    13fa:	fc 91       	ld	r31, X
    13fc:	17 97       	sbiw	r26, 0x07	; 7
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	65 e1       	ldi	r22, 0x15	; 21
    1404:	09 95       	icall
    1406:	08 95       	ret

00001408 <u8x8_cad_SendData>:
    1408:	9a 01       	movw	r18, r20
    140a:	dc 01       	movw	r26, r24
    140c:	16 96       	adiw	r26, 0x06	; 6
    140e:	ed 91       	ld	r30, X+
    1410:	fc 91       	ld	r31, X
    1412:	17 97       	sbiw	r26, 0x07	; 7
    1414:	46 2f       	mov	r20, r22
    1416:	67 e1       	ldi	r22, 0x17	; 23
    1418:	09 95       	icall
    141a:	08 95       	ret

0000141c <u8x8_cad_SendSequence>:
    141c:	ef 92       	push	r14
    141e:	ff 92       	push	r15
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	1f 92       	push	r1
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	7c 01       	movw	r14, r24
    1430:	8b 01       	movw	r16, r22
    1432:	d8 01       	movw	r26, r16
    1434:	6c 91       	ld	r22, X
    1436:	67 31       	cpi	r22, 0x17	; 23
    1438:	c1 f0       	breq	.+48     	; 0x146a <u8x8_cad_SendSequence+0x4e>
    143a:	18 f4       	brcc	.+6      	; 0x1442 <u8x8_cad_SendSequence+0x26>
    143c:	65 31       	cpi	r22, 0x15	; 21
    143e:	30 f4       	brcc	.+12     	; 0x144c <u8x8_cad_SendSequence+0x30>
    1440:	38 c0       	rjmp	.+112    	; 0x14b2 <u8x8_cad_SendSequence+0x96>
    1442:	6a 31       	cpi	r22, 0x1A	; 26
    1444:	f8 f0       	brcs	.+62     	; 0x1484 <u8x8_cad_SendSequence+0x68>
    1446:	6e 3f       	cpi	r22, 0xFE	; 254
    1448:	51 f1       	breq	.+84     	; 0x149e <u8x8_cad_SendSequence+0x82>
    144a:	33 c0       	rjmp	.+102    	; 0x14b2 <u8x8_cad_SendSequence+0x96>
    144c:	f8 01       	movw	r30, r16
    144e:	41 81       	ldd	r20, Z+1	; 0x01
    1450:	49 83       	std	Y+1, r20	; 0x01
    1452:	d7 01       	movw	r26, r14
    1454:	16 96       	adiw	r26, 0x06	; 6
    1456:	ed 91       	ld	r30, X+
    1458:	fc 91       	ld	r31, X
    145a:	17 97       	sbiw	r26, 0x07	; 7
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	c7 01       	movw	r24, r14
    1462:	09 95       	icall
    1464:	0e 5f       	subi	r16, 0xFE	; 254
    1466:	1f 4f       	sbci	r17, 0xFF	; 255
    1468:	e4 cf       	rjmp	.-56     	; 0x1432 <u8x8_cad_SendSequence+0x16>
    146a:	f8 01       	movw	r30, r16
    146c:	81 81       	ldd	r24, Z+1	; 0x01
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	ae 01       	movw	r20, r28
    1472:	4f 5f       	subi	r20, 0xFF	; 255
    1474:	5f 4f       	sbci	r21, 0xFF	; 255
    1476:	61 e0       	ldi	r22, 0x01	; 1
    1478:	c7 01       	movw	r24, r14
    147a:	0e 94 04 0a 	call	0x1408	; 0x1408 <u8x8_cad_SendData>
    147e:	0e 5f       	subi	r16, 0xFE	; 254
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	d7 cf       	rjmp	.-82     	; 0x1432 <u8x8_cad_SendSequence+0x16>
    1484:	0f 5f       	subi	r16, 0xFF	; 255
    1486:	1f 4f       	sbci	r17, 0xFF	; 255
    1488:	d7 01       	movw	r26, r14
    148a:	16 96       	adiw	r26, 0x06	; 6
    148c:	ed 91       	ld	r30, X+
    148e:	fc 91       	ld	r31, X
    1490:	17 97       	sbiw	r26, 0x07	; 7
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	c7 01       	movw	r24, r14
    149a:	09 95       	icall
    149c:	ca cf       	rjmp	.-108    	; 0x1432 <u8x8_cad_SendSequence+0x16>
    149e:	f8 01       	movw	r30, r16
    14a0:	41 81       	ldd	r20, Z+1	; 0x01
    14a2:	49 83       	std	Y+1, r20	; 0x01
    14a4:	69 e2       	ldi	r22, 0x29	; 41
    14a6:	c7 01       	movw	r24, r14
    14a8:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
    14ac:	0e 5f       	subi	r16, 0xFE	; 254
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	c0 cf       	rjmp	.-128    	; 0x1432 <u8x8_cad_SendSequence+0x16>
    14b2:	0f 90       	pop	r0
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	ff 90       	pop	r15
    14be:	ef 90       	pop	r14
    14c0:	08 95       	ret

000014c2 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    14c2:	ef 92       	push	r14
    14c4:	ff 92       	push	r15
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	8c 01       	movw	r16, r24
    14d0:	c6 2f       	mov	r28, r22
    14d2:	d4 2f       	mov	r29, r20
    14d4:	79 01       	movw	r14, r18
  switch(msg)
    14d6:	66 31       	cpi	r22, 0x16	; 22
    14d8:	a1 f0       	breq	.+40     	; 0x1502 <u8x8_cad_001+0x40>
    14da:	28 f4       	brcc	.+10     	; 0x14e6 <u8x8_cad_001+0x24>
    14dc:	64 31       	cpi	r22, 0x14	; 20
    14de:	e9 f0       	breq	.+58     	; 0x151a <u8x8_cad_001+0x58>
    14e0:	65 31       	cpi	r22, 0x15	; 21
    14e2:	31 f0       	breq	.+12     	; 0x14f0 <u8x8_cad_001+0x2e>
    14e4:	25 c0       	rjmp	.+74     	; 0x1530 <u8x8_cad_001+0x6e>
    14e6:	67 31       	cpi	r22, 0x17	; 23
    14e8:	a9 f0       	breq	.+42     	; 0x1514 <u8x8_cad_001+0x52>
    14ea:	6a 31       	cpi	r22, 0x1A	; 26
    14ec:	08 f5       	brcc	.+66     	; 0x1530 <u8x8_cad_001+0x6e>
    14ee:	15 c0       	rjmp	.+42     	; 0x151a <u8x8_cad_001+0x58>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	0e 94 24 09 	call	0x1248	; 0x1248 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    14f6:	6d 2f       	mov	r22, r29
    14f8:	c8 01       	movw	r24, r16
    14fa:	0e 94 39 09 	call	0x1272	; 0x1272 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    1500:	18 c0       	rjmp	.+48     	; 0x1532 <u8x8_cad_001+0x70>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	0e 94 24 09 	call	0x1248	; 0x1248 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    1508:	6d 2f       	mov	r22, r29
    150a:	c8 01       	movw	r24, r16
    150c:	0e 94 39 09 	call	0x1272	; 0x1272 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    1510:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    1512:	0f c0       	rjmp	.+30     	; 0x1532 <u8x8_cad_001+0x70>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
    1514:	61 e0       	ldi	r22, 0x01	; 1
    1516:	0e 94 24 09 	call	0x1248	; 0x1248 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    151a:	d8 01       	movw	r26, r16
    151c:	18 96       	adiw	r26, 0x08	; 8
    151e:	ed 91       	ld	r30, X+
    1520:	fc 91       	ld	r31, X
    1522:	19 97       	sbiw	r26, 0x09	; 9
    1524:	97 01       	movw	r18, r14
    1526:	4d 2f       	mov	r20, r29
    1528:	6c 2f       	mov	r22, r28
    152a:	c8 01       	movw	r24, r16
    152c:	09 95       	icall
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <u8x8_cad_001+0x70>
    default:
      return 0;
    1530:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	08 95       	ret

00001540 <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    1540:	fc 01       	movw	r30, r24
    1542:	71 83       	std	Z+1, r23	; 0x01
    1544:	60 83       	st	Z, r22
    1546:	fb 01       	movw	r30, r22
    1548:	22 89       	ldd	r18, Z+18	; 0x12
    154a:	fc 01       	movw	r30, r24
    154c:	24 8b       	std	Z+20, r18	; 0x14
    154e:	08 95       	ret

00001550 <u8x8_d_helper_display_init>:
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	ec 01       	movw	r28, r24
    1556:	ea 85       	ldd	r30, Y+10	; 0x0a
    1558:	fb 85       	ldd	r31, Y+11	; 0x0b
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	68 e2       	ldi	r22, 0x28	; 40
    1562:	09 95       	icall
    1564:	ee 81       	ldd	r30, Y+6	; 0x06
    1566:	ff 81       	ldd	r31, Y+7	; 0x07
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	64 e1       	ldi	r22, 0x14	; 20
    1570:	ce 01       	movw	r24, r28
    1572:	09 95       	icall
    1574:	41 e0       	ldi	r20, 0x01	; 1
    1576:	6b e4       	ldi	r22, 0x4B	; 75
    1578:	ce 01       	movw	r24, r28
    157a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
    157e:	e8 81       	ld	r30, Y
    1580:	f9 81       	ldd	r31, Y+1	; 0x01
    1582:	44 81       	ldd	r20, Z+4	; 0x04
    1584:	69 e2       	ldi	r22, 0x29	; 41
    1586:	ce 01       	movw	r24, r28
    1588:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	6b e4       	ldi	r22, 0x4B	; 75
    1590:	ce 01       	movw	r24, r28
    1592:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
    1596:	e8 81       	ld	r30, Y
    1598:	f9 81       	ldd	r31, Y+1	; 0x01
    159a:	44 81       	ldd	r20, Z+4	; 0x04
    159c:	69 e2       	ldi	r22, 0x29	; 41
    159e:	ce 01       	movw	r24, r28
    15a0:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	6b e4       	ldi	r22, 0x4B	; 75
    15a8:	ce 01       	movw	r24, r28
    15aa:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
    15ae:	e8 81       	ld	r30, Y
    15b0:	f9 81       	ldd	r31, Y+1	; 0x01
    15b2:	45 81       	ldd	r20, Z+5	; 0x05
    15b4:	69 e2       	ldi	r22, 0x29	; 41
    15b6:	ce 01       	movw	r24, r28
    15b8:	0e 94 9a 0c 	call	0x1934	; 0x1934 <u8x8_gpio_call>
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	08 95       	ret

000015c2 <u8x8_DrawTile>:
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <u8x8_DrawTile+0xa>
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <u8x8_DrawTile+0xc>
    15ce:	1f 92       	push	r1
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	6c 83       	std	Y+4, r22	; 0x04
    15d6:	4d 83       	std	Y+5, r20	; 0x05
    15d8:	2b 83       	std	Y+3, r18	; 0x03
    15da:	1a 83       	std	Y+2, r17	; 0x02
    15dc:	09 83       	std	Y+1, r16	; 0x01
    15de:	dc 01       	movw	r26, r24
    15e0:	14 96       	adiw	r26, 0x04	; 4
    15e2:	ed 91       	ld	r30, X+
    15e4:	fc 91       	ld	r31, X
    15e6:	15 97       	sbiw	r26, 0x05	; 5
    15e8:	9e 01       	movw	r18, r28
    15ea:	2f 5f       	subi	r18, 0xFF	; 255
    15ec:	3f 4f       	sbci	r19, 0xFF	; 255
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	6f e0       	ldi	r22, 0x0F	; 15
    15f2:	09 95       	icall
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	08 95       	ret

00001608 <u8x8_SetupMemory>:
    1608:	dc 01       	movw	r26, r24
    160a:	14 96       	adiw	r26, 0x04	; 4
    160c:	ed 91       	ld	r30, X+
    160e:	fc 91       	ld	r31, X
    1610:	15 97       	sbiw	r26, 0x05	; 5
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	69 e0       	ldi	r22, 0x09	; 9
    161a:	09 95       	icall
    161c:	08 95       	ret

0000161e <u8x8_InitDisplay>:
    161e:	dc 01       	movw	r26, r24
    1620:	14 96       	adiw	r26, 0x04	; 4
    1622:	ed 91       	ld	r30, X+
    1624:	fc 91       	ld	r31, X
    1626:	15 97       	sbiw	r26, 0x05	; 5
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e0       	ldi	r20, 0x00	; 0
    162e:	6a e0       	ldi	r22, 0x0A	; 10
    1630:	09 95       	icall
    1632:	08 95       	ret

00001634 <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    1634:	dc 01       	movw	r26, r24
    1636:	14 96       	adiw	r26, 0x04	; 4
    1638:	ed 91       	ld	r30, X+
    163a:	fc 91       	ld	r31, X
    163c:	15 97       	sbiw	r26, 0x05	; 5
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	60 e1       	ldi	r22, 0x10	; 16
    1646:	09 95       	icall
    1648:	08 95       	ret

0000164a <u8x8_ks0108_out>:
  uint8_t c;
  uint8_t arg_int;
};

static void u8x8_ks0108_out(u8x8_t *u8x8, struct u8x8_ks0108_vars *v, void *arg_ptr)
{
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	7c 01       	movw	r14, r24
    165a:	eb 01       	movw	r28, r22
    165c:	6a 01       	movw	r12, r20
  uint8_t cnt;
  u8x8_cad_SendCmd(u8x8, 0x040 | ((v->x << 3) & 63) );
    165e:	6a 81       	ldd	r22, Y+2	; 0x02
    1660:	66 0f       	add	r22, r22
    1662:	66 0f       	add	r22, r22
    1664:	66 0f       	add	r22, r22
    1666:	68 73       	andi	r22, 0x38	; 56
    1668:	60 64       	ori	r22, 0x40	; 64
    166a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <u8x8_cad_SendCmd>
  u8x8_cad_SendCmd(u8x8, 0x0b8 | (((u8x8_tile_t *)arg_ptr)->y_pos));
    166e:	f6 01       	movw	r30, r12
    1670:	64 81       	ldd	r22, Z+4	; 0x04
    1672:	68 6b       	ori	r22, 0xB8	; 184
    1674:	c7 01       	movw	r24, r14
    1676:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <u8x8_cad_SendCmd>
  
  while( v->arg_int > 0 )
    167a:	2d c0       	rjmp	.+90     	; 0x16d6 <u8x8_ks0108_out+0x8c>
  {
      /* calculate tiles to next boundary (end or chip limit) */
      cnt = v->x;
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
      cnt += 8;
    167e:	68 e0       	ldi	r22, 0x08	; 8
    1680:	68 0f       	add	r22, r24
      cnt &= 0x0f8;
    1682:	68 7f       	andi	r22, 0xF8	; 248
      cnt -= v->x;
            
      if ( cnt > v->c )
    1684:	9b 81       	ldd	r25, Y+3	; 0x03
    1686:	68 1b       	sub	r22, r24
    1688:	96 17       	cp	r25, r22
    168a:	08 f4       	brcc	.+2      	; 0x168e <u8x8_ks0108_out+0x44>
    168c:	69 2f       	mov	r22, r25
    
      /* of cours we still could use cnt=1 here... */
      /* but setting cnt to 1 is not very efficient */
      //cnt = 1;
    
      v->x +=cnt;
    168e:	86 0f       	add	r24, r22
    1690:	8a 83       	std	Y+2, r24	; 0x02
      v->c-=cnt;
    1692:	96 1b       	sub	r25, r22
    1694:	9b 83       	std	Y+3, r25	; 0x03
      cnt<<=3;
    1696:	16 2f       	mov	r17, r22
    1698:	11 0f       	add	r17, r17
    169a:	11 0f       	add	r17, r17
    169c:	11 0f       	add	r17, r17
      u8x8_cad_SendData(u8x8, cnt, v->ptr);	/* note: SendData can not handle more than 255 bytes */    
    169e:	48 81       	ld	r20, Y
    16a0:	59 81       	ldd	r21, Y+1	; 0x01
    16a2:	61 2f       	mov	r22, r17
    16a4:	c7 01       	movw	r24, r14
    16a6:	0e 94 04 0a 	call	0x1408	; 0x1408 <u8x8_cad_SendData>
      v->ptr += cnt;
    16aa:	88 81       	ld	r24, Y
    16ac:	99 81       	ldd	r25, Y+1	; 0x01
    16ae:	81 0f       	add	r24, r17
    16b0:	91 1d       	adc	r25, r1
    16b2:	99 83       	std	Y+1, r25	; 0x01
    16b4:	88 83       	st	Y, r24
    
      if ( v->c == 0 )
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	81 11       	cpse	r24, r1
    16ba:	0a c0       	rjmp	.+20     	; 0x16d0 <u8x8_ks0108_out+0x86>
      {
	v->ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
    16bc:	f6 01       	movw	r30, r12
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	99 83       	std	Y+1, r25	; 0x01
    16c4:	88 83       	st	Y, r24
	v->c = ((u8x8_tile_t *)arg_ptr)->cnt;
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	8b 83       	std	Y+3, r24	; 0x03
	v->arg_int--;
    16ca:	8c 81       	ldd	r24, Y+4	; 0x04
    16cc:	81 50       	subi	r24, 0x01	; 1
    16ce:	8c 83       	std	Y+4, r24	; 0x04
      }
      if ( ((v->x) & 7) == 0 )
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	87 70       	andi	r24, 0x07	; 7
    16d4:	19 f0       	breq	.+6      	; 0x16dc <u8x8_ks0108_out+0x92>
{
  uint8_t cnt;
  u8x8_cad_SendCmd(u8x8, 0x040 | ((v->x << 3) & 63) );
  u8x8_cad_SendCmd(u8x8, 0x0b8 | (((u8x8_tile_t *)arg_ptr)->y_pos));
  
  while( v->arg_int > 0 )
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	81 11       	cpse	r24, r1
    16da:	d0 cf       	rjmp	.-96     	; 0x167c <u8x8_ks0108_out+0x32>
	v->arg_int--;
      }
      if ( ((v->x) & 7) == 0 )
	break;       
  } 
}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	df 90       	pop	r13
    16e8:	cf 90       	pop	r12
    16ea:	08 95       	ret

000016ec <u8x8_d_ks0108_128x64>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ks0108_128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    16ec:	ef 92       	push	r14
    16ee:	ff 92       	push	r15
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <u8x8_d_ks0108_128x64+0xe>
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <u8x8_d_ks0108_128x64+0x10>
    16fc:	1f 92       	push	r1
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	8c 01       	movw	r16, r24
    1704:	79 01       	movw	r14, r18
  struct u8x8_ks0108_vars v;
  switch(msg)
    1706:	6a 30       	cpi	r22, 0x0A	; 10
    1708:	89 f0       	breq	.+34     	; 0x172c <u8x8_d_ks0108_128x64+0x40>
    170a:	18 f4       	brcc	.+6      	; 0x1712 <u8x8_d_ks0108_128x64+0x26>
    170c:	69 30       	cpi	r22, 0x09	; 9
    170e:	41 f0       	breq	.+16     	; 0x1720 <u8x8_d_ks0108_128x64+0x34>
    1710:	02 c1       	rjmp	.+516    	; 0x1916 <u8x8_d_ks0108_128x64+0x22a>
    1712:	6b 30       	cpi	r22, 0x0B	; 11
    1714:	09 f4       	brne	.+2      	; 0x1718 <u8x8_d_ks0108_128x64+0x2c>
    1716:	44 c0       	rjmp	.+136    	; 0x17a0 <u8x8_d_ks0108_128x64+0xb4>
    1718:	6f 30       	cpi	r22, 0x0F	; 15
    171a:	09 f4       	brne	.+2      	; 0x171e <u8x8_d_ks0108_128x64+0x32>
    171c:	b1 c0       	rjmp	.+354    	; 0x1880 <u8x8_d_ks0108_128x64+0x194>
    171e:	fb c0       	rjmp	.+502    	; 0x1916 <u8x8_d_ks0108_128x64+0x22a>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ks0108_128x64_display_info);
    1720:	66 e6       	ldi	r22, 0x66	; 102
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	0e 94 a0 0a 	call	0x1540	; 0x1540 <u8x8_d_helper_display_setup_memory>
      //}    
      break;
    default:
      return 0;
  }
  return 1;
    1728:	81 e0       	ldi	r24, 0x01	; 1
  struct u8x8_ks0108_vars v;
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ks0108_128x64_display_info);
      break;
    172a:	f8 c0       	rjmp	.+496    	; 0x191c <u8x8_d_ks0108_128x64+0x230>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    172c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <u8x8_d_helper_display_init>
    
      u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 1, NULL);
    1730:	d8 01       	movw	r26, r16
    1732:	16 96       	adiw	r26, 0x06	; 6
    1734:	ed 91       	ld	r30, X+
    1736:	fc 91       	ld	r31, X
    1738:	17 97       	sbiw	r26, 0x07	; 7
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	41 e0       	ldi	r20, 0x01	; 1
    1740:	68 e1       	ldi	r22, 0x18	; 24
    1742:	c8 01       	movw	r24, r16
    1744:	09 95       	icall
      u8x8_cad_SendSequence(u8x8, u8x8_d_ks0108_init_seq);
    1746:	64 e8       	ldi	r22, 0x84	; 132
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	c8 01       	movw	r24, r16
    174c:	0e 94 0e 0a 	call	0x141c	; 0x141c <u8x8_cad_SendSequence>
      u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    1750:	d8 01       	movw	r26, r16
    1752:	16 96       	adiw	r26, 0x06	; 6
    1754:	ed 91       	ld	r30, X+
    1756:	fc 91       	ld	r31, X
    1758:	17 97       	sbiw	r26, 0x07	; 7
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	69 e1       	ldi	r22, 0x19	; 25
    1762:	c8 01       	movw	r24, r16
    1764:	09 95       	icall
    
      u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 2, NULL);
    1766:	d8 01       	movw	r26, r16
    1768:	16 96       	adiw	r26, 0x06	; 6
    176a:	ed 91       	ld	r30, X+
    176c:	fc 91       	ld	r31, X
    176e:	17 97       	sbiw	r26, 0x07	; 7
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	42 e0       	ldi	r20, 0x02	; 2
    1776:	68 e1       	ldi	r22, 0x18	; 24
    1778:	c8 01       	movw	r24, r16
    177a:	09 95       	icall
      u8x8_cad_SendSequence(u8x8, u8x8_d_ks0108_init_seq);
    177c:	64 e8       	ldi	r22, 0x84	; 132
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	c8 01       	movw	r24, r16
    1782:	0e 94 0e 0a 	call	0x141c	; 0x141c <u8x8_cad_SendSequence>
      u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    1786:	d8 01       	movw	r26, r16
    1788:	16 96       	adiw	r26, 0x06	; 6
    178a:	ed 91       	ld	r30, X+
    178c:	fc 91       	ld	r31, X
    178e:	17 97       	sbiw	r26, 0x07	; 7
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	69 e1       	ldi	r22, 0x19	; 25
    1798:	c8 01       	movw	r24, r16
    179a:	09 95       	icall
      //}    
      break;
    default:
      return 0;
  }
  return 1;
    179c:	81 e0       	ldi	r24, 0x01	; 1
      u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    
      u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 2, NULL);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ks0108_init_seq);
      u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
      break;
    179e:	be c0       	rjmp	.+380    	; 0x191c <u8x8_d_ks0108_128x64+0x230>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      
      if ( arg_int == 0 )
    17a0:	41 11       	cpse	r20, r1
    17a2:	37 c0       	rjmp	.+110    	; 0x1812 <u8x8_d_ks0108_128x64+0x126>
      {
	u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 1, NULL);
    17a4:	dc 01       	movw	r26, r24
    17a6:	16 96       	adiw	r26, 0x06	; 6
    17a8:	ed 91       	ld	r30, X+
    17aa:	fc 91       	ld	r31, X
    17ac:	17 97       	sbiw	r26, 0x07	; 7
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	68 e1       	ldi	r22, 0x18	; 24
    17b6:	09 95       	icall
	u8x8_cad_SendSequence(u8x8, u8x8_d_ks0108_powersave0_seq);
    17b8:	61 e8       	ldi	r22, 0x81	; 129
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	c8 01       	movw	r24, r16
    17be:	0e 94 0e 0a 	call	0x141c	; 0x141c <u8x8_cad_SendSequence>
	u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    17c2:	d8 01       	movw	r26, r16
    17c4:	16 96       	adiw	r26, 0x06	; 6
    17c6:	ed 91       	ld	r30, X+
    17c8:	fc 91       	ld	r31, X
    17ca:	17 97       	sbiw	r26, 0x07	; 7
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e0       	ldi	r20, 0x00	; 0
    17d2:	69 e1       	ldi	r22, 0x19	; 25
    17d4:	c8 01       	movw	r24, r16
    17d6:	09 95       	icall

	u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 2, NULL);
    17d8:	d8 01       	movw	r26, r16
    17da:	16 96       	adiw	r26, 0x06	; 6
    17dc:	ed 91       	ld	r30, X+
    17de:	fc 91       	ld	r31, X
    17e0:	17 97       	sbiw	r26, 0x07	; 7
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	42 e0       	ldi	r20, 0x02	; 2
    17e8:	68 e1       	ldi	r22, 0x18	; 24
    17ea:	c8 01       	movw	r24, r16
    17ec:	09 95       	icall
	u8x8_cad_SendSequence(u8x8, u8x8_d_ks0108_powersave0_seq);
    17ee:	61 e8       	ldi	r22, 0x81	; 129
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	c8 01       	movw	r24, r16
    17f4:	0e 94 0e 0a 	call	0x141c	; 0x141c <u8x8_cad_SendSequence>
	u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    17f8:	d8 01       	movw	r26, r16
    17fa:	16 96       	adiw	r26, 0x06	; 6
    17fc:	ed 91       	ld	r30, X+
    17fe:	fc 91       	ld	r31, X
    1800:	17 97       	sbiw	r26, 0x07	; 7
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	69 e1       	ldi	r22, 0x19	; 25
    180a:	c8 01       	movw	r24, r16
    180c:	09 95       	icall
      //}    
      break;
    default:
      return 0;
  }
  return 1;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	85 c0       	rjmp	.+266    	; 0x191c <u8x8_d_ks0108_128x64+0x230>
	u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
	
      }
      else
      {
	u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 1, NULL);
    1812:	dc 01       	movw	r26, r24
    1814:	16 96       	adiw	r26, 0x06	; 6
    1816:	ed 91       	ld	r30, X+
    1818:	fc 91       	ld	r31, X
    181a:	17 97       	sbiw	r26, 0x07	; 7
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	68 e1       	ldi	r22, 0x18	; 24
    1824:	09 95       	icall
	u8x8_cad_SendSequence(u8x8, u8x8_d_ks0108_powersave1_seq);
    1826:	6e e7       	ldi	r22, 0x7E	; 126
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	c8 01       	movw	r24, r16
    182c:	0e 94 0e 0a 	call	0x141c	; 0x141c <u8x8_cad_SendSequence>
	u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    1830:	d8 01       	movw	r26, r16
    1832:	16 96       	adiw	r26, 0x06	; 6
    1834:	ed 91       	ld	r30, X+
    1836:	fc 91       	ld	r31, X
    1838:	17 97       	sbiw	r26, 0x07	; 7
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	69 e1       	ldi	r22, 0x19	; 25
    1842:	c8 01       	movw	r24, r16
    1844:	09 95       	icall
	
	u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 2, NULL);
    1846:	d8 01       	movw	r26, r16
    1848:	16 96       	adiw	r26, 0x06	; 6
    184a:	ed 91       	ld	r30, X+
    184c:	fc 91       	ld	r31, X
    184e:	17 97       	sbiw	r26, 0x07	; 7
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	42 e0       	ldi	r20, 0x02	; 2
    1856:	68 e1       	ldi	r22, 0x18	; 24
    1858:	c8 01       	movw	r24, r16
    185a:	09 95       	icall
	u8x8_cad_SendSequence(u8x8, u8x8_d_ks0108_powersave1_seq);
    185c:	6e e7       	ldi	r22, 0x7E	; 126
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	c8 01       	movw	r24, r16
    1862:	0e 94 0e 0a 	call	0x141c	; 0x141c <u8x8_cad_SendSequence>
	u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    1866:	d8 01       	movw	r26, r16
    1868:	16 96       	adiw	r26, 0x06	; 6
    186a:	ed 91       	ld	r30, X+
    186c:	fc 91       	ld	r31, X
    186e:	17 97       	sbiw	r26, 0x07	; 7
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	69 e1       	ldi	r22, 0x19	; 25
    1878:	c8 01       	movw	r24, r16
    187a:	09 95       	icall
      //}    
      break;
    default:
      return 0;
  }
  return 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	4e c0       	rjmp	.+156    	; 0x191c <u8x8_d_ks0108_128x64+0x230>
// The KS0108 has no internal contrast command
//    case U8X8_MSG_DISPLAY_SET_CONTRAST:
//      break;
    case U8X8_MSG_DISPLAY_DRAW_TILE:

      v.ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
    1880:	f9 01       	movw	r30, r18
    1882:	80 81       	ld	r24, Z
    1884:	91 81       	ldd	r25, Z+1	; 0x01
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01
      v.x = ((u8x8_tile_t *)arg_ptr)->x_pos;
    188a:	83 81       	ldd	r24, Z+3	; 0x03
    188c:	8b 83       	std	Y+3, r24	; 0x03
      v.c = ((u8x8_tile_t *)arg_ptr)->cnt;
    188e:	92 81       	ldd	r25, Z+2	; 0x02
    1890:	9c 83       	std	Y+4, r25	; 0x04
      v.arg_int = arg_int;    
    1892:	4d 83       	std	Y+5, r20	; 0x05
      
      
      if ( v.x < 8 )
    1894:	88 30       	cpi	r24, 0x08	; 8
    1896:	e8 f4       	brcc	.+58     	; 0x18d2 <u8x8_d_ks0108_128x64+0x1e6>
      {
	u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 1, NULL);
    1898:	d8 01       	movw	r26, r16
    189a:	16 96       	adiw	r26, 0x06	; 6
    189c:	ed 91       	ld	r30, X+
    189e:	fc 91       	ld	r31, X
    18a0:	17 97       	sbiw	r26, 0x07	; 7
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	41 e0       	ldi	r20, 0x01	; 1
    18a8:	68 e1       	ldi	r22, 0x18	; 24
    18aa:	c8 01       	movw	r24, r16
    18ac:	09 95       	icall
	u8x8_ks0108_out(u8x8, &v, arg_ptr);
    18ae:	a7 01       	movw	r20, r14
    18b0:	be 01       	movw	r22, r28
    18b2:	6f 5f       	subi	r22, 0xFF	; 255
    18b4:	7f 4f       	sbci	r23, 0xFF	; 255
    18b6:	c8 01       	movw	r24, r16
    18b8:	0e 94 25 0b 	call	0x164a	; 0x164a <u8x8_ks0108_out>
	u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    18bc:	d8 01       	movw	r26, r16
    18be:	16 96       	adiw	r26, 0x06	; 6
    18c0:	ed 91       	ld	r30, X+
    18c2:	fc 91       	ld	r31, X
    18c4:	17 97       	sbiw	r26, 0x07	; 7
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	69 e1       	ldi	r22, 0x19	; 25
    18ce:	c8 01       	movw	r24, r16
    18d0:	09 95       	icall
      }
      if ( v.x < 16 )
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	80 31       	cpi	r24, 0x10	; 16
    18d6:	08 f5       	brcc	.+66     	; 0x191a <u8x8_d_ks0108_128x64+0x22e>
      {
	u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 2, NULL);
    18d8:	d8 01       	movw	r26, r16
    18da:	16 96       	adiw	r26, 0x06	; 6
    18dc:	ed 91       	ld	r30, X+
    18de:	fc 91       	ld	r31, X
    18e0:	17 97       	sbiw	r26, 0x07	; 7
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	42 e0       	ldi	r20, 0x02	; 2
    18e8:	68 e1       	ldi	r22, 0x18	; 24
    18ea:	c8 01       	movw	r24, r16
    18ec:	09 95       	icall
	u8x8_ks0108_out(u8x8, &v, arg_ptr);
    18ee:	a7 01       	movw	r20, r14
    18f0:	be 01       	movw	r22, r28
    18f2:	6f 5f       	subi	r22, 0xFF	; 255
    18f4:	7f 4f       	sbci	r23, 0xFF	; 255
    18f6:	c8 01       	movw	r24, r16
    18f8:	0e 94 25 0b 	call	0x164a	; 0x164a <u8x8_ks0108_out>
	u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    18fc:	d8 01       	movw	r26, r16
    18fe:	16 96       	adiw	r26, 0x06	; 6
    1900:	ed 91       	ld	r30, X+
    1902:	fc 91       	ld	r31, X
    1904:	17 97       	sbiw	r26, 0x07	; 7
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	69 e1       	ldi	r22, 0x19	; 25
    190e:	c8 01       	movw	r24, r16
    1910:	09 95       	icall
      //}    
      break;
    default:
      return 0;
  }
  return 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	03 c0       	rjmp	.+6      	; 0x191c <u8x8_d_ks0108_128x64+0x230>
	//u8x8_ks0108_out(u8x8, &v, arg_ptr);
	//u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
      //}    
      break;
    default:
      return 0;
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	01 c0       	rjmp	.+2      	; 0x191c <u8x8_d_ks0108_128x64+0x230>
  }
  return 1;
    191a:	81 e0       	ldi	r24, 0x01	; 1
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	08 95       	ret

00001934 <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    1934:	dc 01       	movw	r26, r24
    1936:	1a 96       	adiw	r26, 0x0a	; 10
    1938:	ed 91       	ld	r30, X+
    193a:	fc 91       	ld	r31, X
    193c:	1b 97       	sbiw	r26, 0x0b	; 11
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	09 95       	icall
    1944:	08 95       	ret

00001946 <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	08 95       	ret

0000194a <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    194a:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    194c:	11 82       	std	Z+1, r1	; 0x01
    194e:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    1950:	83 ea       	ldi	r24, 0xA3	; 163
    1952:	9c e0       	ldi	r25, 0x0C	; 12
    1954:	95 83       	std	Z+5, r25	; 0x05
    1956:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    1958:	97 83       	std	Z+7, r25	; 0x07
    195a:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    195c:	91 87       	std	Z+9, r25	; 0x09
    195e:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    1960:	93 87       	std	Z+11, r25	; 0x0b
    1962:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    1964:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    1966:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    1968:	14 86       	std	Z+12, r1	; 0x0c
    196a:	15 86       	std	Z+13, r1	; 0x0d
    196c:	16 86       	std	Z+14, r1	; 0x0e
    196e:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    1974:	82 8f       	std	Z+26, r24	; 0x1a
    1976:	08 95       	ret

00001978 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    1978:	af 92       	push	r10
    197a:	bf 92       	push	r11
    197c:	cf 92       	push	r12
    197e:	df 92       	push	r13
    1980:	ef 92       	push	r14
    1982:	ff 92       	push	r15
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	ec 01       	movw	r28, r24
    198e:	5b 01       	movw	r10, r22
    1990:	6a 01       	movw	r12, r20
    1992:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    1994:	0e 94 a5 0c 	call	0x194a	; 0x194a <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    1998:	bd 82       	std	Y+5, r11	; 0x05
    199a:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    199c:	df 82       	std	Y+7, r13	; 0x07
    199e:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    19a0:	f9 86       	std	Y+9, r15	; 0x09
    19a2:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    19a4:	1b 87       	std	Y+11, r17	; 0x0b
    19a6:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    19a8:	ce 01       	movw	r24, r28
    19aa:	0e 94 04 0b 	call	0x1608	; 0x1608 <u8x8_SetupMemory>
}
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	ff 90       	pop	r15
    19b8:	ef 90       	pop	r14
    19ba:	df 90       	pop	r13
    19bc:	cf 90       	pop	r12
    19be:	bf 90       	pop	r11
    19c0:	af 90       	pop	r10
    19c2:	08 95       	ret

000019c4 <u8x8_gpio_and_delay_template>:
#define P_CPU_NS (1000000000UL / F_CPU)


#define P_CPU_NS (1000000000UL / F_CPU)
uint8_t u8x8_gpio_and_delay_template(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
	uint8_t cycles;
	switch(msg)
    19c8:	06 2f       	mov	r16, r22
    19ca:	10 e0       	ldi	r17, 0x00	; 0
    19cc:	f8 01       	movw	r30, r16
    19ce:	b8 97       	sbiw	r30, 0x28	; 40
    19d0:	ec 32       	cpi	r30, 0x2C	; 44
    19d2:	f1 05       	cpc	r31, r1
    19d4:	08 f0       	brcs	.+2      	; 0x19d8 <u8x8_gpio_and_delay_template+0x14>
    19d6:	91 c0       	rjmp	.+290    	; 0x1afa <u8x8_gpio_and_delay_template+0x136>
    19d8:	e6 5d       	subi	r30, 0xD6	; 214
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__tablejump2__>
			"1: sbiw %0,1" "\n\t" // 2 cycles
			"brne 1b" : "=w" (cycles) : "0" (cycles) // 2 cycles
			);
		break;
		case U8X8_MSG_DELAY_10MICRO:		// delay arg_int * 10 micro seconds
			for(int i=0 ; i < arg_int ; i++)
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	14 16       	cp	r1, r20
    19e4:	15 06       	cpc	r1, r21
    19e6:	ec f0       	brlt	.+58     	; 0x1a22 <u8x8_gpio_and_delay_template+0x5e>
    19e8:	8b c0       	rjmp	.+278    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
			_delay_us(10);
		break;
		case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
				for(int i=0 ; i < arg_int ; i++)
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	14 16       	cp	r1, r20
    19ee:	15 06       	cpc	r1, r21
    19f0:	1c f1       	brlt	.+70     	; 0x1a38 <u8x8_gpio_and_delay_template+0x74>
    19f2:	86 c0       	rjmp	.+268    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
{
	uint8_t cycles;
	switch(msg)
	{
		case U8X8_MSG_GPIO_AND_DELAY_INIT:	// called once during init phase of u8g2/u8x8
			DDRB = 0xFF;
    19f4:	8f ef       	ldi	r24, 0xFF	; 255
    19f6:	87 bb       	out	0x17, r24	; 23
			DDRD = 0xFF;
    19f8:	81 bb       	out	0x11, r24	; 17
		break;							// can be used to setup pins
    19fa:	82 c0       	rjmp	.+260    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
			#define CALL_CYCLES 26UL
			#define CALC_CYCLES 4UL
			#define RETURN_CYCLES 4UL
			#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    19fc:	24 2f       	mov	r18, r20
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	a4 e6       	ldi	r26, 0x64	; 100
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <__umulhisi3>
    1a08:	28 ef       	ldi	r18, 0xF8	; 248
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__udivmodsi4>

			if(cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    1a14:	23 32       	cpi	r18, 0x23	; 35
    1a16:	08 f0       	brcs	.+2      	; 0x1a1a <u8x8_gpio_and_delay_template+0x56>
    1a18:	73 c0       	rjmp	.+230    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
			break;

			__asm__ __volatile__ (
    1a1a:	82 2f       	mov	r24, r18
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <u8x8_gpio_and_delay_template+0x58>
			"1: sbiw %0,1" "\n\t" // 2 cycles
			"brne 1b" : "=w" (cycles) : "0" (cycles) // 2 cycles
			);
		break;
    1a20:	6f c0       	rjmp	.+222    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
		case U8X8_MSG_DELAY_10MICRO:		// delay arg_int * 10 micro seconds
			for(int i=0 ; i < arg_int ; i++)
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a26:	25 e3       	ldi	r18, 0x35	; 53
    1a28:	2a 95       	dec	r18
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <u8x8_gpio_and_delay_template+0x64>
    1a2c:	00 00       	nop
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	84 17       	cp	r24, r20
    1a32:	95 07       	cpc	r25, r21
    1a34:	c1 f7       	brne	.-16     	; 0x1a26 <u8x8_gpio_and_delay_template+0x62>
    1a36:	64 c0       	rjmp	.+200    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
			_delay_us(10);
		break;
		case U8X8_MSG_DELAY_MILLI:			// delay arg_int * 1 milli second
				for(int i=0 ; i < arg_int ; i++)
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a3c:	ef e9       	ldi	r30, 0x9F	; 159
    1a3e:	ff e0       	ldi	r31, 0x0F	; 15
    1a40:	31 97       	sbiw	r30, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <u8x8_gpio_and_delay_template+0x7c>
    1a44:	00 c0       	rjmp	.+0      	; 0x1a46 <u8x8_gpio_and_delay_template+0x82>
    1a46:	00 00       	nop
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	84 17       	cp	r24, r20
    1a4c:	95 07       	cpc	r25, r21
    1a4e:	b1 f7       	brne	.-20     	; 0x1a3c <u8x8_gpio_and_delay_template+0x78>
    1a50:	57 c0       	rjmp	.+174    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
				_delay_ms(1);
		break;
		case U8X8_MSG_DELAY_I2C:				// arg_int is the I2C speed in 100KHz, e.g. 4 = 400 KHz
		break;							// arg_int=1: delay by 5us, arg_int = 4: delay by 1.25us
		case U8X8_MSG_GPIO_D0:				// D0 or SPI clock pin: Output level in arg_int
			if(arg_int)
    1a52:	44 23       	and	r20, r20
    1a54:	11 f0       	breq	.+4      	; 0x1a5a <u8x8_gpio_and_delay_template+0x96>
			{
				PORTA |= (1<<0);
    1a56:	d8 9a       	sbi	0x1b, 0	; 27
    1a58:	53 c0       	rjmp	.+166    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
			}
			else
			{
				PORTA &= ~(1<<0);
    1a5a:	d8 98       	cbi	0x1b, 0	; 27
    1a5c:	51 c0       	rjmp	.+162    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
			}
		//case U8X8_MSG_GPIO_SPI_CLOCK:
		break;
		case U8X8_MSG_GPIO_D1:				// D1 or SPI data pin: Output level in arg_int
					if(arg_int)
    1a5e:	44 23       	and	r20, r20
    1a60:	11 f0       	breq	.+4      	; 0x1a66 <u8x8_gpio_and_delay_template+0xa2>
					{
						PORTA |= (1<<1);
    1a62:	d9 9a       	sbi	0x1b, 1	; 27
    1a64:	4d c0       	rjmp	.+154    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
					else
					{
						PORTA &= ~(1<<1);
    1a66:	d9 98       	cbi	0x1b, 1	; 27
    1a68:	4b c0       	rjmp	.+150    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
		//case U8X8_MSG_GPIO_SPI_DATA:
		break;
		case U8X8_MSG_GPIO_D2:				// D2 pin: Output level in arg_int
					if(arg_int)
    1a6a:	44 23       	and	r20, r20
    1a6c:	11 f0       	breq	.+4      	; 0x1a72 <u8x8_gpio_and_delay_template+0xae>
					{
						PORTA |= (1<<2);
    1a6e:	da 9a       	sbi	0x1b, 2	; 27
    1a70:	47 c0       	rjmp	.+142    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
					else
					{
						PORTA &= ~(1<<2);
    1a72:	da 98       	cbi	0x1b, 2	; 27
    1a74:	45 c0       	rjmp	.+138    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
		break;
		case U8X8_MSG_GPIO_D3:				// D3 pin: Output level in arg_int
					if(arg_int)
    1a76:	44 23       	and	r20, r20
    1a78:	11 f0       	breq	.+4      	; 0x1a7e <u8x8_gpio_and_delay_template+0xba>
					{
						PORTA |= (1<<3);
    1a7a:	db 9a       	sbi	0x1b, 3	; 27
    1a7c:	41 c0       	rjmp	.+130    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
					else
					{
						PORTA &= ~(1<<3);
    1a7e:	db 98       	cbi	0x1b, 3	; 27
    1a80:	3f c0       	rjmp	.+126    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
		break;
		case U8X8_MSG_GPIO_D4:				// D4 pin: Output level in arg_int
					if(arg_int)
    1a82:	44 23       	and	r20, r20
    1a84:	11 f0       	breq	.+4      	; 0x1a8a <u8x8_gpio_and_delay_template+0xc6>
					{
						PORTA |= (1<<4);
    1a86:	dc 9a       	sbi	0x1b, 4	; 27
    1a88:	3b c0       	rjmp	.+118    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
					else
					{
						PORTA &= ~(1<<4);
    1a8a:	dc 98       	cbi	0x1b, 4	; 27
    1a8c:	39 c0       	rjmp	.+114    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
		break;
		case U8X8_MSG_GPIO_D5:				// D5 pin: Output level in arg_int
					if(arg_int)
    1a8e:	44 23       	and	r20, r20
    1a90:	11 f0       	breq	.+4      	; 0x1a96 <u8x8_gpio_and_delay_template+0xd2>
					{
						PORTA |= (1<<5);
    1a92:	dd 9a       	sbi	0x1b, 5	; 27
    1a94:	35 c0       	rjmp	.+106    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
					else
					{
						PORTA &= ~(1<<5);
    1a96:	dd 98       	cbi	0x1b, 5	; 27
    1a98:	33 c0       	rjmp	.+102    	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
		break;
		case U8X8_MSG_GPIO_D6:				// D6 pin: Output level in arg_int
					if(arg_int)
    1a9a:	44 23       	and	r20, r20
    1a9c:	11 f0       	breq	.+4      	; 0x1aa2 <u8x8_gpio_and_delay_template+0xde>
					{
						PORTA |= (1<<6);
    1a9e:	de 9a       	sbi	0x1b, 6	; 27
    1aa0:	2f c0       	rjmp	.+94     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
					else
					{
						PORTA &= ~(1<<6);
    1aa2:	de 98       	cbi	0x1b, 6	; 27
    1aa4:	2d c0       	rjmp	.+90     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
		break;
		case U8X8_MSG_GPIO_D7:				// D7 pin: Output level in arg_int
					if(arg_int)
    1aa6:	44 23       	and	r20, r20
    1aa8:	11 f0       	breq	.+4      	; 0x1aae <u8x8_gpio_and_delay_template+0xea>
					{
						PORTA |= (1<<7);
    1aaa:	df 9a       	sbi	0x1b, 7	; 27
    1aac:	29 c0       	rjmp	.+82     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
					else
					{
						PORTA &= ~(1<<7);
    1aae:	df 98       	cbi	0x1b, 7	; 27
    1ab0:	27 c0       	rjmp	.+78     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
		break;
		case U8X8_MSG_GPIO_E:				// E/WR pin: Output level in arg_int
					if(arg_int)
    1ab2:	44 23       	and	r20, r20
    1ab4:	11 f0       	breq	.+4      	; 0x1aba <u8x8_gpio_and_delay_template+0xf6>
					{
						PORTD |= (1<<0);
    1ab6:	90 9a       	sbi	0x12, 0	; 18
    1ab8:	23 c0       	rjmp	.+70     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
					else
					{
						PORTD &= ~(1<<0);
    1aba:	90 98       	cbi	0x12, 0	; 18
    1abc:	21 c0       	rjmp	.+66     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					//{
						//PORTD &= ~(1<<1);
					//}
		break;
		case U8X8_MSG_GPIO_DC:				// DC (data/cmd, A0, register select) pin: Output level in arg_int
					if(arg_int)
    1abe:	44 23       	and	r20, r20
    1ac0:	11 f0       	breq	.+4      	; 0x1ac6 <u8x8_gpio_and_delay_template+0x102>
					{
						PORTD |= (1<<2);
    1ac2:	92 9a       	sbi	0x12, 2	; 18
    1ac4:	1d c0       	rjmp	.+58     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
					else
					{
						PORTD &= ~(1<<2);
    1ac6:	92 98       	cbi	0x12, 2	; 18
    1ac8:	1b c0       	rjmp	.+54     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
		break;
		case U8X8_MSG_GPIO_RESET:			// Reset pin: Output level in arg_int
		break;
		case U8X8_MSG_GPIO_CS1:				// CS1 (chip select) pin: Output level in arg_int
					if(arg_int)
    1aca:	44 23       	and	r20, r20
    1acc:	11 f0       	breq	.+4      	; 0x1ad2 <u8x8_gpio_and_delay_template+0x10e>
					{
						PORTD |= (1<<3);
    1ace:	93 9a       	sbi	0x12, 3	; 18
    1ad0:	17 c0       	rjmp	.+46     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
					else
					{
						PORTD &= ~(1<<3);
    1ad2:	93 98       	cbi	0x12, 3	; 18
    1ad4:	15 c0       	rjmp	.+42     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
		break;
		case U8X8_MSG_GPIO_CS2:				// CS2 (chip select) pin: Output level in arg_int
					if(arg_int)
    1ad6:	44 23       	and	r20, r20
    1ad8:	11 f0       	breq	.+4      	; 0x1ade <u8x8_gpio_and_delay_template+0x11a>
					{
						PORTD |= (1<<4);
    1ada:	94 9a       	sbi	0x12, 4	; 18
    1adc:	11 c0       	rjmp	.+34     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
					}
					else
					{
						PORTD &= ~(1<<4);
    1ade:	94 98       	cbi	0x12, 4	; 18
    1ae0:	0f c0       	rjmp	.+30     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
		case U8X8_MSG_GPIO_I2C_CLOCK:		// arg_int=0: Output low at I2C clock pin
		break;							// arg_int=1: Input dir with pullup high for I2C clock pin
		case U8X8_MSG_GPIO_I2C_DATA:			// arg_int=0: Output low at I2C data pin
		break;							// arg_int=1: Input dir with pullup high for I2C data pin
		case U8X8_MSG_GPIO_MENU_SELECT:
		u8x8_SetGPIOResult(u8x8, /* get menu select pin state */ 0);
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	11 8e       	std	Z+25, r1	; 0x19
		break;
    1ae6:	0c c0       	rjmp	.+24     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
		case U8X8_MSG_GPIO_MENU_NEXT:
		u8x8_SetGPIOResult(u8x8, /* get menu next pin state */ 0);
    1ae8:	fc 01       	movw	r30, r24
    1aea:	11 8e       	std	Z+25, r1	; 0x19
		break;
    1aec:	09 c0       	rjmp	.+18     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
		case U8X8_MSG_GPIO_MENU_PREV:
		u8x8_SetGPIOResult(u8x8, /* get menu prev pin state */ 0);
    1aee:	fc 01       	movw	r30, r24
    1af0:	11 8e       	std	Z+25, r1	; 0x19
		break;
    1af2:	06 c0       	rjmp	.+12     	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
		case U8X8_MSG_GPIO_MENU_HOME:
		u8x8_SetGPIOResult(u8x8, /* get menu home pin state */ 0);
    1af4:	fc 01       	movw	r30, r24
    1af6:	11 8e       	std	Z+25, r1	; 0x19
		break;
    1af8:	03 c0       	rjmp	.+6      	; 0x1b00 <u8x8_gpio_and_delay_template+0x13c>
		default:
		u8x8_SetGPIOResult(u8x8, 1);			// default return value
    1afa:	21 e0       	ldi	r18, 0x01	; 1
    1afc:	fc 01       	movw	r30, r24
    1afe:	21 8f       	std	Z+25, r18	; 0x19
		break;
	}
	return 1;
}
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	08 95       	ret

00001b08 <GPIO_INIT>:
}


void GPIO_INIT(void)
{
	DDRB = 0xFF;
    1b08:	8f ef       	ldi	r24, 0xFF	; 255
    1b0a:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
    1b0c:	81 bb       	out	0x11, r24	; 17
    1b0e:	08 95       	ret

00001b10 <main>:
	return 1;
}


int main(void)
{
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	64 97       	sbiw	r28, 0x14	; 20
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
	GPIO_INIT();
    1b24:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <GPIO_INIT>
	u8g2_Setup_ks0108_128x64_f(&u8g2,U8G2_R0,&u8x8_byte_ks0108,&u8x8_gpio_and_delay_template);
    1b28:	22 ee       	ldi	r18, 0xE2	; 226
    1b2a:	3c e0       	ldi	r19, 0x0C	; 12
    1b2c:	45 e6       	ldi	r20, 0x65	; 101
    1b2e:	59 e0       	ldi	r21, 0x09	; 9
    1b30:	60 e6       	ldi	r22, 0x60	; 96
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	8c e9       	ldi	r24, 0x9C	; 156
    1b36:	94 e0       	ldi	r25, 0x04	; 4
    1b38:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_Setup_ks0108_128x64_f>
	u8g2_InitDisplay(&u8g2);
    1b3c:	8c e9       	ldi	r24, 0x9C	; 156
    1b3e:	94 e0       	ldi	r25, 0x04	; 4
    1b40:	0e 94 0f 0b 	call	0x161e	; 0x161e <u8x8_InitDisplay>
	//u8g2_SetPowerSave(&u8g2, 0);
	u8g2_ClearBuffer(&u8g2);
    1b44:	8c e9       	ldi	r24, 0x9C	; 156
    1b46:	94 e0       	ldi	r25, 0x04	; 4
    1b48:	0e 94 2b 03 	call	0x656	; 0x656 <u8g2_ClearBuffer>
	u8g2_SetFont(&u8g2, u8g2_font_t0_18_tr);
    1b4c:	6c ea       	ldi	r22, 0xAC	; 172
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	8c e9       	ldi	r24, 0x9C	; 156
    1b52:	94 e0       	ldi	r25, 0x04	; 4
    1b54:	0e 94 30 07 	call	0xe60	; 0xe60 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2, 0, 18, "Hello ");
    1b58:	27 e8       	ldi	r18, 0x87	; 135
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	42 e1       	ldi	r20, 0x12	; 18
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	8c e9       	ldi	r24, 0x9C	; 156
    1b62:	94 e0       	ldi	r25, 0x04	; 4
    1b64:	0e 94 dd 06 	call	0xdba	; 0xdba <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
    1b68:	8c e9       	ldi	r24, 0x9C	; 156
    1b6a:	94 e0       	ldi	r25, 0x04	; 4
    1b6c:	0e 94 41 03 	call	0x682	; 0x682 <u8g2_SendBuffer>
    1b70:	2f ef       	ldi	r18, 0xFF	; 255
    1b72:	83 ed       	ldi	r24, 0xD3	; 211
    1b74:	90 e3       	ldi	r25, 0x30	; 48
    1b76:	21 50       	subi	r18, 0x01	; 1
    1b78:	80 40       	sbci	r24, 0x00	; 0
    1b7a:	90 40       	sbci	r25, 0x00	; 0
    1b7c:	e1 f7       	brne	.-8      	; 0x1b76 <main+0x66>
    1b7e:	00 c0       	rjmp	.+0      	; 0x1b80 <main+0x70>
    1b80:	00 00       	nop
	_delay_ms(1000);
	uint16_t cnt = 0;
    1b82:	00 e0       	ldi	r16, 0x00	; 0
    1b84:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {
		char buffer[20] = {0};
    1b86:	0f 2e       	mov	r0, r31
    1b88:	f4 e1       	ldi	r31, 0x14	; 20
    1b8a:	bf 2e       	mov	r11, r31
    1b8c:	f0 2d       	mov	r31, r0
    1b8e:	fe 01       	movw	r30, r28
    1b90:	31 96       	adiw	r30, 0x01	; 1
    1b92:	7f 01       	movw	r14, r30
		sprintf(buffer,"Counter = %d",cnt);
    1b94:	0f 2e       	mov	r0, r31
    1b96:	fe e8       	ldi	r31, 0x8E	; 142
    1b98:	cf 2e       	mov	r12, r31
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	df 2e       	mov	r13, r31
    1b9e:	f0 2d       	mov	r31, r0
	u8g2_SendBuffer(&u8g2);
	_delay_ms(1000);
	uint16_t cnt = 0;
    while (1) 
    {
		char buffer[20] = {0};
    1ba0:	f7 01       	movw	r30, r14
    1ba2:	2b 2d       	mov	r18, r11
    1ba4:	11 92       	st	Z+, r1
    1ba6:	2a 95       	dec	r18
    1ba8:	e9 f7       	brne	.-6      	; 0x1ba4 <main+0x94>
		sprintf(buffer,"Counter = %d",cnt);
    1baa:	1f 93       	push	r17
    1bac:	0f 93       	push	r16
    1bae:	df 92       	push	r13
    1bb0:	cf 92       	push	r12
    1bb2:	ff 92       	push	r15
    1bb4:	ef 92       	push	r14
    1bb6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <sprintf>
		u8g2_ClearBuffer(&u8g2);
    1bba:	8c e9       	ldi	r24, 0x9C	; 156
    1bbc:	94 e0       	ldi	r25, 0x04	; 4
    1bbe:	0e 94 2b 03 	call	0x656	; 0x656 <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_t0_18_tr);
    1bc2:	6c ea       	ldi	r22, 0xAC	; 172
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	8c e9       	ldi	r24, 0x9C	; 156
    1bc8:	94 e0       	ldi	r25, 0x04	; 4
    1bca:	0e 94 30 07 	call	0xe60	; 0xe60 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 0, 18, buffer);
    1bce:	97 01       	movw	r18, r14
    1bd0:	42 e1       	ldi	r20, 0x12	; 18
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	8c e9       	ldi	r24, 0x9C	; 156
    1bd6:	94 e0       	ldi	r25, 0x04	; 4
    1bd8:	0e 94 dd 06 	call	0xdba	; 0xdba <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
    1bdc:	8c e9       	ldi	r24, 0x9C	; 156
    1bde:	94 e0       	ldi	r25, 0x04	; 4
    1be0:	0e 94 41 03 	call	0x682	; 0x682 <u8g2_SendBuffer>
		cnt++;
    1be4:	0f 5f       	subi	r16, 0xFF	; 255
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	8f ef       	ldi	r24, 0xFF	; 255
    1bea:	93 ec       	ldi	r25, 0xC3	; 195
    1bec:	e9 e0       	ldi	r30, 0x09	; 9
    1bee:	81 50       	subi	r24, 0x01	; 1
    1bf0:	90 40       	sbci	r25, 0x00	; 0
    1bf2:	e0 40       	sbci	r30, 0x00	; 0
    1bf4:	e1 f7       	brne	.-8      	; 0x1bee <main+0xde>
    1bf6:	00 c0       	rjmp	.+0      	; 0x1bf8 <main+0xe8>
    1bf8:	00 00       	nop
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cc cf       	rjmp	.-104    	; 0x1ba0 <main+0x90>

00001c08 <__udivmodsi4>:
    1c08:	a1 e2       	ldi	r26, 0x21	; 33
    1c0a:	1a 2e       	mov	r1, r26
    1c0c:	aa 1b       	sub	r26, r26
    1c0e:	bb 1b       	sub	r27, r27
    1c10:	fd 01       	movw	r30, r26
    1c12:	0d c0       	rjmp	.+26     	; 0x1c2e <__udivmodsi4_ep>

00001c14 <__udivmodsi4_loop>:
    1c14:	aa 1f       	adc	r26, r26
    1c16:	bb 1f       	adc	r27, r27
    1c18:	ee 1f       	adc	r30, r30
    1c1a:	ff 1f       	adc	r31, r31
    1c1c:	a2 17       	cp	r26, r18
    1c1e:	b3 07       	cpc	r27, r19
    1c20:	e4 07       	cpc	r30, r20
    1c22:	f5 07       	cpc	r31, r21
    1c24:	20 f0       	brcs	.+8      	; 0x1c2e <__udivmodsi4_ep>
    1c26:	a2 1b       	sub	r26, r18
    1c28:	b3 0b       	sbc	r27, r19
    1c2a:	e4 0b       	sbc	r30, r20
    1c2c:	f5 0b       	sbc	r31, r21

00001c2e <__udivmodsi4_ep>:
    1c2e:	66 1f       	adc	r22, r22
    1c30:	77 1f       	adc	r23, r23
    1c32:	88 1f       	adc	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	1a 94       	dec	r1
    1c38:	69 f7       	brne	.-38     	; 0x1c14 <__udivmodsi4_loop>
    1c3a:	60 95       	com	r22
    1c3c:	70 95       	com	r23
    1c3e:	80 95       	com	r24
    1c40:	90 95       	com	r25
    1c42:	9b 01       	movw	r18, r22
    1c44:	ac 01       	movw	r20, r24
    1c46:	bd 01       	movw	r22, r26
    1c48:	cf 01       	movw	r24, r30
    1c4a:	08 95       	ret

00001c4c <__tablejump2__>:
    1c4c:	ee 0f       	add	r30, r30
    1c4e:	ff 1f       	adc	r31, r31
    1c50:	05 90       	lpm	r0, Z+
    1c52:	f4 91       	lpm	r31, Z
    1c54:	e0 2d       	mov	r30, r0
    1c56:	09 94       	ijmp

00001c58 <__umulhisi3>:
    1c58:	a2 9f       	mul	r26, r18
    1c5a:	b0 01       	movw	r22, r0
    1c5c:	b3 9f       	mul	r27, r19
    1c5e:	c0 01       	movw	r24, r0
    1c60:	a3 9f       	mul	r26, r19
    1c62:	70 0d       	add	r23, r0
    1c64:	81 1d       	adc	r24, r1
    1c66:	11 24       	eor	r1, r1
    1c68:	91 1d       	adc	r25, r1
    1c6a:	b2 9f       	mul	r27, r18
    1c6c:	70 0d       	add	r23, r0
    1c6e:	81 1d       	adc	r24, r1
    1c70:	11 24       	eor	r1, r1
    1c72:	91 1d       	adc	r25, r1
    1c74:	08 95       	ret

00001c76 <memset>:
    1c76:	dc 01       	movw	r26, r24
    1c78:	01 c0       	rjmp	.+2      	; 0x1c7c <memset+0x6>
    1c7a:	6d 93       	st	X+, r22
    1c7c:	41 50       	subi	r20, 0x01	; 1
    1c7e:	50 40       	sbci	r21, 0x00	; 0
    1c80:	e0 f7       	brcc	.-8      	; 0x1c7a <memset+0x4>
    1c82:	08 95       	ret

00001c84 <sprintf>:
    1c84:	ae e0       	ldi	r26, 0x0E	; 14
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e8 e4       	ldi	r30, 0x48	; 72
    1c8a:	fe e0       	ldi	r31, 0x0E	; 14
    1c8c:	0c 94 03 11 	jmp	0x2206	; 0x2206 <__prologue_saves__+0x1c>
    1c90:	0d 89       	ldd	r16, Y+21	; 0x15
    1c92:	1e 89       	ldd	r17, Y+22	; 0x16
    1c94:	86 e0       	ldi	r24, 0x06	; 6
    1c96:	8c 83       	std	Y+4, r24	; 0x04
    1c98:	1a 83       	std	Y+2, r17	; 0x02
    1c9a:	09 83       	std	Y+1, r16	; 0x01
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
    1c9e:	9f e7       	ldi	r25, 0x7F	; 127
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	ae 01       	movw	r20, r28
    1ca6:	47 5e       	subi	r20, 0xE7	; 231
    1ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    1caa:	6f 89       	ldd	r22, Y+23	; 0x17
    1cac:	78 8d       	ldd	r23, Y+24	; 0x18
    1cae:	ce 01       	movw	r24, r28
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <vfprintf>
    1cb6:	ef 81       	ldd	r30, Y+7	; 0x07
    1cb8:	f8 85       	ldd	r31, Y+8	; 0x08
    1cba:	e0 0f       	add	r30, r16
    1cbc:	f1 1f       	adc	r31, r17
    1cbe:	10 82       	st	Z, r1
    1cc0:	2e 96       	adiw	r28, 0x0e	; 14
    1cc2:	e4 e0       	ldi	r30, 0x04	; 4
    1cc4:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__epilogue_restores__+0x1c>

00001cc8 <vfprintf>:
    1cc8:	ab e0       	ldi	r26, 0x0B	; 11
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	ea e6       	ldi	r30, 0x6A	; 106
    1cce:	fe e0       	ldi	r31, 0x0E	; 14
    1cd0:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__prologue_saves__>
    1cd4:	6c 01       	movw	r12, r24
    1cd6:	7b 01       	movw	r14, r22
    1cd8:	8a 01       	movw	r16, r20
    1cda:	fc 01       	movw	r30, r24
    1cdc:	17 82       	std	Z+7, r1	; 0x07
    1cde:	16 82       	std	Z+6, r1	; 0x06
    1ce0:	83 81       	ldd	r24, Z+3	; 0x03
    1ce2:	81 ff       	sbrs	r24, 1
    1ce4:	cc c1       	rjmp	.+920    	; 0x207e <vfprintf+0x3b6>
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	3c 01       	movw	r6, r24
    1cec:	f6 01       	movw	r30, r12
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	f7 01       	movw	r30, r14
    1cf2:	93 fd       	sbrc	r25, 3
    1cf4:	85 91       	lpm	r24, Z+
    1cf6:	93 ff       	sbrs	r25, 3
    1cf8:	81 91       	ld	r24, Z+
    1cfa:	7f 01       	movw	r14, r30
    1cfc:	88 23       	and	r24, r24
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <vfprintf+0x3a>
    1d00:	ba c1       	rjmp	.+884    	; 0x2076 <vfprintf+0x3ae>
    1d02:	85 32       	cpi	r24, 0x25	; 37
    1d04:	39 f4       	brne	.+14     	; 0x1d14 <vfprintf+0x4c>
    1d06:	93 fd       	sbrc	r25, 3
    1d08:	85 91       	lpm	r24, Z+
    1d0a:	93 ff       	sbrs	r25, 3
    1d0c:	81 91       	ld	r24, Z+
    1d0e:	7f 01       	movw	r14, r30
    1d10:	85 32       	cpi	r24, 0x25	; 37
    1d12:	29 f4       	brne	.+10     	; 0x1d1e <vfprintf+0x56>
    1d14:	b6 01       	movw	r22, r12
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <fputc>
    1d1c:	e7 cf       	rjmp	.-50     	; 0x1cec <vfprintf+0x24>
    1d1e:	91 2c       	mov	r9, r1
    1d20:	21 2c       	mov	r2, r1
    1d22:	31 2c       	mov	r3, r1
    1d24:	ff e1       	ldi	r31, 0x1F	; 31
    1d26:	f3 15       	cp	r31, r3
    1d28:	d8 f0       	brcs	.+54     	; 0x1d60 <vfprintf+0x98>
    1d2a:	8b 32       	cpi	r24, 0x2B	; 43
    1d2c:	79 f0       	breq	.+30     	; 0x1d4c <vfprintf+0x84>
    1d2e:	38 f4       	brcc	.+14     	; 0x1d3e <vfprintf+0x76>
    1d30:	80 32       	cpi	r24, 0x20	; 32
    1d32:	79 f0       	breq	.+30     	; 0x1d52 <vfprintf+0x8a>
    1d34:	83 32       	cpi	r24, 0x23	; 35
    1d36:	a1 f4       	brne	.+40     	; 0x1d60 <vfprintf+0x98>
    1d38:	23 2d       	mov	r18, r3
    1d3a:	20 61       	ori	r18, 0x10	; 16
    1d3c:	1d c0       	rjmp	.+58     	; 0x1d78 <vfprintf+0xb0>
    1d3e:	8d 32       	cpi	r24, 0x2D	; 45
    1d40:	61 f0       	breq	.+24     	; 0x1d5a <vfprintf+0x92>
    1d42:	80 33       	cpi	r24, 0x30	; 48
    1d44:	69 f4       	brne	.+26     	; 0x1d60 <vfprintf+0x98>
    1d46:	23 2d       	mov	r18, r3
    1d48:	21 60       	ori	r18, 0x01	; 1
    1d4a:	16 c0       	rjmp	.+44     	; 0x1d78 <vfprintf+0xb0>
    1d4c:	83 2d       	mov	r24, r3
    1d4e:	82 60       	ori	r24, 0x02	; 2
    1d50:	38 2e       	mov	r3, r24
    1d52:	e3 2d       	mov	r30, r3
    1d54:	e4 60       	ori	r30, 0x04	; 4
    1d56:	3e 2e       	mov	r3, r30
    1d58:	2a c0       	rjmp	.+84     	; 0x1dae <vfprintf+0xe6>
    1d5a:	f3 2d       	mov	r31, r3
    1d5c:	f8 60       	ori	r31, 0x08	; 8
    1d5e:	1d c0       	rjmp	.+58     	; 0x1d9a <vfprintf+0xd2>
    1d60:	37 fc       	sbrc	r3, 7
    1d62:	2d c0       	rjmp	.+90     	; 0x1dbe <vfprintf+0xf6>
    1d64:	20 ed       	ldi	r18, 0xD0	; 208
    1d66:	28 0f       	add	r18, r24
    1d68:	2a 30       	cpi	r18, 0x0A	; 10
    1d6a:	40 f0       	brcs	.+16     	; 0x1d7c <vfprintf+0xb4>
    1d6c:	8e 32       	cpi	r24, 0x2E	; 46
    1d6e:	b9 f4       	brne	.+46     	; 0x1d9e <vfprintf+0xd6>
    1d70:	36 fc       	sbrc	r3, 6
    1d72:	81 c1       	rjmp	.+770    	; 0x2076 <vfprintf+0x3ae>
    1d74:	23 2d       	mov	r18, r3
    1d76:	20 64       	ori	r18, 0x40	; 64
    1d78:	32 2e       	mov	r3, r18
    1d7a:	19 c0       	rjmp	.+50     	; 0x1dae <vfprintf+0xe6>
    1d7c:	36 fe       	sbrs	r3, 6
    1d7e:	06 c0       	rjmp	.+12     	; 0x1d8c <vfprintf+0xc4>
    1d80:	8a e0       	ldi	r24, 0x0A	; 10
    1d82:	98 9e       	mul	r9, r24
    1d84:	20 0d       	add	r18, r0
    1d86:	11 24       	eor	r1, r1
    1d88:	92 2e       	mov	r9, r18
    1d8a:	11 c0       	rjmp	.+34     	; 0x1dae <vfprintf+0xe6>
    1d8c:	ea e0       	ldi	r30, 0x0A	; 10
    1d8e:	2e 9e       	mul	r2, r30
    1d90:	20 0d       	add	r18, r0
    1d92:	11 24       	eor	r1, r1
    1d94:	22 2e       	mov	r2, r18
    1d96:	f3 2d       	mov	r31, r3
    1d98:	f0 62       	ori	r31, 0x20	; 32
    1d9a:	3f 2e       	mov	r3, r31
    1d9c:	08 c0       	rjmp	.+16     	; 0x1dae <vfprintf+0xe6>
    1d9e:	8c 36       	cpi	r24, 0x6C	; 108
    1da0:	21 f4       	brne	.+8      	; 0x1daa <vfprintf+0xe2>
    1da2:	83 2d       	mov	r24, r3
    1da4:	80 68       	ori	r24, 0x80	; 128
    1da6:	38 2e       	mov	r3, r24
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <vfprintf+0xe6>
    1daa:	88 36       	cpi	r24, 0x68	; 104
    1dac:	41 f4       	brne	.+16     	; 0x1dbe <vfprintf+0xf6>
    1dae:	f7 01       	movw	r30, r14
    1db0:	93 fd       	sbrc	r25, 3
    1db2:	85 91       	lpm	r24, Z+
    1db4:	93 ff       	sbrs	r25, 3
    1db6:	81 91       	ld	r24, Z+
    1db8:	7f 01       	movw	r14, r30
    1dba:	81 11       	cpse	r24, r1
    1dbc:	b3 cf       	rjmp	.-154    	; 0x1d24 <vfprintf+0x5c>
    1dbe:	98 2f       	mov	r25, r24
    1dc0:	9f 7d       	andi	r25, 0xDF	; 223
    1dc2:	95 54       	subi	r25, 0x45	; 69
    1dc4:	93 30       	cpi	r25, 0x03	; 3
    1dc6:	28 f4       	brcc	.+10     	; 0x1dd2 <vfprintf+0x10a>
    1dc8:	0c 5f       	subi	r16, 0xFC	; 252
    1dca:	1f 4f       	sbci	r17, 0xFF	; 255
    1dcc:	9f e3       	ldi	r25, 0x3F	; 63
    1dce:	99 83       	std	Y+1, r25	; 0x01
    1dd0:	0d c0       	rjmp	.+26     	; 0x1dec <vfprintf+0x124>
    1dd2:	83 36       	cpi	r24, 0x63	; 99
    1dd4:	31 f0       	breq	.+12     	; 0x1de2 <vfprintf+0x11a>
    1dd6:	83 37       	cpi	r24, 0x73	; 115
    1dd8:	71 f0       	breq	.+28     	; 0x1df6 <vfprintf+0x12e>
    1dda:	83 35       	cpi	r24, 0x53	; 83
    1ddc:	09 f0       	breq	.+2      	; 0x1de0 <vfprintf+0x118>
    1dde:	59 c0       	rjmp	.+178    	; 0x1e92 <vfprintf+0x1ca>
    1de0:	21 c0       	rjmp	.+66     	; 0x1e24 <vfprintf+0x15c>
    1de2:	f8 01       	movw	r30, r16
    1de4:	80 81       	ld	r24, Z
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	0e 5f       	subi	r16, 0xFE	; 254
    1dea:	1f 4f       	sbci	r17, 0xFF	; 255
    1dec:	88 24       	eor	r8, r8
    1dee:	83 94       	inc	r8
    1df0:	91 2c       	mov	r9, r1
    1df2:	53 01       	movw	r10, r6
    1df4:	13 c0       	rjmp	.+38     	; 0x1e1c <vfprintf+0x154>
    1df6:	28 01       	movw	r4, r16
    1df8:	f2 e0       	ldi	r31, 0x02	; 2
    1dfa:	4f 0e       	add	r4, r31
    1dfc:	51 1c       	adc	r5, r1
    1dfe:	f8 01       	movw	r30, r16
    1e00:	a0 80       	ld	r10, Z
    1e02:	b1 80       	ldd	r11, Z+1	; 0x01
    1e04:	36 fe       	sbrs	r3, 6
    1e06:	03 c0       	rjmp	.+6      	; 0x1e0e <vfprintf+0x146>
    1e08:	69 2d       	mov	r22, r9
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <vfprintf+0x14a>
    1e0e:	6f ef       	ldi	r22, 0xFF	; 255
    1e10:	7f ef       	ldi	r23, 0xFF	; 255
    1e12:	c5 01       	movw	r24, r10
    1e14:	0e 94 50 10 	call	0x20a0	; 0x20a0 <strnlen>
    1e18:	4c 01       	movw	r8, r24
    1e1a:	82 01       	movw	r16, r4
    1e1c:	f3 2d       	mov	r31, r3
    1e1e:	ff 77       	andi	r31, 0x7F	; 127
    1e20:	3f 2e       	mov	r3, r31
    1e22:	16 c0       	rjmp	.+44     	; 0x1e50 <vfprintf+0x188>
    1e24:	28 01       	movw	r4, r16
    1e26:	22 e0       	ldi	r18, 0x02	; 2
    1e28:	42 0e       	add	r4, r18
    1e2a:	51 1c       	adc	r5, r1
    1e2c:	f8 01       	movw	r30, r16
    1e2e:	a0 80       	ld	r10, Z
    1e30:	b1 80       	ldd	r11, Z+1	; 0x01
    1e32:	36 fe       	sbrs	r3, 6
    1e34:	03 c0       	rjmp	.+6      	; 0x1e3c <vfprintf+0x174>
    1e36:	69 2d       	mov	r22, r9
    1e38:	70 e0       	ldi	r23, 0x00	; 0
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <vfprintf+0x178>
    1e3c:	6f ef       	ldi	r22, 0xFF	; 255
    1e3e:	7f ef       	ldi	r23, 0xFF	; 255
    1e40:	c5 01       	movw	r24, r10
    1e42:	0e 94 45 10 	call	0x208a	; 0x208a <strnlen_P>
    1e46:	4c 01       	movw	r8, r24
    1e48:	f3 2d       	mov	r31, r3
    1e4a:	f0 68       	ori	r31, 0x80	; 128
    1e4c:	3f 2e       	mov	r3, r31
    1e4e:	82 01       	movw	r16, r4
    1e50:	33 fc       	sbrc	r3, 3
    1e52:	1b c0       	rjmp	.+54     	; 0x1e8a <vfprintf+0x1c2>
    1e54:	82 2d       	mov	r24, r2
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	88 16       	cp	r8, r24
    1e5a:	99 06       	cpc	r9, r25
    1e5c:	b0 f4       	brcc	.+44     	; 0x1e8a <vfprintf+0x1c2>
    1e5e:	b6 01       	movw	r22, r12
    1e60:	80 e2       	ldi	r24, 0x20	; 32
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <fputc>
    1e68:	2a 94       	dec	r2
    1e6a:	f4 cf       	rjmp	.-24     	; 0x1e54 <vfprintf+0x18c>
    1e6c:	f5 01       	movw	r30, r10
    1e6e:	37 fc       	sbrc	r3, 7
    1e70:	85 91       	lpm	r24, Z+
    1e72:	37 fe       	sbrs	r3, 7
    1e74:	81 91       	ld	r24, Z+
    1e76:	5f 01       	movw	r10, r30
    1e78:	b6 01       	movw	r22, r12
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <fputc>
    1e80:	21 10       	cpse	r2, r1
    1e82:	2a 94       	dec	r2
    1e84:	21 e0       	ldi	r18, 0x01	; 1
    1e86:	82 1a       	sub	r8, r18
    1e88:	91 08       	sbc	r9, r1
    1e8a:	81 14       	cp	r8, r1
    1e8c:	91 04       	cpc	r9, r1
    1e8e:	71 f7       	brne	.-36     	; 0x1e6c <vfprintf+0x1a4>
    1e90:	e8 c0       	rjmp	.+464    	; 0x2062 <vfprintf+0x39a>
    1e92:	84 36       	cpi	r24, 0x64	; 100
    1e94:	11 f0       	breq	.+4      	; 0x1e9a <vfprintf+0x1d2>
    1e96:	89 36       	cpi	r24, 0x69	; 105
    1e98:	41 f5       	brne	.+80     	; 0x1eea <vfprintf+0x222>
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	37 fe       	sbrs	r3, 7
    1e9e:	07 c0       	rjmp	.+14     	; 0x1eae <vfprintf+0x1e6>
    1ea0:	60 81       	ld	r22, Z
    1ea2:	71 81       	ldd	r23, Z+1	; 0x01
    1ea4:	82 81       	ldd	r24, Z+2	; 0x02
    1ea6:	93 81       	ldd	r25, Z+3	; 0x03
    1ea8:	0c 5f       	subi	r16, 0xFC	; 252
    1eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1eac:	08 c0       	rjmp	.+16     	; 0x1ebe <vfprintf+0x1f6>
    1eae:	60 81       	ld	r22, Z
    1eb0:	71 81       	ldd	r23, Z+1	; 0x01
    1eb2:	07 2e       	mov	r0, r23
    1eb4:	00 0c       	add	r0, r0
    1eb6:	88 0b       	sbc	r24, r24
    1eb8:	99 0b       	sbc	r25, r25
    1eba:	0e 5f       	subi	r16, 0xFE	; 254
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	f3 2d       	mov	r31, r3
    1ec0:	ff 76       	andi	r31, 0x6F	; 111
    1ec2:	3f 2e       	mov	r3, r31
    1ec4:	97 ff       	sbrs	r25, 7
    1ec6:	09 c0       	rjmp	.+18     	; 0x1eda <vfprintf+0x212>
    1ec8:	90 95       	com	r25
    1eca:	80 95       	com	r24
    1ecc:	70 95       	com	r23
    1ece:	61 95       	neg	r22
    1ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed6:	f0 68       	ori	r31, 0x80	; 128
    1ed8:	3f 2e       	mov	r3, r31
    1eda:	2a e0       	ldi	r18, 0x0A	; 10
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	a3 01       	movw	r20, r6
    1ee0:	0e 94 97 10 	call	0x212e	; 0x212e <__ultoa_invert>
    1ee4:	88 2e       	mov	r8, r24
    1ee6:	86 18       	sub	r8, r6
    1ee8:	45 c0       	rjmp	.+138    	; 0x1f74 <vfprintf+0x2ac>
    1eea:	85 37       	cpi	r24, 0x75	; 117
    1eec:	31 f4       	brne	.+12     	; 0x1efa <vfprintf+0x232>
    1eee:	23 2d       	mov	r18, r3
    1ef0:	2f 7e       	andi	r18, 0xEF	; 239
    1ef2:	b2 2e       	mov	r11, r18
    1ef4:	2a e0       	ldi	r18, 0x0A	; 10
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	25 c0       	rjmp	.+74     	; 0x1f44 <vfprintf+0x27c>
    1efa:	93 2d       	mov	r25, r3
    1efc:	99 7f       	andi	r25, 0xF9	; 249
    1efe:	b9 2e       	mov	r11, r25
    1f00:	8f 36       	cpi	r24, 0x6F	; 111
    1f02:	c1 f0       	breq	.+48     	; 0x1f34 <vfprintf+0x26c>
    1f04:	18 f4       	brcc	.+6      	; 0x1f0c <vfprintf+0x244>
    1f06:	88 35       	cpi	r24, 0x58	; 88
    1f08:	79 f0       	breq	.+30     	; 0x1f28 <vfprintf+0x260>
    1f0a:	b5 c0       	rjmp	.+362    	; 0x2076 <vfprintf+0x3ae>
    1f0c:	80 37       	cpi	r24, 0x70	; 112
    1f0e:	19 f0       	breq	.+6      	; 0x1f16 <vfprintf+0x24e>
    1f10:	88 37       	cpi	r24, 0x78	; 120
    1f12:	21 f0       	breq	.+8      	; 0x1f1c <vfprintf+0x254>
    1f14:	b0 c0       	rjmp	.+352    	; 0x2076 <vfprintf+0x3ae>
    1f16:	e9 2f       	mov	r30, r25
    1f18:	e0 61       	ori	r30, 0x10	; 16
    1f1a:	be 2e       	mov	r11, r30
    1f1c:	b4 fe       	sbrs	r11, 4
    1f1e:	0d c0       	rjmp	.+26     	; 0x1f3a <vfprintf+0x272>
    1f20:	fb 2d       	mov	r31, r11
    1f22:	f4 60       	ori	r31, 0x04	; 4
    1f24:	bf 2e       	mov	r11, r31
    1f26:	09 c0       	rjmp	.+18     	; 0x1f3a <vfprintf+0x272>
    1f28:	34 fe       	sbrs	r3, 4
    1f2a:	0a c0       	rjmp	.+20     	; 0x1f40 <vfprintf+0x278>
    1f2c:	29 2f       	mov	r18, r25
    1f2e:	26 60       	ori	r18, 0x06	; 6
    1f30:	b2 2e       	mov	r11, r18
    1f32:	06 c0       	rjmp	.+12     	; 0x1f40 <vfprintf+0x278>
    1f34:	28 e0       	ldi	r18, 0x08	; 8
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	05 c0       	rjmp	.+10     	; 0x1f44 <vfprintf+0x27c>
    1f3a:	20 e1       	ldi	r18, 0x10	; 16
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <vfprintf+0x27c>
    1f40:	20 e1       	ldi	r18, 0x10	; 16
    1f42:	32 e0       	ldi	r19, 0x02	; 2
    1f44:	f8 01       	movw	r30, r16
    1f46:	b7 fe       	sbrs	r11, 7
    1f48:	07 c0       	rjmp	.+14     	; 0x1f58 <vfprintf+0x290>
    1f4a:	60 81       	ld	r22, Z
    1f4c:	71 81       	ldd	r23, Z+1	; 0x01
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	0c 5f       	subi	r16, 0xFC	; 252
    1f54:	1f 4f       	sbci	r17, 0xFF	; 255
    1f56:	06 c0       	rjmp	.+12     	; 0x1f64 <vfprintf+0x29c>
    1f58:	60 81       	ld	r22, Z
    1f5a:	71 81       	ldd	r23, Z+1	; 0x01
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 5f       	subi	r16, 0xFE	; 254
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	a3 01       	movw	r20, r6
    1f66:	0e 94 97 10 	call	0x212e	; 0x212e <__ultoa_invert>
    1f6a:	88 2e       	mov	r8, r24
    1f6c:	86 18       	sub	r8, r6
    1f6e:	fb 2d       	mov	r31, r11
    1f70:	ff 77       	andi	r31, 0x7F	; 127
    1f72:	3f 2e       	mov	r3, r31
    1f74:	36 fe       	sbrs	r3, 6
    1f76:	0d c0       	rjmp	.+26     	; 0x1f92 <vfprintf+0x2ca>
    1f78:	23 2d       	mov	r18, r3
    1f7a:	2e 7f       	andi	r18, 0xFE	; 254
    1f7c:	a2 2e       	mov	r10, r18
    1f7e:	89 14       	cp	r8, r9
    1f80:	58 f4       	brcc	.+22     	; 0x1f98 <vfprintf+0x2d0>
    1f82:	34 fe       	sbrs	r3, 4
    1f84:	0b c0       	rjmp	.+22     	; 0x1f9c <vfprintf+0x2d4>
    1f86:	32 fc       	sbrc	r3, 2
    1f88:	09 c0       	rjmp	.+18     	; 0x1f9c <vfprintf+0x2d4>
    1f8a:	83 2d       	mov	r24, r3
    1f8c:	8e 7e       	andi	r24, 0xEE	; 238
    1f8e:	a8 2e       	mov	r10, r24
    1f90:	05 c0       	rjmp	.+10     	; 0x1f9c <vfprintf+0x2d4>
    1f92:	b8 2c       	mov	r11, r8
    1f94:	a3 2c       	mov	r10, r3
    1f96:	03 c0       	rjmp	.+6      	; 0x1f9e <vfprintf+0x2d6>
    1f98:	b8 2c       	mov	r11, r8
    1f9a:	01 c0       	rjmp	.+2      	; 0x1f9e <vfprintf+0x2d6>
    1f9c:	b9 2c       	mov	r11, r9
    1f9e:	a4 fe       	sbrs	r10, 4
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <vfprintf+0x2f8>
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e8 0d       	add	r30, r8
    1fa6:	f1 1d       	adc	r31, r1
    1fa8:	80 81       	ld	r24, Z
    1faa:	80 33       	cpi	r24, 0x30	; 48
    1fac:	21 f4       	brne	.+8      	; 0x1fb6 <vfprintf+0x2ee>
    1fae:	9a 2d       	mov	r25, r10
    1fb0:	99 7e       	andi	r25, 0xE9	; 233
    1fb2:	a9 2e       	mov	r10, r25
    1fb4:	09 c0       	rjmp	.+18     	; 0x1fc8 <vfprintf+0x300>
    1fb6:	a2 fe       	sbrs	r10, 2
    1fb8:	06 c0       	rjmp	.+12     	; 0x1fc6 <vfprintf+0x2fe>
    1fba:	b3 94       	inc	r11
    1fbc:	b3 94       	inc	r11
    1fbe:	04 c0       	rjmp	.+8      	; 0x1fc8 <vfprintf+0x300>
    1fc0:	8a 2d       	mov	r24, r10
    1fc2:	86 78       	andi	r24, 0x86	; 134
    1fc4:	09 f0       	breq	.+2      	; 0x1fc8 <vfprintf+0x300>
    1fc6:	b3 94       	inc	r11
    1fc8:	a3 fc       	sbrc	r10, 3
    1fca:	11 c0       	rjmp	.+34     	; 0x1fee <vfprintf+0x326>
    1fcc:	a0 fe       	sbrs	r10, 0
    1fce:	06 c0       	rjmp	.+12     	; 0x1fdc <vfprintf+0x314>
    1fd0:	b2 14       	cp	r11, r2
    1fd2:	88 f4       	brcc	.+34     	; 0x1ff6 <vfprintf+0x32e>
    1fd4:	28 0c       	add	r2, r8
    1fd6:	92 2c       	mov	r9, r2
    1fd8:	9b 18       	sub	r9, r11
    1fda:	0e c0       	rjmp	.+28     	; 0x1ff8 <vfprintf+0x330>
    1fdc:	b2 14       	cp	r11, r2
    1fde:	60 f4       	brcc	.+24     	; 0x1ff8 <vfprintf+0x330>
    1fe0:	b6 01       	movw	r22, r12
    1fe2:	80 e2       	ldi	r24, 0x20	; 32
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <fputc>
    1fea:	b3 94       	inc	r11
    1fec:	f7 cf       	rjmp	.-18     	; 0x1fdc <vfprintf+0x314>
    1fee:	b2 14       	cp	r11, r2
    1ff0:	18 f4       	brcc	.+6      	; 0x1ff8 <vfprintf+0x330>
    1ff2:	2b 18       	sub	r2, r11
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <vfprintf+0x332>
    1ff6:	98 2c       	mov	r9, r8
    1ff8:	21 2c       	mov	r2, r1
    1ffa:	a4 fe       	sbrs	r10, 4
    1ffc:	10 c0       	rjmp	.+32     	; 0x201e <vfprintf+0x356>
    1ffe:	b6 01       	movw	r22, r12
    2000:	80 e3       	ldi	r24, 0x30	; 48
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <fputc>
    2008:	a2 fe       	sbrs	r10, 2
    200a:	17 c0       	rjmp	.+46     	; 0x203a <vfprintf+0x372>
    200c:	a1 fc       	sbrc	r10, 1
    200e:	03 c0       	rjmp	.+6      	; 0x2016 <vfprintf+0x34e>
    2010:	88 e7       	ldi	r24, 0x78	; 120
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	02 c0       	rjmp	.+4      	; 0x201a <vfprintf+0x352>
    2016:	88 e5       	ldi	r24, 0x58	; 88
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	b6 01       	movw	r22, r12
    201c:	0c c0       	rjmp	.+24     	; 0x2036 <vfprintf+0x36e>
    201e:	8a 2d       	mov	r24, r10
    2020:	86 78       	andi	r24, 0x86	; 134
    2022:	59 f0       	breq	.+22     	; 0x203a <vfprintf+0x372>
    2024:	a1 fe       	sbrs	r10, 1
    2026:	02 c0       	rjmp	.+4      	; 0x202c <vfprintf+0x364>
    2028:	8b e2       	ldi	r24, 0x2B	; 43
    202a:	01 c0       	rjmp	.+2      	; 0x202e <vfprintf+0x366>
    202c:	80 e2       	ldi	r24, 0x20	; 32
    202e:	a7 fc       	sbrc	r10, 7
    2030:	8d e2       	ldi	r24, 0x2D	; 45
    2032:	b6 01       	movw	r22, r12
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <fputc>
    203a:	89 14       	cp	r8, r9
    203c:	38 f4       	brcc	.+14     	; 0x204c <vfprintf+0x384>
    203e:	b6 01       	movw	r22, r12
    2040:	80 e3       	ldi	r24, 0x30	; 48
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <fputc>
    2048:	9a 94       	dec	r9
    204a:	f7 cf       	rjmp	.-18     	; 0x203a <vfprintf+0x372>
    204c:	8a 94       	dec	r8
    204e:	f3 01       	movw	r30, r6
    2050:	e8 0d       	add	r30, r8
    2052:	f1 1d       	adc	r31, r1
    2054:	80 81       	ld	r24, Z
    2056:	b6 01       	movw	r22, r12
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <fputc>
    205e:	81 10       	cpse	r8, r1
    2060:	f5 cf       	rjmp	.-22     	; 0x204c <vfprintf+0x384>
    2062:	22 20       	and	r2, r2
    2064:	09 f4       	brne	.+2      	; 0x2068 <vfprintf+0x3a0>
    2066:	42 ce       	rjmp	.-892    	; 0x1cec <vfprintf+0x24>
    2068:	b6 01       	movw	r22, r12
    206a:	80 e2       	ldi	r24, 0x20	; 32
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <fputc>
    2072:	2a 94       	dec	r2
    2074:	f6 cf       	rjmp	.-20     	; 0x2062 <vfprintf+0x39a>
    2076:	f6 01       	movw	r30, r12
    2078:	86 81       	ldd	r24, Z+6	; 0x06
    207a:	97 81       	ldd	r25, Z+7	; 0x07
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <vfprintf+0x3ba>
    207e:	8f ef       	ldi	r24, 0xFF	; 255
    2080:	9f ef       	ldi	r25, 0xFF	; 255
    2082:	2b 96       	adiw	r28, 0x0b	; 11
    2084:	e2 e1       	ldi	r30, 0x12	; 18
    2086:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__epilogue_restores__>

0000208a <strnlen_P>:
    208a:	fc 01       	movw	r30, r24
    208c:	05 90       	lpm	r0, Z+
    208e:	61 50       	subi	r22, 0x01	; 1
    2090:	70 40       	sbci	r23, 0x00	; 0
    2092:	01 10       	cpse	r0, r1
    2094:	d8 f7       	brcc	.-10     	; 0x208c <strnlen_P+0x2>
    2096:	80 95       	com	r24
    2098:	90 95       	com	r25
    209a:	8e 0f       	add	r24, r30
    209c:	9f 1f       	adc	r25, r31
    209e:	08 95       	ret

000020a0 <strnlen>:
    20a0:	fc 01       	movw	r30, r24
    20a2:	61 50       	subi	r22, 0x01	; 1
    20a4:	70 40       	sbci	r23, 0x00	; 0
    20a6:	01 90       	ld	r0, Z+
    20a8:	01 10       	cpse	r0, r1
    20aa:	d8 f7       	brcc	.-10     	; 0x20a2 <strnlen+0x2>
    20ac:	80 95       	com	r24
    20ae:	90 95       	com	r25
    20b0:	8e 0f       	add	r24, r30
    20b2:	9f 1f       	adc	r25, r31
    20b4:	08 95       	ret

000020b6 <fputc>:
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	fb 01       	movw	r30, r22
    20c0:	23 81       	ldd	r18, Z+3	; 0x03
    20c2:	21 fd       	sbrc	r18, 1
    20c4:	03 c0       	rjmp	.+6      	; 0x20cc <fputc+0x16>
    20c6:	8f ef       	ldi	r24, 0xFF	; 255
    20c8:	9f ef       	ldi	r25, 0xFF	; 255
    20ca:	2c c0       	rjmp	.+88     	; 0x2124 <fputc+0x6e>
    20cc:	22 ff       	sbrs	r18, 2
    20ce:	16 c0       	rjmp	.+44     	; 0x20fc <fputc+0x46>
    20d0:	46 81       	ldd	r20, Z+6	; 0x06
    20d2:	57 81       	ldd	r21, Z+7	; 0x07
    20d4:	24 81       	ldd	r18, Z+4	; 0x04
    20d6:	35 81       	ldd	r19, Z+5	; 0x05
    20d8:	42 17       	cp	r20, r18
    20da:	53 07       	cpc	r21, r19
    20dc:	44 f4       	brge	.+16     	; 0x20ee <fputc+0x38>
    20de:	a0 81       	ld	r26, Z
    20e0:	b1 81       	ldd	r27, Z+1	; 0x01
    20e2:	9d 01       	movw	r18, r26
    20e4:	2f 5f       	subi	r18, 0xFF	; 255
    20e6:	3f 4f       	sbci	r19, 0xFF	; 255
    20e8:	31 83       	std	Z+1, r19	; 0x01
    20ea:	20 83       	st	Z, r18
    20ec:	8c 93       	st	X, r24
    20ee:	26 81       	ldd	r18, Z+6	; 0x06
    20f0:	37 81       	ldd	r19, Z+7	; 0x07
    20f2:	2f 5f       	subi	r18, 0xFF	; 255
    20f4:	3f 4f       	sbci	r19, 0xFF	; 255
    20f6:	37 83       	std	Z+7, r19	; 0x07
    20f8:	26 83       	std	Z+6, r18	; 0x06
    20fa:	14 c0       	rjmp	.+40     	; 0x2124 <fputc+0x6e>
    20fc:	8b 01       	movw	r16, r22
    20fe:	ec 01       	movw	r28, r24
    2100:	fb 01       	movw	r30, r22
    2102:	00 84       	ldd	r0, Z+8	; 0x08
    2104:	f1 85       	ldd	r31, Z+9	; 0x09
    2106:	e0 2d       	mov	r30, r0
    2108:	09 95       	icall
    210a:	89 2b       	or	r24, r25
    210c:	e1 f6       	brne	.-72     	; 0x20c6 <fputc+0x10>
    210e:	d8 01       	movw	r26, r16
    2110:	16 96       	adiw	r26, 0x06	; 6
    2112:	8d 91       	ld	r24, X+
    2114:	9c 91       	ld	r25, X
    2116:	17 97       	sbiw	r26, 0x07	; 7
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	17 96       	adiw	r26, 0x07	; 7
    211c:	9c 93       	st	X, r25
    211e:	8e 93       	st	-X, r24
    2120:	16 97       	sbiw	r26, 0x06	; 6
    2122:	ce 01       	movw	r24, r28
    2124:	df 91       	pop	r29
    2126:	cf 91       	pop	r28
    2128:	1f 91       	pop	r17
    212a:	0f 91       	pop	r16
    212c:	08 95       	ret

0000212e <__ultoa_invert>:
    212e:	fa 01       	movw	r30, r20
    2130:	aa 27       	eor	r26, r26
    2132:	28 30       	cpi	r18, 0x08	; 8
    2134:	51 f1       	breq	.+84     	; 0x218a <__ultoa_invert+0x5c>
    2136:	20 31       	cpi	r18, 0x10	; 16
    2138:	81 f1       	breq	.+96     	; 0x219a <__ultoa_invert+0x6c>
    213a:	e8 94       	clt
    213c:	6f 93       	push	r22
    213e:	6e 7f       	andi	r22, 0xFE	; 254
    2140:	6e 5f       	subi	r22, 0xFE	; 254
    2142:	7f 4f       	sbci	r23, 0xFF	; 255
    2144:	8f 4f       	sbci	r24, 0xFF	; 255
    2146:	9f 4f       	sbci	r25, 0xFF	; 255
    2148:	af 4f       	sbci	r26, 0xFF	; 255
    214a:	b1 e0       	ldi	r27, 0x01	; 1
    214c:	3e d0       	rcall	.+124    	; 0x21ca <__ultoa_invert+0x9c>
    214e:	b4 e0       	ldi	r27, 0x04	; 4
    2150:	3c d0       	rcall	.+120    	; 0x21ca <__ultoa_invert+0x9c>
    2152:	67 0f       	add	r22, r23
    2154:	78 1f       	adc	r23, r24
    2156:	89 1f       	adc	r24, r25
    2158:	9a 1f       	adc	r25, r26
    215a:	a1 1d       	adc	r26, r1
    215c:	68 0f       	add	r22, r24
    215e:	79 1f       	adc	r23, r25
    2160:	8a 1f       	adc	r24, r26
    2162:	91 1d       	adc	r25, r1
    2164:	a1 1d       	adc	r26, r1
    2166:	6a 0f       	add	r22, r26
    2168:	71 1d       	adc	r23, r1
    216a:	81 1d       	adc	r24, r1
    216c:	91 1d       	adc	r25, r1
    216e:	a1 1d       	adc	r26, r1
    2170:	20 d0       	rcall	.+64     	; 0x21b2 <__ultoa_invert+0x84>
    2172:	09 f4       	brne	.+2      	; 0x2176 <__ultoa_invert+0x48>
    2174:	68 94       	set
    2176:	3f 91       	pop	r19
    2178:	2a e0       	ldi	r18, 0x0A	; 10
    217a:	26 9f       	mul	r18, r22
    217c:	11 24       	eor	r1, r1
    217e:	30 19       	sub	r19, r0
    2180:	30 5d       	subi	r19, 0xD0	; 208
    2182:	31 93       	st	Z+, r19
    2184:	de f6       	brtc	.-74     	; 0x213c <__ultoa_invert+0xe>
    2186:	cf 01       	movw	r24, r30
    2188:	08 95       	ret
    218a:	46 2f       	mov	r20, r22
    218c:	47 70       	andi	r20, 0x07	; 7
    218e:	40 5d       	subi	r20, 0xD0	; 208
    2190:	41 93       	st	Z+, r20
    2192:	b3 e0       	ldi	r27, 0x03	; 3
    2194:	0f d0       	rcall	.+30     	; 0x21b4 <__ultoa_invert+0x86>
    2196:	c9 f7       	brne	.-14     	; 0x218a <__ultoa_invert+0x5c>
    2198:	f6 cf       	rjmp	.-20     	; 0x2186 <__ultoa_invert+0x58>
    219a:	46 2f       	mov	r20, r22
    219c:	4f 70       	andi	r20, 0x0F	; 15
    219e:	40 5d       	subi	r20, 0xD0	; 208
    21a0:	4a 33       	cpi	r20, 0x3A	; 58
    21a2:	18 f0       	brcs	.+6      	; 0x21aa <__ultoa_invert+0x7c>
    21a4:	49 5d       	subi	r20, 0xD9	; 217
    21a6:	31 fd       	sbrc	r19, 1
    21a8:	40 52       	subi	r20, 0x20	; 32
    21aa:	41 93       	st	Z+, r20
    21ac:	02 d0       	rcall	.+4      	; 0x21b2 <__ultoa_invert+0x84>
    21ae:	a9 f7       	brne	.-22     	; 0x219a <__ultoa_invert+0x6c>
    21b0:	ea cf       	rjmp	.-44     	; 0x2186 <__ultoa_invert+0x58>
    21b2:	b4 e0       	ldi	r27, 0x04	; 4
    21b4:	a6 95       	lsr	r26
    21b6:	97 95       	ror	r25
    21b8:	87 95       	ror	r24
    21ba:	77 95       	ror	r23
    21bc:	67 95       	ror	r22
    21be:	ba 95       	dec	r27
    21c0:	c9 f7       	brne	.-14     	; 0x21b4 <__ultoa_invert+0x86>
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	61 05       	cpc	r22, r1
    21c6:	71 05       	cpc	r23, r1
    21c8:	08 95       	ret
    21ca:	9b 01       	movw	r18, r22
    21cc:	ac 01       	movw	r20, r24
    21ce:	0a 2e       	mov	r0, r26
    21d0:	06 94       	lsr	r0
    21d2:	57 95       	ror	r21
    21d4:	47 95       	ror	r20
    21d6:	37 95       	ror	r19
    21d8:	27 95       	ror	r18
    21da:	ba 95       	dec	r27
    21dc:	c9 f7       	brne	.-14     	; 0x21d0 <__ultoa_invert+0xa2>
    21de:	62 0f       	add	r22, r18
    21e0:	73 1f       	adc	r23, r19
    21e2:	84 1f       	adc	r24, r20
    21e4:	95 1f       	adc	r25, r21
    21e6:	a0 1d       	adc	r26, r0
    21e8:	08 95       	ret

000021ea <__prologue_saves__>:
    21ea:	2f 92       	push	r2
    21ec:	3f 92       	push	r3
    21ee:	4f 92       	push	r4
    21f0:	5f 92       	push	r5
    21f2:	6f 92       	push	r6
    21f4:	7f 92       	push	r7
    21f6:	8f 92       	push	r8
    21f8:	9f 92       	push	r9
    21fa:	af 92       	push	r10
    21fc:	bf 92       	push	r11
    21fe:	cf 92       	push	r12
    2200:	df 92       	push	r13
    2202:	ef 92       	push	r14
    2204:	ff 92       	push	r15
    2206:	0f 93       	push	r16
    2208:	1f 93       	push	r17
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	ca 1b       	sub	r28, r26
    2214:	db 0b       	sbc	r29, r27
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	09 94       	ijmp

00002222 <__epilogue_restores__>:
    2222:	2a 88       	ldd	r2, Y+18	; 0x12
    2224:	39 88       	ldd	r3, Y+17	; 0x11
    2226:	48 88       	ldd	r4, Y+16	; 0x10
    2228:	5f 84       	ldd	r5, Y+15	; 0x0f
    222a:	6e 84       	ldd	r6, Y+14	; 0x0e
    222c:	7d 84       	ldd	r7, Y+13	; 0x0d
    222e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2230:	9b 84       	ldd	r9, Y+11	; 0x0b
    2232:	aa 84       	ldd	r10, Y+10	; 0x0a
    2234:	b9 84       	ldd	r11, Y+9	; 0x09
    2236:	c8 84       	ldd	r12, Y+8	; 0x08
    2238:	df 80       	ldd	r13, Y+7	; 0x07
    223a:	ee 80       	ldd	r14, Y+6	; 0x06
    223c:	fd 80       	ldd	r15, Y+5	; 0x05
    223e:	0c 81       	ldd	r16, Y+4	; 0x04
    2240:	1b 81       	ldd	r17, Y+3	; 0x03
    2242:	aa 81       	ldd	r26, Y+2	; 0x02
    2244:	b9 81       	ldd	r27, Y+1	; 0x01
    2246:	ce 0f       	add	r28, r30
    2248:	d1 1d       	adc	r29, r1
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	ed 01       	movw	r28, r26
    2256:	08 95       	ret

00002258 <_exit>:
    2258:	f8 94       	cli

0000225a <__stop_program>:
    225a:	ff cf       	rjmp	.-2      	; 0x225a <__stop_program>
